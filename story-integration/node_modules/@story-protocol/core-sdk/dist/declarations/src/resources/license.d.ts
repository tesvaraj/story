import { PublicClient } from "viem";
import { IpAssetRegistryClient, LicenseRegistryEventClient, LicenseRegistryReadOnlyClient, LicensingModuleClient, LicensingModulePredictMintingLicenseFeeResponse, ModuleRegistryReadOnlyClient, Multicall3Client, PiLicenseTemplateClient, PiLicenseTemplateGetLicenseTermsResponse, PiLicenseTemplateReadOnlyClient, SimpleWalletClient, WrappedIpClient } from "../abi/generated.js";
import { RegisterNonComSocialRemixingPILRequest, RegisterPILResponse, RegisterCommercialUsePILRequest, RegisterCommercialRemixPILRequest, AttachLicenseTermsRequest, MintLicenseTokensRequest, MintLicenseTokensResponse, AttachLicenseTermsResponse, LicenseTermsId, RegisterPILTermsRequest, PredictMintingLicenseFeeRequest, SetLicensingConfigRequest, SetLicensingConfigResponse } from "../types/resources/license.js";
import { ChainIds } from "../types/config.js";
export declare class LicenseClient {
    licenseRegistryClient: LicenseRegistryEventClient;
    licensingModuleClient: LicensingModuleClient;
    ipAssetRegistryClient: IpAssetRegistryClient;
    piLicenseTemplateReadOnlyClient: PiLicenseTemplateReadOnlyClient;
    licenseTemplateClient: PiLicenseTemplateClient;
    licenseRegistryReadOnlyClient: LicenseRegistryReadOnlyClient;
    moduleRegistryReadOnlyClient: ModuleRegistryReadOnlyClient;
    multicall3Client: Multicall3Client;
    wipClient: WrappedIpClient;
    private readonly rpcClient;
    private readonly wallet;
    private readonly chainId;
    private readonly walletAddress;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, chainId: ChainIds);
    /**
     * Registers new license terms and return the ID of the newly registered license terms.
     * @param request - The request object that contains all data needed to register a license term.
     *   @param request.transferable Indicates whether the license is transferable or not.
     *   @param request.royaltyPolicy The address of the royalty policy contract which required to StoryProtocol in advance.
     *   @param request.mintingFee The fee to be paid when minting a license.
     *   @param request.expiration The expiration period of the license.
     *   @param request.commercialUse Indicates whether the work can be used commercially or not.
     *   @param request.commercialAttribution Whether attribution is required when reproducing the work commercially or not.
     *   @param request.commercializerChecker Commercializers that are allowed to commercially exploit the work. If zero address, then no restrictions is enforced.
     *   @param request.commercializerCheckerData The data to be passed to the commercializer checker contract.
     *   @param request.commercialRevShare Percentage of revenue that must be shared with the licensor.
     *   @param request.commercialRevCeiling The maximum revenue that can be generated from the commercial use of the work.
     *   @param request.derivativesAllowed Indicates whether the licensee can create derivatives of his work or not.
     *   @param request.derivativesAttribution Indicates whether attribution is required for derivatives of the work or not.
     *   @param request.derivativesApproval Indicates whether the licensor must approve derivatives of the work before they can be linked to the licensor IP ID or not.
     *   @param request.derivativesReciprocal Indicates whether the licensee must license derivatives of the work under the same terms or not.
     *   @param request.derivativeRevCeiling The maximum revenue that can be generated from the derivative use of the work.
     *   @param request.currency The ERC20 token to be used to pay the minting fee. the token must be registered in story protocol.
     *   @param request.uri The URI of the license terms, which can be used to fetch the offchain license terms.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, and if encodedTxDataOnly is true, includes encoded transaction data, and if waitForTransaction is true, includes license terms Id.
     * @emits LicenseTermsRegistered (licenseTermsId, licenseTemplate, licenseTerms);
     */
    registerPILTerms(request: RegisterPILTermsRequest): Promise<RegisterPILResponse>;
    /**
     * Convenient function to register a PIL non commercial social remix license to the registry
     * @param request - [Optional] The request object that contains all data needed to register a PIL non commercial social remix license.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, and if encodedTxDataOnly is true, includes encoded transaction data, and if waitForTransaction is true, includes license terms Id.
     * @emits LicenseTermsRegistered (licenseTermsId, licenseTemplate, licenseTerms);
     */
    registerNonComSocialRemixingPIL(request?: RegisterNonComSocialRemixingPILRequest): Promise<RegisterPILResponse>;
    /**
     * Convenient function to register a PIL commercial use license to the registry.
     * @param request - The request object that contains all data needed to register a PIL commercial use license.
     *   @param request.defaultMintingFee The fee to be paid when minting a license.
     *   @param request.currency The ERC20 token to be used to pay the minting fee and the token must be registered in story protocol.
     *   @param request.royaltyPolicyAddress [Optional] The address of the royalty policy contract, default value is LAP.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, and if encodedTxDataOnly is true, includes encoded transaction data, and if waitForTransaction is true, includes license terms Id.
     * @emits LicenseTermsRegistered (licenseTermsId, licenseTemplate, licenseTerms);
     */
    registerCommercialUsePIL(request: RegisterCommercialUsePILRequest): Promise<RegisterPILResponse>;
    /**
     * Convenient function to register a PIL commercial Remix license to the registry.
     * @param request - The request object that contains all data needed to register license.
     *   @param request.defaultMintingFee The fee to be paid when minting a license.
     *   @param request.commercialRevShare Percentage of revenue that must be shared with the licensor.
     *   @param request.currency The ERC20 token to be used to pay the minting fee. the token must be registered in story protocol.
     *   @param request.royaltyPolicyAddress [Optional] The address of the royalty policy contract, default value is LAP.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, and if encodedTxDataOnly is true, includes encoded transaction data, and if waitForTransaction is true, includes license terms Id.
     * @emits LicenseTermsRegistered (licenseTermsId, licenseTemplate, licenseTerms);
     */
    registerCommercialRemixPIL(request: RegisterCommercialRemixPILRequest): Promise<RegisterPILResponse>;
    /**
     * Attaches license terms to an IP.
     * @param request - The request object that contains all data needed to attach license terms.
     *   @param request.ipId The address of the IP to which the license terms are attached.
     *   @param request.licenseTemplate The address of the license template, default value is Programmable IP License.
     *   @param request.licenseTermsId The ID of the license terms.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, and if encodedTxDataOnly is true, includes encoded transaction data, and if waitForTransaction is true, includes success.
     * If Ip have attached license terms, success will return false and txhash is empty.
     */
    attachLicenseTerms(request: AttachLicenseTermsRequest): Promise<AttachLicenseTermsResponse>;
    /**
     * Mints license tokens for the license terms attached to an IP.
     * The license tokens are minted to the receiver.
     * The license terms must be attached to the IP before calling this function.
     * But it can mint license token of default license terms without attaching the default license terms,
     * since it is attached to all IPs by default.
     * IP owners can mint license tokens for their IPs for arbitrary license terms
     * without attaching the license terms to IP.
     * It might require the caller pay the minting fee, depending on the license terms or configured by the iP owner.
     * The minting fee is paid in the minting fee token specified in the license terms or configured by the IP owner.
     * IP owners can configure the minting fee of their IPs or
     * configure the minting fee module to determine the minting fee.
     * @param request - The request object that contains all data needed to mint license tokens.
     *   @param request.licensorIpId The licensor IP ID.
     *   @param request.licenseTemplate The address of the license template, default value is Programmable IP License.
     *   @param request.licenseTermsId The ID of the license terms within the license template.
     *   @param request.amount The amount of license tokens to mint.
     *   @param request.receiver The address of the receiver.
     *   @param request.maxMintingFee The maximum minting fee that the caller is willing to pay. if set to 0 then no limit.
     *   @param request.maxRevenueShare The maximum revenue share percentage allowed for minting the License Tokens. Must be between 0 and 100,000,000 (where 100,000,000 represents 100%).
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, and if encodedTxDataOnly is true, includes encoded transaction data, and if waitForTransaction is true, includes license token IDs.
     * @emits LicenseTokensMinted (msg.sender, licensorIpId, licenseTemplate, licenseTermsId, amount, receiver, startLicenseTokenId);
     */
    mintLicenseTokens(request: MintLicenseTokensRequest): Promise<MintLicenseTokensResponse>;
    /**
     * Gets license terms of the given ID.
     * @param selectedLicenseTermsId The ID of the license terms.
     * @returns A Promise that resolves to an object containing the PILTerms associate with the given ID.
     */
    getLicenseTerms(selectedLicenseTermsId: LicenseTermsId): Promise<PiLicenseTemplateGetLicenseTermsResponse>;
    /**
     * Pre-compute the minting license fee for the given IP and license terms. The function can be used to calculate the minting license fee before minting license tokens.
     * @param request - The request object that contains all data needed to predict minting licenses fee.
     *   @param request.licensorIpId The IP ID of the licensor.
     *   @param request.licenseTermsId The ID of the license terms.
     *   @param request.amount The amount of license tokens to mint.
     *   @param request.licenseTemplate [Optional] The address of the license template, default value is Programmable IP License.
     *   @param request.receiver [Optional] The address of the receiver,default value is your wallet address.
     *   @param request.txOptions [Optional] This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to an object containing the currency token and token amount.
     */
    predictMintingLicenseFee(request: PredictMintingLicenseFeeRequest): Promise<LicensingModulePredictMintingLicenseFeeResponse>;
    /**
     * Sets the licensing configuration for a specific license terms of an IP. If both licenseTemplate and licenseTermsId are not specified then the licensing config apply to all licenses of given IP.
     * @param request - The request object that contains all data needed to set licensing config.
     *   @param request.ipId The address of the IP for which the configuration is being set.
     *   @param request.licenseTermsId The ID of the license terms within the license template.
     *   @param request.licenseTemplate The address of the license template used, If not specified, the configuration applies to all licenses.
     *   @param request.licensingConfig The licensing configuration for the license.
     *   @param request.licensingConfig.isSet Whether the configuration is set or not.
     *   @param request.licensingConfig.mintingFee The minting fee to be paid when minting license tokens.
     *   @param request.licensingConfig.hookData The data to be used by the licensing hook.
     *   @param request.licensingConfig.licensingHook The hook contract address for the licensing module, or address(0) if none.
     *   @param request.licensingConfig.commercialRevShare The commercial revenue share percentage.
     *   @param request.licensingConfig.disabled Whether the license is disabled or not.
     *   @param request.licensingConfig.expectMinimumGroupRewardShare The minimum percentage of the group’s reward share (from 0 to 100%, represented as 100 * 10 ** 6) that can be allocated to the IP when it is added to the group.
     *    If the remaining reward share in the group is less than the minimumGroupRewardShare, the IP cannot be added to the group.
     *   @param request.licensingConfig.expectGroupRewardPool The address of the expected group reward pool. The IP can only be added to a group with this specified reward pool address,
     *    or address(0) if the IP does not want to be added to any group.
     *   @param request.txOptions [Optional] This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, and if encodedTxDataOnly is true, includes encoded transaction data, and if waitForTransaction is true, includes success.
     */
    setLicensingConfig(request: SetLicensingConfigRequest): Promise<SetLicensingConfigResponse>;
    private getLicenseTermsId;
}
//# sourceMappingURL=license.d.ts.map