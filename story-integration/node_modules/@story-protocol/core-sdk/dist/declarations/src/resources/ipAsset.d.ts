import { Hex, PublicClient } from "viem";
import { BatchMintAndRegisterIpAndMakeDerivativeRequest, BatchMintAndRegisterIpAndMakeDerivativeResponse, BatchMintAndRegisterIpAssetWithPilTermsRequest, BatchMintAndRegisterIpAssetWithPilTermsResponse, BatchRegisterDerivativeRequest, BatchRegisterDerivativeResponse, BatchRegisterRequest, BatchRegisterResponse, MintAndRegisterIpAssetWithPilTermsRequest, MintAndRegisterIpAssetWithPilTermsResponse, GenerateCreatorMetadataParam, GenerateIpMetadataParam, IpCreator, IpMetadata, MintAndRegisterIpAndMakeDerivativeRequest, MintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest, MintAndRegisterIpRequest, RegisterDerivativeRequest, RegisterDerivativeResponse, RegisterDerivativeWithLicenseTokensRequest, RegisterDerivativeWithLicenseTokensResponse, RegisterIpAndAttachPilTermsRequest, RegisterIpAndAttachPilTermsResponse, RegisterIpAndMakeDerivativeRequest, RegisterIpAndMakeDerivativeResponse, RegisterIpAndMakeDerivativeWithLicenseTokensRequest, RegisterIpResponse, RegisterPilTermsAndAttachRequest, RegisterPilTermsAndAttachResponse, RegisterRequest, MintAndRegisterIpAndMakeDerivativeResponse, RegisterIPAndAttachLicenseTermsAndDistributeRoyaltyTokensRequest, RegisterIPAndAttachLicenseTermsAndDistributeRoyaltyTokensResponse, RegisterDerivativeAndAttachLicenseTermsAndDistributeRoyaltyTokensRequest, RegisterDerivativeAndAttachLicenseTermsAndDistributeRoyaltyTokensResponse, MintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokensRequest, MintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest, MintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokensResponse, MintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensResponse } from "../types/resources/ipAsset.js";
import { AccessControllerClient, CoreMetadataModuleClient, DerivativeWorkflowsClient, IpAssetRegistryClient, LicenseAttachmentWorkflowsClient, LicenseRegistryReadOnlyClient, LicenseTokenReadOnlyClient, LicensingModuleClient, Multicall3Client, PiLicenseTemplateClient, RegistrationWorkflowsClient, RoyaltyModuleEventClient, RoyaltyTokenDistributionWorkflowsClient, SimpleWalletClient, SpgnftImplReadOnlyClient, WrappedIpClient } from "../abi/generated.js";
import { ChainIds } from "../types/config.js";
export declare class IPAssetClient {
    licensingModuleClient: LicensingModuleClient;
    ipAssetRegistryClient: IpAssetRegistryClient;
    licenseTemplateClient: PiLicenseTemplateClient;
    licenseRegistryReadOnlyClient: LicenseRegistryReadOnlyClient;
    licenseTokenReadOnlyClient: LicenseTokenReadOnlyClient;
    accessControllerClient: AccessControllerClient;
    coreMetadataModuleClient: CoreMetadataModuleClient;
    registrationWorkflowsClient: RegistrationWorkflowsClient;
    licenseAttachmentWorkflowsClient: LicenseAttachmentWorkflowsClient;
    derivativeWorkflowsClient: DerivativeWorkflowsClient;
    multicall3Client: Multicall3Client;
    royaltyTokenDistributionWorkflowsClient: RoyaltyTokenDistributionWorkflowsClient;
    royaltyModuleEventClient: RoyaltyModuleEventClient;
    wipClient: WrappedIpClient;
    spgNftClient: SpgnftImplReadOnlyClient;
    private readonly rpcClient;
    private readonly wallet;
    private readonly chainId;
    private readonly walletAddress;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, chainId: ChainIds);
    /**
     * Create a new `IpCreator` object with the specified details.
     * @param params - The parameters required to create the `IpCreator` object.
     *   @param params.name The name of the creator.
     *   @param params.address The wallet address of the creator.
     *   @param params.description [Optional] A description of the creator.
     *   @param params.image [Optional] The URL or path to an image representing the creator.
     *   @param {Array} params.socialMedia [Optional] An array of social media profiles associated with the creator.
     *     @param params.socialMedia[].platform The name of the social media platform.
     *     @param params.socialMedia[].url The URL to the creator's profile on the platform.
     *  @param params.contributionPercent The percentage of contribution by the creator, must add up to 100.
     *  @param params.role [Optional] The role of the creator in relation to the IP.
     * @returns An `IpCreator` object containing the provided details.
     */
    generateCreatorMetadata(param: GenerateCreatorMetadataParam): IpCreator;
    /**
     * Create a new `IpMetadata` object with the specified details.
     * @param params - The parameters required to create the `IpMetadata` object.
     *   @param params.title [Optional] The title of the IP.
     *   @param params.description [Optional] A description of the IP.
     *   @param params.ipType [Optional] The type of the IP asset (e.g., "character", "chapter").
     *   @param {Array} params.relationships [Optional] An array of relationships between this IP and its parent IPs.
     *     @param params.relationships[].ipId The ID of the parent IP.
     *     @param params.relationships[].type The type of relationship (e.g., "APPEARS_IN").
     *   @param params.createdAt [Optional] The creation date and time of the IP in ISO 8601 format.
     *   @param params.watermarkImg [Optional] The URL or path to an image used as a watermark for the IP.
     *   @param {Array} params.creators [Optional] An array of creators associated with the IP.
     *     @param params.creators[].name The name of the creator.
     *     @param params.creators[].address The address of the creator.
     *     @param params.creators[].description [Optional] A description of the creator.
     *     @param params.creators[].image [Optional] The URL or path to an image representing the creator.
     *     @param params.creators[].socialMedia [Optional] An array of social media profiles for the creator.
     *     @param params.creators[].socialMedia[].platform The social media platform name.
     *     @param params.creators[].socialMedia[].url The URL to the creator's profile.
     *     @param params.creators[].role [Optional] The role of the creator in relation to the IP.
     *     @param params.creators[].contributionPercent The percentage of contribution by the creator.
     *   @param {Array} params.media [Optional] An array of media related to the IP.
     *     @param params.media[].name The name of the media.
     *     @param params.media[].url The URL to the media.
     *     @param params.media[].mimeType The MIME type of the media.
     *   @param {Array} params.attributes [Optional] An array of key-value pairs providing additional metadata.
     *     @param params.attributes[].key The key for the attribute.
     *     @param params.attributes[].value The value for the attribute, can be a string or number.
     *   @param {Object} params.app [Optional] Information about the application associated with the IP.
     *     @param params.app.id The ID of the application.
     *     @param params.app.name The name of the application.
     *     @param params.app.website The website URL of the application.
     *   @param {Array} params.tags [Optional] An array of tags associated with the IP.
     *   @param {Object} params.robotTerms [Optional] Robot terms for the IP, specifying access rules.
     *     @param params.robotTerms.userAgent The user agent for which the rules apply.
     *     @param params.robotTerms.allow The rules allowing access.
     *   @param params.additionalProperties [Optional] Any additional key-value pairs to include in the metadata.
     * @returns An `IpMetadata` object containing the provided details and any additional properties.
     */
    generateIpMetadata(param: GenerateIpMetadataParam): IpMetadata;
    /**
     * Registers an NFT as IP, creating a corresponding IP record.
     * @param request - The request object that contains all data needed to register IP.
     *   @param request.nftContract The address of the NFT.
     *   @param request.tokenId The token identifier of the NFT.
     *   @param {Object} request.ipMetadata - [Optional] The desired metadata for the newly minted NFT and newly registered IP.
     *     @param request.ipMetadata.ipMetadataURI [Optional] The URI of the metadata for the IP.
     *     @param request.ipMetadata.ipMetadataHash [Optional] The hash of the metadata for the IP.
     *     @param request.ipMetadata.nftMetadataURI [Optional] The URI of the metadata for the NFT.
     *     @param request.ipMetadata.nftMetadataHash [Optional] The hash of the metadata for the IP NFT.
     *   @param request.deadline [Optional] The deadline for the signature in seconds, default is 1000s.
     *   @param request.txOptions [Optional] This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, and if encodedTxDataOnly is true, includes encoded transaction data, and if waitForTransaction is true, includes IP ID, token ID.
     * @emits IPRegistered (ipId, chainId, tokenContract, tokenId, resolverAddr, metadataProviderAddress, metadata)
     */
    register(request: RegisterRequest): Promise<RegisterIpResponse>;
    /**
     * Batch registers an NFT as IP, creating a corresponding IP record.
     * @param request - The request object that contains all data needed to batch register IP.
     *  @param {Array} request.args The array of objects containing the data needed to register IP.
     *   @param request.args.nftContract The address of the NFT.
     *   @param request.args.tokenId The token identifier of the NFT.
     *   @param {Object} request.args.ipMetadata - [Optional] The desired metadata for the newly minted NFT and newly registered IP.
     *    @param request.args.ipMetadata.ipMetadataURI [Optional] The URI of the metadata for the IP.
     *    @param request.args.ipMetadata.ipMetadataHash [Optional] The hash of the metadata for the IP.
     *    @param request.args.ipMetadata.nftMetadataURI [Optional] The URI of the metadata for the NFT.
     *    @param request.args.ipMetadata.nftMetadataHash [Optional] The hash of the metadata for the IP NFT.
     *   @param request.txOptions [Optional] This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property, without encodedTxDataOnly option.
     * @returns A Promise that resolves to a transaction hash, if waitForTransaction is true, return an array of containing IP ID, Token ID, NFT Contract.
     * @emits IPRegistered (ipId, chainId, tokenContract, tokenId, resolverAddr, metadataProviderAddress, metadata)
     */
    batchRegister(request: BatchRegisterRequest): Promise<BatchRegisterResponse>;
    /**
     * Registers a derivative directly with parent IP's license terms, without needing license tokens,
     * and attaches the license terms of the parent IPs to the derivative IP.
     * The license terms must be attached to the parent IP before calling this function.
     * All IPs attached default license terms by default.
     * The derivative IP owner must be the caller or an authorized operator.
     * @param request - The request object that contains all data needed to register derivative IP.
     *   @param request.childIpId The derivative IP ID.
     *   @param {Array} request.parentIpIds The parent IP IDs.
     *   @param {Array} request.licenseTermsIds The IDs of the license terms that the parent IP supports.
     *   @param request.maxMintingFee The maximum minting fee that the caller is willing to pay. if set to 0 then no limit.
     *   @param request.maxRts The maximum number of royalty tokens that can be distributed to the external royalty policies (max: 100,000,000).
     *   @param request.maxRevenueShare The maximum revenue share percentage allowed for minting the License Tokens. Must be between 0 and 100,000,000 (where 100,000,000 represents 100%).
     *   @param request.licenseTemplate [Optional] The license template address, default value is Programmable IP License.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, and if encodedTxDataOnly is true, includes encoded transaction data.
     */
    registerDerivative(request: RegisterDerivativeRequest): Promise<RegisterDerivativeResponse>;
    /**
     * Batch registers a derivative directly with parent IP's license terms.
     * @param request - The request object that contains all data needed to batch register derivative IP.
     *  @param {Array} request.args The array of objects containing the data needed to register derivative IP.
     *    @param request.args.childIpId The derivative IP ID.
     *    @param {Array} request.args.parentIpIds The parent IP IDs.
     *    @param {Array} request.args.licenseTermsIds The IDs of the license terms that the parent IP supports.
     *    @param request.args.maxMintingFee The maximum minting fee that the caller is willing to pay. if set to 0 then no limit.
     *    @param request.args.maxRts The maximum number of royalty tokens that can be distributed to the external royalty policies (max: 100,000,000).
     *    @param request.args.maxRevenueShare The maximum revenue share percentage allowed for minting the License Tokens. Must be between 0 and 100,000,000 (where 100,000,000 represents 100%).
     *  @param request.deadline [Optional] The deadline for the signature in seconds, default is 1000s.
     *  @param request.txOptions [Optional] This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property, without encodedTxDataOnly option.
     * @returns A Promise that resolves to a transaction hash.
     */
    batchRegisterDerivative(request: BatchRegisterDerivativeRequest): Promise<BatchRegisterDerivativeResponse>;
    /**
     * Registers a derivative with license tokens. The derivative IP is registered with license tokens minted from the parent IP's license terms.
     * The license terms of the parent IPs issued with license tokens are attached to the derivative IP.
     * The caller must be the derivative IP owner or an authorized operator.
     * @param request - The request object that contains all data needed to register derivative license tokens.
     *   @param request.childIpId The derivative IP ID.
     *   @param {Array} request.licenseTokenIds The IDs of the license tokens.
     *    @param request.args.maxRts The maximum number of royalty tokens that can be distributed to the external royalty policies (max: 100,000,000).
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to an object containing the transaction hash.
     */
    registerDerivativeWithLicenseTokens(request: RegisterDerivativeWithLicenseTokensRequest): Promise<RegisterDerivativeWithLicenseTokensResponse>;
    /**
     * Mint an NFT from a collection and register it as an IP.
     * @param request - The request object that contains all data needed to mint and register ip.
     *   @param request.spgNftContract The address of the NFT collection.
     *   @param request.allowDuplicates Indicates whether the license terms can be attached to the same IP ID or not.
     *   @param {Array} request.licenseTermsData The PIL terms and licensing configuration data to be attached to the IP.
     *     @param {Object} request.licenseTermsData.terms The PIL terms to be used for the licensing.
     *       @param request.licenseTermsData.terms.transferable Indicates whether the license is transferable or not.
     *       @param request.licenseTermsData.terms.royaltyPolicy The address of the royalty policy contract which required to StoryProtocol in advance.
     *       @param request.licenseTermsData.terms.mintingFee The fee to be paid when minting a license.
     *       @param request.licenseTermsData.terms.expiration The expiration period of the license.
     *       @param request.licenseTermsData.terms.commercialUse Indicates whether the work can be used commercially or not, Commercial use is required to deploy a royalty vault.
     *       @param request.licenseTermsData.terms.commercialAttribution Whether attribution is required when reproducing the work commercially or not.
     *       @param request.licenseTermsData.terms.commercializerChecker Commercializers that are allowed to commercially exploit the work. If zero address, then no restrictions is enforced.
     *       @param request.licenseTermsData.terms.commercializerCheckerData The data to be passed to the commercializer checker contract.
     *       @param request.licenseTermsData.terms.commercialRevShare Percentage of revenue that must be shared with the licensor.
     *       @param request.licenseTermsData.terms.commercialRevCeiling The maximum revenue that can be generated from the commercial use of the work.
     *       @param request.licenseTermsData.terms.derivativesAllowed Indicates whether the licensee can create derivatives of his work or not.
     *       @param request.licenseTermsData.terms.derivativesAttribution Indicates whether attribution is required for derivatives of the work or not.
     *       @param request.licenseTermsData.terms.derivativesApproval Indicates whether the licensor must approve derivatives of the work before they can be linked to the licensor IP ID or not.
     *       @param request.licenseTermsData.terms.derivativesReciprocal Indicates whether the licensee must license derivatives of the work under the same terms or not.
     *       @param request.licenseTermsData.terms.derivativeRevCeiling The maximum revenue that can be generated from the derivative use of the work.
     *       @param request.licenseTermsData.terms.currency The ERC20 token to be used to pay the minting fee. the token must be registered in story protocol.
     *       @param request.licenseTermsData.terms.uri The URI of the license terms, which can be used to fetch the offchain license terms.
     *     @param {Object} request.licenseTermsData.licensingConfig The PIL terms and licensing configuration data to attach to the IP.
     *       @param request.licenseTermsData.licensingConfig.isSet Whether the configuration is set or not.
     *       @param request.licenseTermsData.licensingConfig.mintingFee The minting fee to be paid when minting license tokens.
     *       @param request.licenseTermsData.licensingConfig.licensingHook The hook contract address for the licensing module, or address(0) if none
     *       @param request.licenseTermsData.licensingConfig.hookData The data to be used by the licensing hook.
     *       @param request.licenseTermsData.licensingConfig.commercialRevShare The commercial revenue share percentage.
     *       @param request.licenseTermsData.licensingConfig.disabled Whether the licensing is disabled or not.
     *       @param request.licenseTermsData.licensingConfig.expectMinimumGroupRewardShare The minimum percentage of the group’s reward share (from 0 to 100%, represented as 100 * 10 ** 6) that can be allocated to the IP when it is added to the group.
     *       If the remaining reward share in the group is less than the minimumGroupRewardShare,the IP cannot be added to the group.
     *       @param request.licenseTermsData.licensingConfig.expectGroupRewardPool The address of the expected group reward pool. The IP can only be added to a group with this specified reward pool address, or address(0) if the IP does not want to be added to any group.
     *   @param {Object} request.ipMetadata - [Optional] The desired metadata for the newly minted NFT and newly registered IP.
     *     @param request.ipMetadata.ipMetadataURI [Optional] The URI of the metadata for the IP.
     *     @param request.ipMetadata.ipMetadataHash [Optional] The hash of the metadata for the IP.
     *     @param request.ipMetadata.nftMetadataURI [Optional] The URI of the metadata for the NFT.
     *     @param request.ipMetadata.nftMetadataHash [Optional] The hash of the metadata for the IP NFT.
     *   @param request.recipient [Optional] The address of the recipient of the minted NFT,default value is your wallet address.
     *   @param request.txOptions [Optional] This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, and if encodedTxDataOnly is true, includes encoded transaction data, and if waitForTransaction is true, including IP ID, Token ID, License Terms Ids.
     * @emits IPRegistered (ipId, chainId, tokenContract, tokenId, name, uri, registrationDate)
     * @emits LicenseTermsAttached (caller, ipId, licenseTemplate, licenseTermsId)
     */
    mintAndRegisterIpAssetWithPilTerms(request: MintAndRegisterIpAssetWithPilTermsRequest): Promise<MintAndRegisterIpAssetWithPilTermsResponse>;
    /**
     * Batch mint an NFT from a collection and register it as an IP.
     * @param request - The request object that contains all data needed to batch mint and register ip.
     *   @param {Array} request.args The array of mint and register IP requests.
     *     @param request.args.spgNftContract The address of the NFT collection.
     *     @param request.allowDuplicates Indicates whether the license terms can be attached to the same IP ID or not.
     *     @param {Array} request.args.licenseTermsData The PIL terms and licensing configuration data to be attached to the IP.
     *       @param {Object} request.args.licenseTermsData.terms The PIL terms to be used for the licensing.
     *         @param request.args.licenseTermsData.terms.transferable Indicates whether the license is transferable or not.
     *         @param request.args.licenseTermsData.terms.royaltyPolicy The address of the royalty policy contract which required to StoryProtocol in advance.
     *         @param request.args.licenseTermsData.terms.mintingFee The fee to be paid when minting a license.
     *         @param request.args.licenseTermsData.terms.expiration The expiration period of the license.
     *         @param request.args.licenseTermsData.terms.commercialUse Indicates whether the work can be used commercially or not, Commercial use is required to deploy a royalty vault.
     *         @param request.args.licenseTermsData.terms.commercialAttribution Whether attribution is required when reproducing the work commercially or not.
     *         @param request.args.licenseTermsData.terms.commercializerChecker Commercializers that are allowed to commercially exploit the work. If zero address, then no restrictions is enforced.
     *         @param request.args.licenseTermsData.terms.commercializerCheckerData The data to be passed to the commercializer checker contract.
     *         @param request.args.licenseTermsData.terms.commercialRevShare Percentage of revenue that must be shared with the licensor.
     *         @param request.args.licenseTermsData.terms.commercialRevCeiling The maximum revenue that can be generated from the commercial use of the work.
     *         @param request.args.licenseTermsData.terms.derivativesAllowed Indicates whether the licensee can create derivatives of his work or not.
     *         @param request.args.licenseTermsData.terms.derivativesAttribution Indicates whether attribution is required for derivatives of the work or not.
     *         @param request.args.licenseTermsData.terms.derivativesApproval Indicates whether the licensor must approve derivatives of the work before they can be linked to the licensor IP ID or not.
     *         @param request.args.licenseTermsData.terms.derivativesReciprocal Indicates whether the licensee must license derivatives of the work under the same terms or not.
     *         @param request.args.licenseTermsData.terms.derivativeRevCeiling The maximum revenue that can be generated from the derivative use of the work.
     *         @param request.args.licenseTermsData.terms.currency The ERC20 token to be used to pay the minting fee. the token must be registered in story protocol.
     *         @param request.args.licenseTermsData.terms.uri The URI of the license terms, which can be used to fetch the offchain license terms.
     *       @param {Object} request.args.licenseTermsData.licensingConfig The PIL terms and licensing configuration data to attach to the IP.
     *         @param request.args.licenseTermsData.licensingConfig.isSet Whether the configuration is set or not.
     *         @param request.args.licenseTermsData.licensingConfig.mintingFee The minting fee to be paid when minting license tokens.
     *         @param request.args.licenseTermsData.licensingConfig.licensingHook The hook contract address for the licensing module, or address(0) if none
     *         @param request.args.licenseTermsData.licensingConfig.hookData The data to be used by the licensing hook.
     *         @param request.args.licenseTermsData.licensingConfig.commercialRevShare The commercial revenue share percentage.
     *         @param request.args.licenseTermsData.licensingConfig.disabled Whether the licensing is disabled or not.
     *         @param request.args.licenseTermsData.licensingConfig.expectMinimumGroupRewardShare The minimum percentage of the group’s reward share (from 0 to 100%, represented as 100 * 10 ** 6) that can be allocated to the IP when it is added to the group.
     *         If the remaining reward share in the group is less than the minimumGroupRewardShare,the IP cannot be added to the group.
     *         @param request.args.licenseTermsData.licensingConfig.expectGroupRewardPool The address of the expected group reward pool. The IP can only be added to a group with this specified reward pool address, or address(0) if the IP does not want to be added to any group.
     *     @param {Object} request.args.ipMetadata - [Optional] The desired metadata for the newly minted NFT and newly registered IP.
     *       @param request.args.ipMetadata.ipMetadataURI [Optional] The URI of the metadata for the IP.
     *       @param request.args.ipMetadata.ipMetadataHash [Optional] The hash of the metadata for the IP.
     *       @param request.args.ipMetadata.nftMetadataURI [Optional] The URI of the metadata for the NFT.
     *       @param request.args.ipMetadata.nftMetadataHash [Optional] The hash of the metadata for the IP NFT.
     *     @param request.args.recipient [Optional] The address of the recipient of the minted NFT,default value is your wallet address.
     *    @param request.txOptions [Optional] This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property, without encodedTxData option.
     * @returns A Promise that resolves to a transaction hash, if waitForTransaction is true, return an array containing IP ID, Token ID, License Terms Ids, SPG NFT Contract.
     * @emits IPRegistered (ipId, chainId, tokenContract, tokenId, name, uri, registrationDate)
     * @emits LicenseTermsAttached (caller, ipId, licenseTemplate, licenseTermsId)
     */
    batchMintAndRegisterIpAssetWithPilTerms(request: BatchMintAndRegisterIpAssetWithPilTermsRequest): Promise<BatchMintAndRegisterIpAssetWithPilTermsResponse>;
    /**
     * Register a given NFT as an IP and attach Programmable IP License Terms.R.
     * @param request - The request object that contains all data needed to mint and register ip.
     *   @param request.nftContract The address of the NFT collection.
     *   @param request.tokenId The ID of the NFT.
     *   @param {Array} request.licenseTermsData The PIL terms and licensing configuration data to be attached to the IP.
     *     @param {Object} request.licenseTermsData.terms The PIL terms to be used for the licensing.
     *       @param request.licenseTermsData.terms.transferable Indicates whether the license is transferable or not.
     *       @param request.licenseTermsData.terms.royaltyPolicy The address of the royalty policy contract which required to StoryProtocol in advance.
     *       @param request.licenseTermsData.terms.mintingFee The fee to be paid when minting a license.
     *       @param request.licenseTermsData.terms.expiration The expiration period of the license.
     *       @param request.licenseTermsData.terms.commercialUse Indicates whether the work can be used commercially or not, Commercial use is required to deploy a royalty vault.
     *       @param request.licenseTermsData.terms.commercialAttribution Whether attribution is required when reproducing the work commercially or not.
     *       @param request.licenseTermsData.terms.commercializerChecker Commercializers that are allowed to commercially exploit the work. If zero address, then no restrictions is enforced.
     *       @param request.licenseTermsData.terms.commercializerCheckerData The data to be passed to the commercializer checker contract.
     *       @param request.licenseTermsData.terms.commercialRevShare Percentage of revenue that must be shared with the licensor.
     *       @param request.licenseTermsData.terms.commercialRevCeiling The maximum revenue that can be generated from the commercial use of the work.
     *       @param request.licenseTermsData.terms.derivativesAllowed Indicates whether the licensee can create derivatives of his work or not.
     *       @param request.licenseTermsData.terms.derivativesAttribution Indicates whether attribution is required for derivatives of the work or not.
     *       @param request.licenseTermsData.terms.derivativesApproval Indicates whether the licensor must approve derivatives of the work before they can be linked to the licensor IP ID or not.
     *       @param request.licenseTermsData.terms.derivativesReciprocal Indicates whether the licensee must license derivatives of the work under the same terms or not.
     *       @param request.licenseTermsData.terms.derivativeRevCeiling The maximum revenue that can be generated from the derivative use of the work.
     *       @param request.licenseTermsData.terms.currency The ERC20 token to be used to pay the minting fee. the token must be registered in story protocol.
     *       @param request.licenseTermsData.terms.uri The URI of the license terms, which can be used to fetch the offchain license terms.
     *     @param {Object} request.licenseTermsData.licensingConfig The PIL terms and licensing configuration data to attach to the IP.
     *       @param request.licenseTermsData.licensingConfig.isSet Whether the configuration is set or not.
     *       @param request.licenseTermsData.licensingConfig.mintingFee The minting fee to be paid when minting license tokens.
     *       @param request.licenseTermsData.licensingConfig.licensingHook The hook contract address for the licensing module, or address(0) if none
     *       @param request.licenseTermsData.licensingConfig.hookData The data to be used by the licensing hook.
     *       @param request.licenseTermsData.licensingConfig.commercialRevShare The commercial revenue share percentage.
     *       @param request.licenseTermsData.licensingConfig.disabled Whether the licensing is disabled or not.
     *       @param request.licenseTermsData.licensingConfig.expectMinimumGroupRewardShare The minimum percentage of the group’s reward share (from 0 to 100%, represented as 100 * 10 ** 6) that can be allocated to the IP when it is added to the group.
     *       If the remaining reward share in the group is less than the minimumGroupRewardShare,the IP cannot be added to the group.
     *       @param request.licenseTermsData.licensingConfig.expectGroupRewardPool The address of the expected group reward pool. The IP can only be added to a group with this specified reward pool address, or address(0) if the IP does not want to be added to any group.
     *   @param {Object} request.ipMetadata - [Optional] The desired metadata for the newly minted NFT and newly registered IP.
     *     @param request.ipMetadata.ipMetadataURI [Optional] The URI of the metadata for the IP.
     *     @param request.ipMetadata.ipMetadataHash [Optional] The hash of the metadata for the IP.
     *     @param request.ipMetadata.nftMetadataURI [Optional] The URI of the metadata for the NFT.
     *     @param request.ipMetadata.nftMetadataHash [Optional] The hash of the metadata for the IP NFT.
     *   @param request.deadline [Optional] The deadline for the signature in seconds, default is 1000s.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, if waitForTransaction is true, including IP ID, token ID and License terms IDs.
     * @emits LicenseTermsAttached (caller, ipId, licenseTemplate, licenseTermsId)
     */
    registerIpAndAttachPilTerms(request: RegisterIpAndAttachPilTermsRequest): Promise<RegisterIpAndAttachPilTermsResponse>;
    /**
     * Register the given NFT as a derivative IP with metadata without using license tokens.
     * @param request - The request object that contains all data needed to register derivative IP.
     *   @param request.nftContract The address of the NFT collection.
     *   @param request.tokenId The ID of the NFT.
     *   @param {Object} request.derivData The derivative data to be used for registerDerivative.
     *     @param {Array} request.derivData.parentIpIds The IDs of the parent IPs to link the registered derivative IP.
     *     @param {Array} request.derivData.licenseTermsIds The IDs of the license terms to be used for the linking.
     *     @param request.derivData.licenseTemplate [Optional] The address of the license template to be used for the linking, default value is Programmable IP License.
     *   @param {Object} request.ipMetadata - [Optional] The desired metadata for the newly minted NFT and newly registered IP.
     *     @param request.ipMetadata.ipMetadataURI [Optional] The URI of the metadata for the IP.
     *     @param request.ipMetadata.ipMetadataHash [Optional] The hash of the metadata for the IP.
     *     @param request.ipMetadata.nftMetadataURI [Optional] The URI of the metadata for the NFT.
     *     @param request.ipMetadata.nftMetadataHash [Optional] The hash of the metadata for the IP NFT.
     *   @param request.deadline [Optional] The deadline for the signature in seconds, default is 1000s.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, and if encodedTxDataOnly is true, includes encoded transaction data, and if waitForTransaction is true, included IP ID, Token ID.
     * @emits IPRegistered (ipId, chainId, tokenContract, tokenId, name, uri, registrationDate)
     */
    registerDerivativeIp(request: RegisterIpAndMakeDerivativeRequest): Promise<RegisterIpAndMakeDerivativeResponse>;
    /**
     * Mint an NFT from a collection and register it as a derivative IP without license tokens.
     * @param request - The request object that contains all data needed to mint and register ip and make derivative.
     *   @param request.spgNftContract The address of the NFT collection.
     *   @param request.allowDuplicates Set to true to allow minting an NFT with a duplicate metadata hash.
     *   @param {Object} request.derivData The derivative data to be used for registerDerivative.
     *     @param {Array} request.derivData.parentIpIds The IDs of the parent IPs to link the registered derivative IP.
     *     @param {Array} request.derivData.licenseTermsIds The IDs of the license terms to be used for the linking.
     *     @param request.derivData.licenseTemplate [Optional] The address of the license template to be used for the linking, default value is Programmable IP License.
     *     @param request.derivData.royaltyContext The address of the royalty context to be used for the linking, default value is zero address.
     *     @param request.derivData.maxMintingFee The maximum minting fee that the caller is willing to pay. if set to 0 then no limit.
     *     @param request.derivData.maxRts The maximum number of royalty tokens that can be distributed to the external royalty policies (max: 100,000,000).
     *     @param request.derivData.maxRevenueShare The maximum revenue share percentage allowed for minting the License Tokens. Must be between 0 and 100,000,000 (where 100,000,000 represents 100%).
     *   @param {Object} request.ipMetadata - [Optional] The desired metadata for the newly minted NFT and newly registered IP.
     *     @param request.ipMetadata.ipMetadataURI [Optional] The URI of the metadata for the IP.
     *     @param request.ipMetadata.ipMetadataHash [Optional] The hash of the metadata for the IP.
     *     @param request.ipMetadata.nftMetadataURI [Optional] The URI of the metadata for the NFT.
     *     @param request.ipMetadata.nftMetadataHash [Optional] The hash of the metadata for the IP NFT.
     *   @param request.recipient [Optional] The address of the recipient of the minted NFT,default value is your wallet address.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, and if encodedTxDataOnly is true, includes encoded transaction data, and if waitForTransaction is true, includes child IP ID and token ID.
     * @emits IPRegistered (ipId, chainId, tokenContract, tokenId, name, uri, registrationDate)
     */
    mintAndRegisterIpAndMakeDerivative(request: MintAndRegisterIpAndMakeDerivativeRequest): Promise<MintAndRegisterIpAndMakeDerivativeResponse>;
    /**
     * Batch mint an NFT from a collection and register it as a derivative IP without license tokens.
     * @param request - The request object that contains all data needed to batch mint and register ip and make derivative.
     *  @param {Array} request.args The array of mint and register IP requests.
     *   @param request.args.spgNftContract The address of the NFT collection.
     *   @param {Object} request.args.derivData The derivative data to be used for registerDerivative.
     *     @param {Array} request.args.derivData.parentIpIds The IDs of the parent IPs to link the registered derivative IP.
     *     @param {Array} request.args.derivData.licenseTermsIds The IDs of the license terms to be used for the linking.
     *     @param request.args.derivData.licenseTemplate [Optional] The address of the license template to be used for the linking.
     *   @param {Object} request.args.ipMetadata - [Optional] The desired metadata for the newly minted NFT and newly registered IP.
     *     @param request.args.ipMetadata.ipMetadataURI [Optional] The URI of the metadata for the IP.
     *     @param request.args.ipMetadata.ipMetadataHash [Optional] The hash of the metadata for the IP.
     *     @param request.args.ipMetadata.nftMetadataURI [Optional] The URI of the metadata for the NFT.
     *     @param request.args.ipMetadata.nftMetadataHash [Optional] The hash of the metadata for the IP NFT.
     *   @param request.arg.recipient [Optional] The address of the recipient of the minted NFT,default value is your wallet address.
     *  @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property, without encodedTxData option.
     * @returns A Promise that resolves to a transaction hash, if waitForTransaction is true, return an array of containing IP ID and token ID, SPG NFT Contract.
     * @emits IPRegistered (ipId, chainId, tokenContract, tokenId, name, uri, registrationDate)
     */
    batchMintAndRegisterIpAndMakeDerivative(request: BatchMintAndRegisterIpAndMakeDerivativeRequest): Promise<BatchMintAndRegisterIpAndMakeDerivativeResponse>;
    /**
     * Mint an NFT from a SPGNFT collection and register it with metadata as an IP.
     * @param request - The request object that contains all data needed to attach license terms.
     *   @param request.spgNftContract The address of the SPGNFT collection.
     *   @param request.recipient The address of the recipient of the minted NFT,default value is your wallet address.
     *  @param request.allowDuplicates Set to true to allow minting an NFT with a duplicate metadata hash.
     *   @param {Object} request.ipMetadata - [Optional] The desired metadata for the newly minted NFT and newly registered IP.
     *     @param request.ipMetadata.ipMetadataURI [Optional] The URI of the metadata for the IP.
     *     @param request.ipMetadata.ipMetadataHash [Optional] The hash of the metadata for the IP.
     *     @param request.ipMetadata.nftMetadataURI [Optional] The URI of the metadata for the NFT.
     *     @param request.ipMetadata.nftMetadataHash [Optional] The hash of the metadata for the IP NFT.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, and if encodedTxDataOnly is true, includes encoded transaction data, or if waitForTransaction is true, includes IP ID and Token ID.
     * @emits IPRegistered (ipId, chainId, tokenContract, tokenId, name, uri, registrationDate)
     */
    mintAndRegisterIp(request: MintAndRegisterIpRequest): Promise<RegisterIpResponse>;
    /**
     * Register Programmable IP License Terms (if unregistered) and attach it to IP.
     * @param request - The request object that contains all data needed to attach license terms.
     *   @param request.ipId The ID of the IP.
     *   @param {Array} request.licenseTermsData The PIL terms and licensing configuration data to be attached to the IP.
     *     @param {Object} request.licenseTermsData.terms The PIL terms to be used for the licensing.
     *       @param request.licenseTermsData.terms.transferable Indicates whether the license is transferable or not.
     *       @param request.licenseTermsData.terms.royaltyPolicy The address of the royalty policy contract which required to StoryProtocol in advance.
     *       @param request.licenseTermsData.terms.mintingFee The fee to be paid when minting a license.
     *       @param request.licenseTermsData.terms.expiration The expiration period of the license.
     *       @param request.licenseTermsData.terms.commercialUse Indicates whether the work can be used commercially or not, Commercial use is required to deploy a royalty vault.
     *       @param request.licenseTermsData.terms.commercialAttribution Whether attribution is required when reproducing the work commercially or not.
     *       @param request.licenseTermsData.terms.commercializerChecker Commercializers that are allowed to commercially exploit the work. If zero address, then no restrictions is enforced.
     *       @param request.licenseTermsData.terms.commercializerCheckerData The data to be passed to the commercializer checker contract.
     *       @param request.licenseTermsData.terms.commercialRevShare Percentage of revenue that must be shared with the licensor.
     *       @param request.licenseTermsData.terms.commercialRevCeiling The maximum revenue that can be generated from the commercial use of the work.
     *       @param request.licenseTermsData.terms.derivativesAllowed Indicates whether the licensee can create derivatives of his work or not.
     *       @param request.licenseTermsData.terms.derivativesAttribution Indicates whether attribution is required for derivatives of the work or not.
     *       @param request.licenseTermsData.terms.derivativesApproval Indicates whether the licensor must approve derivatives of the work before they can be linked to the licensor IP ID or not.
     *       @param request.licenseTermsData.terms.derivativesReciprocal Indicates whether the licensee must license derivatives of the work under the same terms or not.
     *       @param request.licenseTermsData.terms.derivativeRevCeiling The maximum revenue that can be generated from the derivative use of the work.
     *       @param request.licenseTermsData.terms.currency The ERC20 token to be used to pay the minting fee. the token must be registered in story protocol.
     *       @param request.licenseTermsData.terms.uri The URI of the license terms, which can be used to fetch the offchain license terms.
     *     @param {Object} request.licenseTermsData.licensingConfig The PIL terms and licensing configuration data to attach to the IP.
     *       @param request.licenseTermsData.licensingConfig.isSet Whether the configuration is set or not.
     *       @param request.licenseTermsData.licensingConfig.mintingFee The minting fee to be paid when minting license tokens.
     *       @param request.licenseTermsData.licensingConfig.licensingHook The hook contract address for the licensing module, or address(0) if none
     *       @param request.licenseTermsData.licensingConfig.hookData The data to be used by the licensing hook.
     *       @param request.licenseTermsData.licensingConfig.commercialRevShare The commercial revenue share percentage.
     *       @param request.licenseTermsData.licensingConfig.disabled Whether the licensing is disabled or not.
     *       @param request.licenseTermsData.licensingConfig.expectMinimumGroupRewardShare The minimum percentage of the group’s reward share (from 0 to 100%, represented as 100 * 10 ** 6) that can be allocated to the IP when it is added to the group.
     *       If the remaining reward share in the group is less than the minimumGroupRewardShare,the IP cannot be added to the group.
     *       @param request.licenseTermsData.licensingConfig.expectGroupRewardPool The address of the expected group reward pool. The IP can only be added to a group with this specified reward pool address, or address(0) if the IP does not want to be added to any group.
     *   @param request.deadline [Optional] The deadline for the signature in milliseconds, default is 1000s.
     *   @param request.txOptions [Optional] This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, and if encodedTxDataOnly is true, includes encoded transaction data, and if waitForTransaction is true, returns an array containing the license terms ID.
     * @emits LicenseTermsAttached (caller, ipId, licenseTemplate, licenseTermsId)
     */
    registerPilTermsAndAttach(request: RegisterPilTermsAndAttachRequest): Promise<RegisterPilTermsAndAttachResponse>;
    /**
     *  Mint an NFT from a collection and register it as a derivative IP using license tokens
     * Requires caller to have the minter role or the SPG NFT to allow public minting. Caller must own the license tokens and have approved DerivativeWorkflows to transfer them.
     * @param request - The request object that contains all data needed to mint and register ip and make derivative with license tokens.
     *   @param request.spgNftContract The address of the NFT collection.
     *   @param {Array} request.licenseTokenIds The IDs of the license tokens to be burned for linking the IP to parent IPs.
     *   @param request.allowDuplicates Set to true to allow minting an NFT with a duplicate metadata hash.
     *   @param request.maxRts The maximum number of royalty tokens that can be distributed to the external royalty policies (max: 100,000,000).
     *   @param {Object} request.ipMetadata - [Optional] The desired metadata for the newly minted NFT and newly registered IP.
     *     @param request.ipMetadata.ipMetadataURI [Optional] The URI of the metadata for the IP.
     *     @param request.ipMetadata.ipMetadataHash [Optional] The hash of the metadata for the IP.
     *     @param request.ipMetadata.nftMetadataURI [Optional] The URI of the metadata for the NFT.
     *     @param request.ipMetadata.nftMetadataHash [Optional] The hash of the metadata for the IP NFT.
     *   @param request.recipient - [Optional] The address to receive the minted NFT,default value is your wallet address.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, and if encodedTxDataOnly is true, includes encoded transaction data, or if waitForTransaction is true, includes IP ID and Token ID.
     * @emits IPRegistered (ipId, chainId, tokenContract, tokenId, name, uri, registrationDate)
     */
    mintAndRegisterIpAndMakeDerivativeWithLicenseTokens(request: MintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest): Promise<RegisterIpResponse>;
    /**
     * Register the given NFT as a derivative IP using license tokens.
     * @param request - The request object that contains all data needed to register ip and make derivative with license tokens.
     *   @param request.nftContract The address of the NFT collection.
     *   @param {Array} request.licenseTokenIds The IDs of the license tokens to be burned for linking the IP to parent IPs.
     *   @param request.tokenId The ID of the NFT.
     *   @param {Object} request.ipMetadata - [Optional] The desired metadata for the newly minted NFT and newly registered IP.
     *     @param request.ipMetadata.ipMetadataURI [Optional] The URI of the metadata for the IP.
     *     @param request.ipMetadata.ipMetadataHash [Optional] The hash of the metadata for the IP.
     *     @param request.ipMetadata.nftMetadataURI [Optional] The URI of the metadata for the NFT.
     *     @param request.ipMetadata.nftMetadataHash [Optional] The hash of the metadata for the IP NFT.
     *   @param request.deadline [Optional] The deadline for the signature in seconds, default is 1000s.
     *   @param request.txOptions [Optional] This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, and if encodedTxDataOnly is true, includes encoded transaction data, or if waitForTransaction is true, includes IP ID, Token ID.
     */
    registerIpAndMakeDerivativeWithLicenseTokens(request: RegisterIpAndMakeDerivativeWithLicenseTokensRequest): Promise<RegisterIpResponse>;
    /**
     * Register the given NFT and attach license terms and distribute royalty tokens. In order to successfully distribute royalty tokens, the first license terms attached to the IP must be
     * a commercial license.
     * @param request - The request object that contains all data needed to register ip and attach license terms and distribute royalty tokens.
     *   @param request.nftContract The address of the NFT collection.
     *   @param request.tokenId The ID of the NFT.
     *   @param {Array} request.licenseTermsData The PIL terms and licensing configuration data to be attached to the IP.
     *     @param {Object} request.licenseTermsData.terms The PIL terms to be used for the licensing.
     *       @param request.licenseTermsData.terms.transferable Indicates whether the license is transferable or not.
     *       @param request.licenseTermsData.terms.royaltyPolicy The address of the royalty policy contract which required to StoryProtocol in advance.
     *       @param request.licenseTermsData.terms.mintingFee The fee to be paid when minting a license.
     *       @param request.licenseTermsData.terms.expiration The expiration period of the license.
     *       @param request.licenseTermsData.terms.commercialUse Indicates whether the work can be used commercially or not, Commercial use is required to deploy a royalty vault.
     *       @param request.licenseTermsData.terms.commercialAttribution Whether attribution is required when reproducing the work commercially or not.
     *       @param request.licenseTermsData.terms.commercializerChecker Commercializers that are allowed to commercially exploit the work. If zero address, then no restrictions is enforced.
     *       @param request.licenseTermsData.terms.commercializerCheckerData The data to be passed to the commercializer checker contract.
     *       @param request.licenseTermsData.terms.commercialRevShare Percentage of revenue that must be shared with the licensor.
     *       @param request.licenseTermsData.terms.commercialRevCeiling The maximum revenue that can be generated from the commercial use of the work.
     *       @param request.licenseTermsData.terms.derivativesAllowed Indicates whether the licensee can create derivatives of his work or not.
     *       @param request.licenseTermsData.terms.derivativesAttribution Indicates whether attribution is required for derivatives of the work or not.
     *       @param request.licenseTermsData.terms.derivativesApproval Indicates whether the licensor must approve derivatives of the work before they can be linked to the licensor IP ID or not.
     *       @param request.licenseTermsData.terms.derivativesReciprocal Indicates whether the licensee must license derivatives of the work under the same terms or not.
     *       @param request.licenseTermsData.terms.derivativeRevCeiling The maximum revenue that can be generated from the derivative use of the work.
     *       @param request.licenseTermsData.terms.currency The ERC20 token to be used to pay the minting fee. the token must be registered in story protocol.
     *       @param request.licenseTermsData.terms.uri The URI of the license terms, which can be used to fetch the offchain license terms.
     *     @param {Object} request.licenseTermsData.licensingConfig The PIL terms and licensing configuration data to attach to the IP.
     *       @param request.licenseTermsData.licensingConfig.isSet Whether the configuration is set or not.
     *       @param request.licenseTermsData.licensingConfig.mintingFee The minting fee to be paid when minting license tokens.
     *       @param request.licenseTermsData.licensingConfig.licensingHook The hook contract address for the licensing module, or address(0) if none
     *       @param request.licenseTermsData.licensingConfig.hookData The data to be used by the licensing hook.
     *       @param request.licenseTermsData.licensingConfig.commercialRevShare The commercial revenue share percentage.
     *       @param request.licenseTermsData.licensingConfig.disabled Whether the licensing is disabled or not.
     *       @param request.licenseTermsData.licensingConfig.expectMinimumGroupRewardShare The minimum percentage of the group’s reward share (from 0 to 100%, represented as 100 * 10 ** 6) that can be allocated to the IP when it is added to the group.
     *       If the remaining reward share in the group is less than the minimumGroupRewardShare,the IP cannot be added to the group.
     *       @param request.licenseTermsData.licensingConfig.expectGroupRewardPool The address of the expected group reward pool. The IP can only be added to a group with this specified reward pool address, or address(0) if the IP does not want to be added to any group.
     *   @param {Object} request.ipMetadata - [Optional] The desired metadata for the newly minted NFT and newly registered IP.
     *     @param request.ipMetadata.ipMetadataURI [Optional] The URI of the metadata for the IP.
     *     @param request.ipMetadata.ipMetadataHash [Optional] The hash of the metadata for the IP.
     *     @param request.ipMetadata.nftMetadataURI [Optional] The URI of the metadata for the NFT.
     *     @param request.ipMetadata.nftMetadataHash [Optional] The hash of the metadata for the IP NFT.
     *  @param {Array} request.royaltyShares Authors of the IP and their shares of the royalty tokens.
     *    @param request.royaltyShares.recipient The address of the recipient.
     *    @param request.royaltyShares.percentage The percentage of the royalty share, 10 represents 10%.
     *  @param request.deadline [Optional] The deadline for the signature in seconds, default is 1000s.
     *  @param request.txOptions [Optional] This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property, without encodedTxData option.
     * @returns A Promise that resolves to a transaction hashes, IP ID, IP royalty vault and an array containing the license terms ID.
     * @emits IPRegistered (ipId, chainId, tokenContract, tokenId, name, uri, registrationDate)
     * @emits IpRoyaltyVaultDeployed (ipId, ipRoyaltyVault)
     */
    registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens(request: RegisterIPAndAttachLicenseTermsAndDistributeRoyaltyTokensRequest): Promise<RegisterIPAndAttachLicenseTermsAndDistributeRoyaltyTokensResponse>;
    /**
     * Register the given NFT as a derivative IP and attach license terms and distribute royalty tokens.  In order to successfully distribute royalty tokens, the license terms attached to the IP must be
     * a commercial license.
     * @param request - The request object that contains all data needed to register derivative IP and distribute royalty tokens.
     *   @param request.nftContract The address of the NFT collection.
     *   @param request.tokenId The ID of the NFT.
     *   @param {Object} request.derivData The derivative data to be used for registerDerivative.
     *     @param {Array} request.derivData.parentIpIds The IDs of the parent IPs to link the registered derivative IP.
     *     @param request.derivData.licenseTemplate [Optional] The address of the license template to be used for the linking, default value is Programmable IP License.
     *     @param {Array} request.derivData.licenseTermsIds The IDs of the license terms to be used for the linking.
     *     @param request.derivData.maxMintingFee The maximum minting fee that the caller is willing to pay. if set to 0 then no limit.
     *     @param request.derivData.maxRts The maximum number of royalty tokens that can be distributed to the external royalty policies (max: 100,000,000).
     *     @param request.derivData.maxRevenueShare The maximum revenue share percentage allowed for minting the License Tokens. Must be between 0 and 100,000,000 (where 100,000,000 represents 100%).
     *   @param {Object} request.ipMetadata - [Optional] The desired metadata for the newly minted NFT and newly registered IP.
     *     @param request.ipMetadata.ipMetadataURI [Optional] The URI of the metadata for the IP.
     *     @param request.ipMetadata.ipMetadataHash [Optional] The hash of the metadata for the IP.
     *     @param request.ipMetadata.nftMetadataURI [Optional] The URI of the metadata for the NFT.
     *     @param request.ipMetadata.nftMetadataHash [Optional] The hash of the metadata for the IP NFT.
     *   @param {Array} request.royaltyShares Authors of the IP and their shares of the royalty tokens.
     *      @param request.royaltyShares.recipient The address of the recipient.
     *     @param request.royaltyShares.percentage The percentage of the royalty share, 10 represents 10%.
     *   @param request.deadline [Optional] The deadline for the signature in seconds, default is 1000s.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property, without encodedTxData option.
     * @returns A Promise that resolves to a transaction hashes, IP ID and IP royalty vault, token ID.
     * @emits IPRegistered (ipId, chainId, tokenContract, tokenId, name, uri, registrationDate)
     * @emits IpRoyaltyVaultDeployed (ipId, ipRoyaltyVault)
     */
    registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens(request: RegisterDerivativeAndAttachLicenseTermsAndDistributeRoyaltyTokensRequest): Promise<RegisterDerivativeAndAttachLicenseTermsAndDistributeRoyaltyTokensResponse>;
    /**
     * Mint an NFT and register the IP, attach PIL terms, and distribute royalty tokens.
     * @param request - The request object that contains all data needed to mint an NFT and register the IP, attach PIL terms, and distribute royalty tokens.
     *   @param request.spgNftContract The address of the SPG NFT contract.
     *   @param request.allowDuplicates Set to true to allow minting an NFT with a duplicate metadata hash.
     *   @param {Array} request.licenseTermsData The PIL terms and licensing configuration data to attach to the IP.
     *     @param {Object} request.licenseTermsData.terms The PIL terms to be attached.
     *       @param request.licenseTermsData.terms.transferable Indicates whether the license is transferable or not.
     *       @param request.licenseTermsData.terms.royaltyPolicy The address of the royalty policy contract which required to StoryProtocol in advance.
     *       @param request.licenseTermsData.terms.mintingFee The fee to be paid when minting a license.
     *       @param request.licenseTermsData.terms.expiration The expiration period of the license.
     *       @param request.licenseTermsData.terms.commercialUse Indicates whether the work can be used commercially or not, Commercial use is required to deploy a royalty vault.
     *       @param request.licenseTermsData.terms.commercialAttribution Whether attribution is required when reproducing the work commercially or not.
     *       @param request.licenseTermsData.terms.commercializerChecker Commercializers that are allowed to commercially exploit the work. If zero address, then no restrictions is enforced.
     *       @param request.licenseTermsData.terms.commercializerCheckerData The data to be passed to the commercializer checker contract.
     *       @param request.licenseTermsData.terms.commercialRevShare Percentage of revenue that must be shared with the licensor.
     *       @param request.licenseTermsData.terms.commercialRevCeiling The maximum revenue that can be generated from the commercial use of the work.
     *       @param request.licenseTermsData.terms.derivativesAllowed Indicates whether the licensee can create derivatives of his work or not.
     *       @param request.licenseTermsData.terms.derivativesAttribution Indicates whether attribution is required for derivatives of the work or not.
     *       @param request.licenseTermsData.terms.derivativesApproval Indicates whether the licensor must approve derivatives of the work before they can be linked to the licensor IP ID or not.
     *       @param request.licenseTermsData.terms.derivativesReciprocal Indicates whether the licensee must license derivatives of the work under the same terms or not.
     *       @param request.licenseTermsData.terms.derivativeRevCeiling The maximum revenue that can be generated from the derivative use of the work.
     *       @param request.licenseTermsData.terms.currency The ERC20 token to be used to pay the minting fee. the token must be registered in story protocol.
     *       @param request.licenseTermsData.terms.uri The URI of the license terms, which can be used to fetch the offchain license terms.
     *     @param {Object} request.licenseTermsData.licensingConfig The PIL terms and licensing configuration data to attach to the IP.
     *       @param request.licenseTermsData.licensingConfig.isSet Whether the configuration is set or not.
     *       @param request.licenseTermsData.licensingConfig.mintingFee The minting fee to be paid when minting license tokens.
     *       @param request.licenseTermsData.licensingConfig.licensingHook The hook contract address for the licensing module, or address(0) if none
     *       @param request.licenseTermsData.licensingConfig.hookData The data to be used by the licensing hook.
     *       @param request.licenseTermsData.licensingConfig.commercialRevShare The commercial revenue share percentage.
     *       @param request.licenseTermsData.licensingConfig.disabled Whether the licensing is disabled or not.
     *       @param request.licenseTermsData.licensingConfig.expectMinimumGroupRewardShare The minimum percentage of the group’s reward share (from 0 to 100%, represented as 100 * 10 ** 6) that can be allocated to the IP when it is added to the group.
     *       If the remaining reward share in the group is less than the minimumGroupRewardShare,the IP cannot be added to the group.
     *       @param request.licenseTermsData.licensingConfig.expectGroupRewardPool The address of the expected group reward pool. The IP can only be added to a group with this specified reward pool address, or address(0) if the IP does not want to be added to any group.
     *   @param {Object} request.ipMetadata - [Optional] The desired metadata for the newly minted NFT and newly registered IP.
     *     @param request.ipMetadata.ipMetadataURI [Optional] The URI of the metadata for the IP.
     *     @param request.ipMetadata.ipMetadataHash [Optional] The hash of the metadata for the IP.
     *     @param request.ipMetadata.nftMetadataURI [Optional] The URI of the metadata for the NFT.
     *     @param request.ipMetadata.nftMetadataHash [Optional] The hash of the metadata for the IP NFT.
     *  @param {Array} request.royaltyShares Authors of the IP and their shares of the royalty tokens.
     *    @param request.royaltyShares.recipient The address of the recipient.
     *    @param request.royaltyShares.percentage The percentage of the royalty share, 10 represents 10%.
     *   @param request.recipient - [Optional] The address to receive the minted NFT,default value is your wallet address.
     *  @param request.txOptions [Optional] This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property, without encodedTxData option.
     * @returns A Promise that resolves to a transaction hash, IP ID, IP royalty vault, Token ID, and an array containing the license terms ID.
     * @emits IPRegistered (ipId, chainId, tokenContract, tokenId, name, uri, registrationDate)
     * @emits IpRoyaltyVaultDeployed (ipId, ipRoyaltyVault)
     */
    mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens(request: MintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokensRequest): Promise<MintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokensResponse>;
    /**
     * Mint an NFT and register the IP, make a derivative, and distribute royalty tokens.
     * @param request - The request object that contains all data needed to mint an NFT and register the IP, make a derivative, and distribute royalty tokens.
     *   @param request.spgNftContract The address of the SPG NFT collection.
     *   @param request.derivData The derivative data to be used for registerDerivative.
     *     @param  {Array} request.derivData.parentIpIds The IDs of the parent IPs to link the registered derivative IP.
     *     @param request.derivData.licenseTemplate [Optional] The address of the license template to be used for the linking, default value is Programmable IP License.
     *     @param {Array} request.derivData.licenseTermsIds The IDs of the license terms to be used for the linking.
     *     @param request.derivData.maxMintingFee The maximum minting fee that the caller is willing to pay. if set to 0 then no limit.
     *     @param request.derivData.maxRts The maximum number of royalty tokens that can be distributed to the external royalty policies (max: 100,000,000).
     *     @param request.derivData.maxRevenueShare The maximum revenue share percentage allowed for minting the License Tokens. Must be between 0 and 100,000,000 (where 100,000,000 represents 100%).
     *   @param {Object} request.ipMetadata - [Optional] The desired metadata for the newly minted NFT and newly registered IP.
     *     @param request.ipMetadata.ipMetadataURI [Optional] The URI of the metadata for the IP.
     *     @param request.ipMetadata.ipMetadataHash [Optional] The hash of the metadata for the IP.
     *     @param request.ipMetadata.nftMetadataURI [Optional] The URI of the metadata for the NFT.
     *     @param request.ipMetadata.nftMetadataHash [Optional] The hash of the metadata for the IP NFT.
     *   @param {Array} request.royaltyShares Authors of the IP and their shares of the royalty tokens.
     *     @param request.royaltyShares.recipient The address of the recipient.
     *     @param request.royaltyShares.percentage The percentage of the royalty share, 10 represents 10%.
     *  @param request.allowDuplicates Set to true to allow minting an NFT with a duplicate metadata hash.
     *  @param request.recipient - [Optional] The address to receive the minted NFT,default value is your wallet address.
     *  @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property, without encodedTxData option..
     * @returns A Promise that resolves to a transaction hash, IP ID and token ID.
     * @emits IPRegistered (ipId, chainId, tokenContract, tokenId, name, uri, registrationDate)
     */
    mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens(request: MintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest): Promise<MintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensResponse>;
    private getRoyaltyShares;
    private distributeRoyaltyTokens;
    private getIpIdAddress;
    isRegistered(ipId: Hex): Promise<boolean>;
    private getLicenseTermsId;
    private validateLicenseTokenIds;
    private getIpIdAndTokenIdsFromEvent;
    private getCalculatedDeadline;
    private validateMaxRts;
    private validateDerivativeData;
    private validateLicenseTermsData;
    private commonRegistrationHandler;
}
//# sourceMappingURL=ipAsset.d.ts.map