import { PublicClient } from "viem";
import { RegistrationWorkflowsClient, SimpleWalletClient } from "../abi/generated.js";
import { CreateNFTCollectionRequest, CreateNFTCollectionResponse } from "../types/resources/nftClient.js";
export declare class NftClient {
    registrationWorkflowsClient: RegistrationWorkflowsClient;
    private readonly rpcClient;
    private readonly wallet;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient);
    /**
     * Creates a new SPG NFT Collection.
     * @param request - The request object containing necessary data to create a SPG NFT Collection.
     *   @param request.name - The name of the collection.
     * 	 @param request.symbol - The symbol of the collection.
     * 	 @param request.isPublicMinting - If true, anyone can mint from the collection. If false, only the addresses with the minter role can mint.
     * 	 @param request.mintOpen Whether the collection is open for minting on creation.
     *   @param request.mintFeeRecipient - The address to receive mint fees.
     *   @param request.contractURI - The contract URI for the collection. Follows ERC-7572 standard. See https://eips.ethereum.org/EIPS/eip-7572
     * 	 @param request.baseURI - [Optional] The base URI for the collection. If baseURI is not empty, tokenURI will be either baseURI + token ID (if nftMetadataURI is empty) or baseURI + nftMetadataURI.
     * 	 @param request.maxSupply - [Optional] The maximum supply of the collection.
     * 	 @param request.mintFee - [Optional] The cost to mint a token.
     * 	 @param request.mintFeeToken - [Optional] The token to mint.
     * 	 @param request.owner - [Optional] The owner of the collection.
     *   @param request.txOptions [Optional] This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a transaction hash, and if encodedTxDataOnly is true, includes encoded transaction data, and if waitForTransaction is true, includes spg nft contract address.
     * @emits CollectionCreated (spgNftContract);
     */
    createNFTCollection(request: CreateNFTCollectionRequest): Promise<CreateNFTCollectionResponse>;
}
//# sourceMappingURL=nftClient.d.ts.map