import { PublicClient } from "viem";
import { CancelDisputeRequest, CancelDisputeResponse, RaiseDisputeRequest, RaiseDisputeResponse, ResolveDisputeRequest, ResolveDisputeResponse } from "../types/resources/dispute.js";
import { ArbitrationPolicyUmaReadOnlyClient, DisputeModuleClient, SimpleWalletClient } from "../abi/generated.js";
import { ChainIds } from "../types/config.js";
export declare class DisputeClient {
    disputeModuleClient: DisputeModuleClient;
    arbitrationPolicyUmaReadOnlyClient: ArbitrationPolicyUmaReadOnlyClient;
    private readonly rpcClient;
    private readonly chainId;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, chainId: ChainIds);
    /**
     * Raises a dispute on a given ipId
     * @param request - The request object containing necessary data to raise a dispute.
     *   @param request.targetIpId The IP ID that is the target of the dispute.
     *   @param request.targetTag The target tag of the dispute.
     *   @param request.cid CID (Content Identifier) is a unique identifier in IPFS, including CID v0 (base58) and CID v1 (base32).
     *   @param request.liveness The liveness time.
     *   @param request.bond The bond size.
     *   @param request.txOptions [Optional] This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a RaiseDisputeResponse containing the transaction hash.
     * @throws `NotRegisteredIpId` if targetIpId is not registered in the IPA Registry.
     * @throws `NotWhitelistedDisputeTag` if targetTag is not whitelisted.
     * @throws `ZeroLinkToDisputeEvidence` if linkToDisputeEvidence is empty
     * @calls raiseDispute(address _targetIpId, string memory _linkToDisputeEvidence, bytes32 _targetTag, bytes calldata _data) external nonReentrant returns (uint256) {
     * @emits DisputeRaised (disputeId_, targetIpId, msg.sender, arbitrationPolicy, linkToDisputeEvidence, targetTag, calldata);
     */
    raiseDispute(request: RaiseDisputeRequest): Promise<RaiseDisputeResponse>;
    /**
     * Cancels an ongoing dispute
     * @param request - The request object containing details to cancel the dispute.
     *   @param request.disputeId The ID of the dispute to be cancelled.
     *   @param request.data [Optional] additional data used in the cancellation process.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a CancelDisputeResponse containing the transaction hash.
     * @throws NotInDisputeState, if the currentTag of the Dispute is not being disputed
     * @throws NotDisputeInitiator, if the transaction executor is not the one that initiated the dispute
     * @throws error if the Dispute's ArbitrationPolicy contract is not valid
     * @calls cancelDispute(uint256 _disputeId, bytes calldata _data) external nonReentrant {
     * @emits DisputeCancelled (_disputeId, _data);
     */
    cancelDispute(request: CancelDisputeRequest): Promise<CancelDisputeResponse>;
    /**
     * Resolves a dispute after it has been judged
     * @param request - The request object containing details to resolve the dispute.
     *   @param request.disputeId The ID of the dispute to be resolved.
     *   @param request.data The data to resolve the dispute.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to a ResolveDisputeResponse.
     * @throws NotAbleToResolve, if currentTag is still in dispute (i.e still needs a judgement to be set)
     * @throws NotDisputeInitiator, if the transaction executor is not the one that initiated the dispute
     * @emits DisputeResolved (_disputeId)
     */
    resolveDispute(request: ResolveDisputeRequest): Promise<ResolveDisputeResponse>;
}
//# sourceMappingURL=dispute.d.ts.map