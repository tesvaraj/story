import { Address, Hex, Abi, Account, Chain, ContractFunctionArgs, ContractFunctionName, WriteContractParameters, WriteContractReturnType, PublicClient, WatchContractEventReturnType, TransactionReceipt } from "viem";
/**

*/
export declare const accessControllerAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "ipAccountRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "moduleRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessController__BothCallerAndRecipientAreNotRegisteredModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessController__CallerIsNotIPAccountOrOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessController__IPAccountIsNotValid";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessController__IPAccountIsZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "func";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "AccessController__PermissionDenied";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessController__PermissionIsNotValid";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessController__SignerIsZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessController__ToAndFuncAreZeroAddressShouldCallSetAllPermissions";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessController__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessController__ZeroIPAccountRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessController__ZeroModuleRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExpectedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Paused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipAccountOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "func";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
        readonly indexed: false;
    }, {
        readonly name: "permission";
        readonly internalType: "uint8";
        readonly type: "uint8";
        readonly indexed: false;
    }];
    readonly name: "PermissionSet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipAccountOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "func";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
        readonly indexed: false;
    }, {
        readonly name: "permission";
        readonly internalType: "uint8";
        readonly type: "uint8";
        readonly indexed: false;
    }];
    readonly name: "TransientPermissionSet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Unpaused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MODULE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IModuleRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "__ProtocolPausable_init";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "func";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "checkPermission";
    readonly outputs: readonly [];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "func";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "getPermanentPermission";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "func";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "getPermission";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "func";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "getTransientPermission";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "paused";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "permission";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly name: "setAllPermissions";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "permission";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly name: "setAllTransientPermissions";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permissions";
        readonly internalType: "struct AccessPermission.Permission[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "func";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }, {
            readonly name: "permission";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
    }];
    readonly name: "setBatchPermissions";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permissions";
        readonly internalType: "struct AccessPermission.Permission[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "func";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }, {
            readonly name: "permission";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
    }];
    readonly name: "setBatchTransientPermissions";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "func";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }, {
        readonly name: "permission";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly name: "setPermission";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "func";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }, {
        readonly name: "permission";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly name: "setTransientPermission";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "unpause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**

*/
export declare const accessControllerAddress: {
    readonly 1315: "0xcCF37d0a503Ee1D4C11208672e622ed3DFB2275a";
    readonly 1514: "0xcCF37d0a503Ee1D4C11208672e622ed3DFB2275a";
};
/**

*/
export declare const accessControllerConfig: {
    readonly address: {
        readonly 1315: "0xcCF37d0a503Ee1D4C11208672e622ed3DFB2275a";
        readonly 1514: "0xcCF37d0a503Ee1D4C11208672e622ed3DFB2275a";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "ipAccountRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "moduleRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessController__BothCallerAndRecipientAreNotRegisteredModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessController__CallerIsNotIPAccountOrOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessController__IPAccountIsNotValid";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessController__IPAccountIsZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "func";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "AccessController__PermissionDenied";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessController__PermissionIsNotValid";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessController__SignerIsZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessController__ToAndFuncAreZeroAddressShouldCallSetAllPermissions";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessController__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessController__ZeroIPAccountRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessController__ZeroModuleRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Paused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipAccountOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "func";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
            readonly indexed: false;
        }, {
            readonly name: "permission";
            readonly internalType: "uint8";
            readonly type: "uint8";
            readonly indexed: false;
        }];
        readonly name: "PermissionSet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipAccountOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "func";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
            readonly indexed: false;
        }, {
            readonly name: "permission";
            readonly internalType: "uint8";
            readonly type: "uint8";
            readonly indexed: false;
        }];
        readonly name: "TransientPermissionSet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Unpaused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MODULE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IModuleRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "__ProtocolPausable_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "func";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "checkPermission";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "func";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "getPermanentPermission";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "func";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "getPermission";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "func";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "getTransientPermission";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "permission";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly name: "setAllPermissions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "permission";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly name: "setAllTransientPermissions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permissions";
            readonly internalType: "struct AccessPermission.Permission[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "ipAccount";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "func";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }, {
                readonly name: "permission";
                readonly internalType: "uint8";
                readonly type: "uint8";
            }];
        }];
        readonly name: "setBatchPermissions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permissions";
            readonly internalType: "struct AccessPermission.Permission[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "ipAccount";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "func";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }, {
                readonly name: "permission";
                readonly internalType: "uint8";
                readonly type: "uint8";
            }];
        }];
        readonly name: "setBatchTransientPermissions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "func";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }, {
            readonly name: "permission";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly name: "setPermission";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "func";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }, {
            readonly name: "permission";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly name: "setTransientPermission";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**

*/
export declare const arbitrationPolicyUmaAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "disputeModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyModule";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__BondAboveMax";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__CannotCancel";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__CannotDisputeAssertionIfTagIsInherited";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__CurrencyNotWhitelisted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__DisputeNotFound";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__IpOwnerTimePercentAboveMax";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__LivenessAboveMax";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__LivenessBelowMin";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__MaxBondBelowMinimumBond";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__MinLivenessAboveMax";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__NoCounterEvidence";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__NotDisputeModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__NotOOV3";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__OnlyDisputePolicyUMA";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "elapsedTime";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }, {
        readonly name: "liveness";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }, {
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ArbitrationPolicyUMA__OnlyTargetIpIdCanDisputeWithinTimeWindow";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__ZeroDisputeModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__ZeroMaxLiveness";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__ZeroMinLiveness";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__ZeroOOV3";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArbitrationPolicyUMA__ZeroRoyaltyModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExpectedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "assertionId";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }, {
        readonly name: "counterEvidenceHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }];
    readonly name: "AssertionDisputed";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "liveness";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "bond";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "DisputeRaisedUMA";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "minLiveness";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }, {
        readonly name: "maxLiveness";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }, {
        readonly name: "ipOwnerTimePercent";
        readonly internalType: "uint32";
        readonly type: "uint32";
        readonly indexed: false;
    }];
    readonly name: "LivenessSet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "maxBond";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "MaxBondSet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "oov3";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "OOV3Set";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Paused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Unpaused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DISPUTE_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IDisputeModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IRoyaltyModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "__ProtocolPausable_init";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "assertionId";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "assertionDisputedCallback";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "assertionId";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "assertionIdToDisputeId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "assertionId";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "assertedTruthfully";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "assertionResolvedCallback";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "assertionId";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "counterEvidenceHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "disputeAssertion";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "disputeIdToAssertionId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ipOwnerTimePercent";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ipOwnerTimePercents";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "maxBonds";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "maxLiveness";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "minLiveness";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onDisputeCancel";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "decision";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onDisputeJudgement";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "targetIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeEvidenceHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "targetTag";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onRaiseDispute";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onResolveDispute";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "oov3";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "paused";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "minLiveness";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }, {
        readonly name: "maxLiveness";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }, {
        readonly name: "ipOwnerTimePercent";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "setLiveness";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "maxBond";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "setMaxBond";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "oov3";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setOOV3";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "unpause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**

*/
export declare const arbitrationPolicyUmaAddress: {
    readonly 1315: "0xfFD98c3877B8789124f02C7E8239A4b0Ef11E936";
    readonly 1514: "0xfFD98c3877B8789124f02C7E8239A4b0Ef11E936";
};
/**

*/
export declare const arbitrationPolicyUmaConfig: {
    readonly address: {
        readonly 1315: "0xfFD98c3877B8789124f02C7E8239A4b0Ef11E936";
        readonly 1514: "0xfFD98c3877B8789124f02C7E8239A4b0Ef11E936";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "disputeModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyModule";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__BondAboveMax";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__CannotCancel";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__CannotDisputeAssertionIfTagIsInherited";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__CurrencyNotWhitelisted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__DisputeNotFound";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__IpOwnerTimePercentAboveMax";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__LivenessAboveMax";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__LivenessBelowMin";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__MaxBondBelowMinimumBond";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__MinLivenessAboveMax";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__NoCounterEvidence";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__NotDisputeModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__NotOOV3";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__OnlyDisputePolicyUMA";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "elapsedTime";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "liveness";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ArbitrationPolicyUMA__OnlyTargetIpIdCanDisputeWithinTimeWindow";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__ZeroDisputeModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__ZeroMaxLiveness";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__ZeroMinLiveness";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__ZeroOOV3";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicyUMA__ZeroRoyaltyModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "assertionId";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }, {
            readonly name: "counterEvidenceHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }];
        readonly name: "AssertionDisputed";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "liveness";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "bond";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "DisputeRaisedUMA";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "minLiveness";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }, {
            readonly name: "maxLiveness";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }, {
            readonly name: "ipOwnerTimePercent";
            readonly internalType: "uint32";
            readonly type: "uint32";
            readonly indexed: false;
        }];
        readonly name: "LivenessSet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "maxBond";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "MaxBondSet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "oov3";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "OOV3Set";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Paused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Unpaused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DISPUTE_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IDisputeModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IRoyaltyModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "__ProtocolPausable_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "assertionId";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "assertionDisputedCallback";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "assertionId";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "assertionIdToDisputeId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "assertionId";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "assertedTruthfully";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "assertionResolvedCallback";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "assertionId";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "counterEvidenceHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "disputeAssertion";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "disputeIdToAssertionId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ipOwnerTimePercent";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ipOwnerTimePercents";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "maxBonds";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "maxLiveness";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "minLiveness";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onDisputeCancel";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "decision";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onDisputeJudgement";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "targetIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeEvidenceHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "targetTag";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onRaiseDispute";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onResolveDispute";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "oov3";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "minLiveness";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "maxLiveness";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "ipOwnerTimePercent";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "setLiveness";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "maxBond";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "setMaxBond";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "oov3";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setOOV3";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**

*/
export declare const coreMetadataModuleAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "accessController";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAccountRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessControlled__NotIpAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessControlled__ZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CoreMetadataModule__MetadataAlreadyFrozen";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CoreMetadataModule__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "MetadataFrozen";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "metadataURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "metadataHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }];
    readonly name: "MetadataURISet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "nftTokenURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "nftMetadataHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }];
    readonly name: "NFTTokenURISet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ACCESS_CONTROLLER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IAccessController";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "freezeMetadata";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isMetadataFrozen";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "metadataURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "metadataHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "nftMetadataHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "setAll";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "metadataURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "metadataHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "setMetadataURI";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "nftMetadataHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "updateNftTokenURI";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**

*/
export declare const coreMetadataModuleAddress: {
    readonly 1315: "0x6E81a25C99C6e8430aeC7353325EB138aFE5DC16";
    readonly 1514: "0x6E81a25C99C6e8430aeC7353325EB138aFE5DC16";
};
/**

*/
export declare const coreMetadataModuleConfig: {
    readonly address: {
        readonly 1315: "0x6E81a25C99C6e8430aeC7353325EB138aFE5DC16";
        readonly 1514: "0x6E81a25C99C6e8430aeC7353325EB138aFE5DC16";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "accessController";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAccountRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessControlled__NotIpAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessControlled__ZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CoreMetadataModule__MetadataAlreadyFrozen";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CoreMetadataModule__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "MetadataFrozen";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "metadataURI";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "metadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }];
        readonly name: "MetadataURISet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "nftTokenURI";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }];
        readonly name: "NFTTokenURISet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ACCESS_CONTROLLER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IAccessController";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "freezeMetadata";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isMetadataFrozen";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "metadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "metadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "setAll";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "metadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "metadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "setMetadataURI";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "updateNftTokenURI";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**

*/
export declare const derivativeWorkflowsAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "accessController";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "coreMetadataModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAssetRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseToken";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensingModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "pilTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyModule";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "actualTokenOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "DerivativeWorkflows__CallerAndNotTokenOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "DerivativeWorkflows__CallerNotSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DerivativeWorkflows__EmptyLicenseTokens";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DerivativeWorkflows__ZeroAddressParam";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Workflow__CallerNotAuthorizedToMint";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ACCESS_CONTROLLER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IAccessController";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "CORE_METADATA_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ICoreMetadataModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_TOKEN";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseToken";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSING_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicensingModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PIL_TEMPLATE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IPILicenseTemplate";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IRoyaltyModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "derivData";
        readonly internalType: "struct WorkflowStructs.MakeDerivative";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "maxMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxRts";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "maxRevenueShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "allowDuplicates";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "mintAndRegisterIpAndMakeDerivative";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "royaltyContext";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "maxRts";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "allowDuplicates";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "mintAndRegisterIpAndMakeDerivativeWithLicenseTokens";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "royaltyContext";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "mintAndRegisterIpAndMakeDerivativeWithLicenseTokens_deprecated";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "derivData";
        readonly internalType: "struct WorkflowStructs.MakeDerivativeDEPR";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "mintAndRegisterIpAndMakeDerivative_deprecated";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "multicall";
    readonly outputs: readonly [{
        readonly name: "results";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC721Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "derivData";
        readonly internalType: "struct WorkflowStructs.MakeDerivative";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "maxMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxRts";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "maxRevenueShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "sigMetadataAndRegister";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerIpAndMakeDerivative";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licenseTokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "royaltyContext";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "maxRts";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "sigMetadataAndRegister";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerIpAndMakeDerivativeWithLicenseTokens";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licenseTokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "royaltyContext";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "sigMetadata";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "sigRegister";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerIpAndMakeDerivativeWithLicenseTokens_deprecated";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "derivData";
        readonly internalType: "struct WorkflowStructs.MakeDerivativeDEPR";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "sigMetadata";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "sigRegister";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerIpAndMakeDerivative_deprecated";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**

*/
export declare const derivativeWorkflowsAddress: {
    readonly 1315: "0x9e2d496f72C547C2C535B167e06ED8729B374a4f";
    readonly 1514: "0x9e2d496f72C547C2C535B167e06ED8729B374a4f";
};
/**

*/
export declare const derivativeWorkflowsConfig: {
    readonly address: {
        readonly 1315: "0x9e2d496f72C547C2C535B167e06ED8729B374a4f";
        readonly 1514: "0x9e2d496f72C547C2C535B167e06ED8729B374a4f";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "accessController";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "coreMetadataModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAssetRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseToken";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensingModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "pilTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyModule";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "actualTokenOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "DerivativeWorkflows__CallerAndNotTokenOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "DerivativeWorkflows__CallerNotSigner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DerivativeWorkflows__EmptyLicenseTokens";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DerivativeWorkflows__ZeroAddressParam";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Workflow__CallerNotAuthorizedToMint";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ACCESS_CONTROLLER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IAccessController";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "CORE_METADATA_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ICoreMetadataModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_TOKEN";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseToken";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSING_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicensingModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "PIL_TEMPLATE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IPILicenseTemplate";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IRoyaltyModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "derivData";
            readonly internalType: "struct WorkflowStructs.MakeDerivative";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "parentIpIds";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }, {
                readonly name: "licenseTemplate";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "licenseTermsIds";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "royaltyContext";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "maxMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxRts";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "maxRevenueShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }];
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "allowDuplicates";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "mintAndRegisterIpAndMakeDerivative";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "maxRts";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "allowDuplicates";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "mintAndRegisterIpAndMakeDerivativeWithLicenseTokens";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "mintAndRegisterIpAndMakeDerivativeWithLicenseTokens_deprecated";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "derivData";
            readonly internalType: "struct WorkflowStructs.MakeDerivativeDEPR";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "parentIpIds";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }, {
                readonly name: "licenseTemplate";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "licenseTermsIds";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "royaltyContext";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "mintAndRegisterIpAndMakeDerivative_deprecated";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly name: "multicall";
        readonly outputs: readonly [{
            readonly name: "results";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC721Received";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivData";
            readonly internalType: "struct WorkflowStructs.MakeDerivative";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "parentIpIds";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }, {
                readonly name: "licenseTemplate";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "licenseTermsIds";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "royaltyContext";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "maxMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxRts";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "maxRevenueShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }];
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "sigMetadataAndRegister";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerIpAndMakeDerivative";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licenseTokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "maxRts";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "sigMetadataAndRegister";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerIpAndMakeDerivativeWithLicenseTokens";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licenseTokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "sigMetadata";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "sigRegister";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerIpAndMakeDerivativeWithLicenseTokens_deprecated";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivData";
            readonly internalType: "struct WorkflowStructs.MakeDerivativeDEPR";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "parentIpIds";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }, {
                readonly name: "licenseTemplate";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "licenseTermsIds";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "royaltyContext";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "sigMetadata";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "sigRegister";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerIpAndMakeDerivative_deprecated";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**

*/
export declare const disputeModuleAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "accessController";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAssetRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipGraphAcl";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessControlled__NotIpAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessControlled__ZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__CannotBlacklistBaseArbitrationPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__DisputeAlreadyPropagated";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__DisputeWithoutInfringementTag";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__EvidenceHashAlreadyUsed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__NotAbleToResolve";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__NotAllowedToWhitelist";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__NotArbitrationRelayer";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__NotDerivativeOrGroupIp";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__NotDisputeInitiator";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__NotInDisputeState";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__NotRegisteredIpId";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__NotWhitelistedArbitrationPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__NotWhitelistedDisputeTag";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__RelatedDisputeNotResolved";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ZeroAccessController";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ZeroArbitrationPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ZeroArbitrationPolicyCooldown";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ZeroDisputeEvidenceHash";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ZeroDisputeTag";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ZeroIPAssetRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ZeroIPGraphACL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ZeroLicenseRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExpectedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "cooldown";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "ArbitrationPolicyCooldownUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "nextArbitrationUpdateTimestamp";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "ArbitrationPolicySet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "ArbitrationPolicyWhitelistUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "arbitrationRelayer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "ArbitrationRelayerUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "DefaultArbitrationPolicyUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "DisputeCancelled";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "decision";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "DisputeJudgementSet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "targetIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "disputeInitiator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "disputeTimestamp";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "disputeEvidenceHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }, {
        readonly name: "targetTag";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "DisputeRaised";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "DisputeResolved";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "infringingIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "ipIdToTag";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "infringerDisputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "tag";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }, {
        readonly name: "disputeTimestamp";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "IpTaggedOnRelatedIpInfringement";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Paused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "tag";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "TagWhitelistUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Unpaused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ACCESS_CONTROLLER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IAccessController";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "GROUP_IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IGroupIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IN_DISPUTE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_GRAPH_ACL";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IPGraphACL";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "__ProtocolPausable_init";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "arbitrationPolicies";
    readonly outputs: readonly [{
        readonly name: "policy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "arbitrationPolicyCooldown";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "arbitrationRelayer";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "baseArbitrationPolicy";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "cancelDispute";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "disputeCounter";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "disputes";
    readonly outputs: readonly [{
        readonly name: "targetIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeInitiator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeTimestamp";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeEvidenceHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "targetTag";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "currentTag";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "infringerDisputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isIpTagged";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isWhitelistedArbitrationPolicy";
    readonly outputs: readonly [{
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tag";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "isWhitelistedDisputeTag";
    readonly outputs: readonly [{
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "multicall";
    readonly outputs: readonly [{
        readonly name: "results";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "nextArbitrationPolicies";
    readonly outputs: readonly [{
        readonly name: "policy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "nextArbitrationUpdateTimestamps";
    readonly outputs: readonly [{
        readonly name: "timestamp";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "paused";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "targetIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeEvidenceHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "targetTag";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "raiseDispute";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "resolveDispute";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "nextArbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setArbitrationPolicy";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "cooldown";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "setArbitrationPolicyCooldown";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "arbPolicyRelayer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setArbitrationRelayer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setBaseArbitrationPolicy";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "decision";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "setDisputeJudgement";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipIdToTag";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "infringerDisputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "tagIfRelatedIpInfringed";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "unpause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "updateActiveArbitrationPolicy";
    readonly outputs: readonly [{
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "whitelistArbitrationPolicy";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tag";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "whitelistDisputeTag";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
/**

*/
export declare const disputeModuleAddress: {
    readonly 1315: "0x9b7A9c70AFF961C799110954fc06F3093aeb94C5";
    readonly 1514: "0x9b7A9c70AFF961C799110954fc06F3093aeb94C5";
};
/**

*/
export declare const disputeModuleConfig: {
    readonly address: {
        readonly 1315: "0x9b7A9c70AFF961C799110954fc06F3093aeb94C5";
        readonly 1514: "0x9b7A9c70AFF961C799110954fc06F3093aeb94C5";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "accessController";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAssetRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipGraphAcl";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessControlled__NotIpAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessControlled__ZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__CannotBlacklistBaseArbitrationPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__DisputeAlreadyPropagated";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__DisputeWithoutInfringementTag";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__EvidenceHashAlreadyUsed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotAbleToResolve";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotAllowedToWhitelist";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotArbitrationRelayer";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotDerivativeOrGroupIp";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotDisputeInitiator";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotInDisputeState";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotRegisteredIpId";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotWhitelistedArbitrationPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotWhitelistedDisputeTag";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__RelatedDisputeNotResolved";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroAccessController";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroArbitrationPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroArbitrationPolicyCooldown";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroDisputeEvidenceHash";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroDisputeTag";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroIPAssetRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroIPGraphACL";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroLicenseRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "cooldown";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "ArbitrationPolicyCooldownUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "nextArbitrationUpdateTimestamp";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "ArbitrationPolicySet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "ArbitrationPolicyWhitelistUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "arbitrationRelayer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "ArbitrationRelayerUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "DefaultArbitrationPolicyUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "DisputeCancelled";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "decision";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "DisputeJudgementSet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "targetIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "disputeInitiator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "disputeTimestamp";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "disputeEvidenceHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }, {
            readonly name: "targetTag";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "DisputeRaised";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "DisputeResolved";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "infringingIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "ipIdToTag";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "infringerDisputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "tag";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }, {
            readonly name: "disputeTimestamp";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "IpTaggedOnRelatedIpInfringement";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Paused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "tag";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "TagWhitelistUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Unpaused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ACCESS_CONTROLLER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IAccessController";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "GROUP_IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IGroupIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IN_DISPUTE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_GRAPH_ACL";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IPGraphACL";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "__ProtocolPausable_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "arbitrationPolicies";
        readonly outputs: readonly [{
            readonly name: "policy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "arbitrationPolicyCooldown";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "arbitrationRelayer";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "baseArbitrationPolicy";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "cancelDispute";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "disputeCounter";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "disputes";
        readonly outputs: readonly [{
            readonly name: "targetIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeInitiator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeTimestamp";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeEvidenceHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "targetTag";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "currentTag";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "infringerDisputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isIpTagged";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isWhitelistedArbitrationPolicy";
        readonly outputs: readonly [{
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tag";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "isWhitelistedDisputeTag";
        readonly outputs: readonly [{
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly name: "multicall";
        readonly outputs: readonly [{
            readonly name: "results";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "nextArbitrationPolicies";
        readonly outputs: readonly [{
            readonly name: "policy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "nextArbitrationUpdateTimestamps";
        readonly outputs: readonly [{
            readonly name: "timestamp";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "targetIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeEvidenceHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "targetTag";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "raiseDispute";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "resolveDispute";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "nextArbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setArbitrationPolicy";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "cooldown";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "setArbitrationPolicyCooldown";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "arbPolicyRelayer";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setArbitrationRelayer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setBaseArbitrationPolicy";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "decision";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "setDisputeJudgement";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipIdToTag";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "infringerDisputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "tagIfRelatedIpInfringed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "updateActiveArbitrationPolicy";
        readonly outputs: readonly [{
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "whitelistArbitrationPolicy";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tag";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "whitelistDisputeTag";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
/**

*/
export declare const evenSplitGroupPoolAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "groupingModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAssetRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "EvenSplitGroupPool__CallerIsNotGroupingModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "EvenSplitGroupPool__DepositWithZeroTokenAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupSize";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "maxGroupSize";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "EvenSplitGroupPool__MaxGroupSizeReached";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EvenSplitGroupPool__ZeroGroupingModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EvenSplitGroupPool__ZeroIPAssetRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EvenSplitGroupPool__ZeroRoyaltyModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExpectedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupCurrentToken";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupingModule__TokenNotMatchGroupRevenueToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "GroupingModule__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "bits";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "SafeCastOverflowedUintDowncast";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Paused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Unpaused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "GROUPING_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IGroupingModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "GROUP_IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IGroupIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MAX_GROUP_SIZE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IRoyaltyModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "__ProtocolPausable_init";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "minimumGroupRewardShare";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "addIp";
    readonly outputs: readonly [{
        readonly name: "totalGroupRewardShare";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "depositReward";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "distributeRewards";
    readonly outputs: readonly [{
        readonly name: "rewards";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "getAvailableReward";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getIpAddedTime";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getIpRewardDebt";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getMinimumRewardShare";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getTotalAllocatedRewardShare";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getTotalIps";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isIPAdded";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "paused";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "removeIp";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "unpause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**

*/
export declare const evenSplitGroupPoolAddress: {
    readonly 1315: "0xf96f2c30b41Cb6e0290de43C8528ae83d4f33F89";
    readonly 1514: "0xf96f2c30b41Cb6e0290de43C8528ae83d4f33F89";
};
/**

*/
export declare const evenSplitGroupPoolConfig: {
    readonly address: {
        readonly 1315: "0xf96f2c30b41Cb6e0290de43C8528ae83d4f33F89";
        readonly 1514: "0xf96f2c30b41Cb6e0290de43C8528ae83d4f33F89";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "groupingModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAssetRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "EvenSplitGroupPool__CallerIsNotGroupingModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "EvenSplitGroupPool__DepositWithZeroTokenAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupSize";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "maxGroupSize";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "EvenSplitGroupPool__MaxGroupSizeReached";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EvenSplitGroupPool__ZeroGroupingModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EvenSplitGroupPool__ZeroIPAssetRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EvenSplitGroupPool__ZeroRoyaltyModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupCurrentToken";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupingModule__TokenNotMatchGroupRevenueToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "GroupingModule__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "bits";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "SafeCastOverflowedUintDowncast";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Paused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Unpaused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "GROUPING_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IGroupingModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "GROUP_IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IGroupIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MAX_GROUP_SIZE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IRoyaltyModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "__ProtocolPausable_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "minimumGroupRewardShare";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "addIp";
        readonly outputs: readonly [{
            readonly name: "totalGroupRewardShare";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "depositReward";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "distributeRewards";
        readonly outputs: readonly [{
            readonly name: "rewards";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "getAvailableReward";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getIpAddedTime";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getIpRewardDebt";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getMinimumRewardShare";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getTotalAllocatedRewardShare";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getTotalIps";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isIPAdded";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "removeIp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**

*/
export declare const groupingModuleAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "accessController";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAssetRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseToken";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupNFT";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeModule";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessControlled__NotIpAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessControlled__ZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExpectedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupingModule__CannotAddDisputedIpToGroup";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "childGroupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupingModule__CannotAddGroupToGroup";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupingModule__DisputedGroupCannotAddIp";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupingModule__DisputedGroupCannotClaimReward";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupingModule__DisputedGroupCannotCollectRoyalties";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupingModule__GroupFrozenDueToAlreadyMintLicenseTokens";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupingModule__GroupFrozenDueToHasDerivativeIps";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupingModule__GroupIPHasNoLicenseTerms";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupingModule__GroupIPLicenseHasNotSpecifyRevenueToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupRewardPool";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupingModule__GroupRewardPoolNotWhitelisted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupNFT";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupingModule__InvalidGroupNFT";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "maxAllowedRewardShare";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "expectGroupRewardShare";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "GroupingModule__IpExpectedShareExceedsMaxAllowedShare";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "maxAllowedRewardShare";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "GroupingModule__MaxAllowedRewardShareExceeds100Percent";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyToken";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupingModule__RoyaltyTokenNotWhitelisted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupCurrentToken";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupingModule__TokenNotMatchGroupRevenueToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "totalGroupRewardShare";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "expectGroupRewardShare";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "GroupingModule__TotalGroupRewardShareExceeds100Percent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "GroupingModule__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "GroupingModule__ZeroGroupNFT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "GroupingModule__ZeroGroupRewardPool";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "GroupingModule__ZeroIpAssetRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "GroupingModule__ZeroLicenseRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "GroupingModule__ZeroLicenseToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "GroupingModule__ZeroRoyaltyModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "ipIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
        readonly indexed: false;
    }];
    readonly name: "AddedIpToGroup";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "ipId";
        readonly internalType: "address[]";
        readonly type: "address[]";
        readonly indexed: false;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }];
    readonly name: "ClaimedReward";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "pool";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "CollectedRoyaltiesToGroupPool";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "groupPool";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "IPGroupRegistered";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Paused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "ipIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
        readonly indexed: false;
    }];
    readonly name: "RemovedIpFromGroup";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Unpaused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ACCESS_CONTROLLER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IAccessController";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DISPUTE_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IDisputeModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "GROUP_IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IGroupIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "GROUP_NFT";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IGroupNFT";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_TOKEN";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseToken";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IRoyaltyModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "__ProtocolPausable_init";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "maxAllowedRewardShare";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "addIp";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "claimReward";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "collectRoyalties";
    readonly outputs: readonly [{
        readonly name: "royalties";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "getClaimableReward";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "paused";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupPool";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "registerGroup";
    readonly outputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "removeIp";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "unpause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "rewardPool";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "whitelistGroupRewardPool";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
/**

*/
export declare const groupingModuleAddress: {
    readonly 1315: "0x69D3a7aa9edb72Bc226E745A7cCdd50D947b69Ac";
    readonly 1514: "0x69D3a7aa9edb72Bc226E745A7cCdd50D947b69Ac";
};
/**

*/
export declare const groupingModuleConfig: {
    readonly address: {
        readonly 1315: "0x69D3a7aa9edb72Bc226E745A7cCdd50D947b69Ac";
        readonly 1514: "0x69D3a7aa9edb72Bc226E745A7cCdd50D947b69Ac";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "accessController";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAssetRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseToken";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupNFT";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeModule";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessControlled__NotIpAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessControlled__ZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupingModule__CannotAddDisputedIpToGroup";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "childGroupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupingModule__CannotAddGroupToGroup";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupingModule__DisputedGroupCannotAddIp";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupingModule__DisputedGroupCannotClaimReward";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupingModule__DisputedGroupCannotCollectRoyalties";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupingModule__GroupFrozenDueToAlreadyMintLicenseTokens";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupingModule__GroupFrozenDueToHasDerivativeIps";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupingModule__GroupIPHasNoLicenseTerms";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupingModule__GroupIPLicenseHasNotSpecifyRevenueToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupRewardPool";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupingModule__GroupRewardPoolNotWhitelisted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupNFT";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupingModule__InvalidGroupNFT";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "maxAllowedRewardShare";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expectGroupRewardShare";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "GroupingModule__IpExpectedShareExceedsMaxAllowedShare";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "maxAllowedRewardShare";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "GroupingModule__MaxAllowedRewardShareExceeds100Percent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyToken";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupingModule__RoyaltyTokenNotWhitelisted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupCurrentToken";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupingModule__TokenNotMatchGroupRevenueToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "totalGroupRewardShare";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "expectGroupRewardShare";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "GroupingModule__TotalGroupRewardShareExceeds100Percent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "GroupingModule__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "GroupingModule__ZeroGroupNFT";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "GroupingModule__ZeroGroupRewardPool";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "GroupingModule__ZeroIpAssetRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "GroupingModule__ZeroLicenseRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "GroupingModule__ZeroLicenseToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "GroupingModule__ZeroRoyaltyModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "ipIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
            readonly indexed: false;
        }];
        readonly name: "AddedIpToGroup";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "ipId";
            readonly internalType: "address[]";
            readonly type: "address[]";
            readonly indexed: false;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
            readonly indexed: false;
        }];
        readonly name: "ClaimedReward";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "pool";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "CollectedRoyaltiesToGroupPool";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "groupPool";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "IPGroupRegistered";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Paused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "ipIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
            readonly indexed: false;
        }];
        readonly name: "RemovedIpFromGroup";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Unpaused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ACCESS_CONTROLLER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IAccessController";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DISPUTE_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IDisputeModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "GROUP_IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IGroupIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "GROUP_NFT";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IGroupNFT";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_TOKEN";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseToken";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IRoyaltyModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "__ProtocolPausable_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "maxAllowedRewardShare";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "addIp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "claimReward";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "collectRoyalties";
        readonly outputs: readonly [{
            readonly name: "royalties";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "getClaimableReward";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupPool";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "registerGroup";
        readonly outputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "removeIp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "rewardPool";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "whitelistGroupRewardPool";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
/**

*/
export declare const groupingWorkflowsAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "accessController";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "coreMetadataModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupingModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupNft";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAssetRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensingModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "pilTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyModule";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupingWorkflows__CallerNotSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "GroupingWorkflows__NoLicenseData";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "GroupingWorkflows__ZeroAddressParam";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Workflow__CallerNotAuthorizedToMint";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ACCESS_CONTROLLER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IAccessController";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "CORE_METADATA_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ICoreMetadataModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "GROUPING_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IGroupingModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "GROUP_NFT";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract GroupNFT";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSING_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicensingModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PIL_TEMPLATE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IPILicenseTemplate";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract RoyaltyModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "currencyTokens";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "memberIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "collectRoyaltiesAndClaimReward";
    readonly outputs: readonly [{
        readonly name: "collectedRoyalties";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "currencyTokens";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "groupSnapshotIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "memberIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "collectRoyaltiesAndClaimReward_deprecated";
    readonly outputs: readonly [{
        readonly name: "collectedRoyalties";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "maxAllowedRewardShare";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licensesData";
        readonly internalType: "struct WorkflowStructs.LicenseData[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingConfig";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "disabled";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "expectMinimumGroupRewardShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "expectGroupRewardPool";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "sigAddToGroup";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "allowDuplicates";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "mintAndRegisterIpAndAttachLicenseAndAddToGroup";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "sigAddToGroup";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "mintAndRegisterIpAndAttachLicenseAndAddToGroup_deprecated";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "multicall";
    readonly outputs: readonly [{
        readonly name: "results";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC721Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupPool";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseData";
        readonly internalType: "struct WorkflowStructs.LicenseData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingConfig";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "disabled";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "expectMinimumGroupRewardShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "expectGroupRewardPool";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
    }];
    readonly name: "registerGroupAndAttachLicense";
    readonly outputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupPool";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "maxAllowedRewardShare";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licenseData";
        readonly internalType: "struct WorkflowStructs.LicenseData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingConfig";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "disabled";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "expectMinimumGroupRewardShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "expectGroupRewardPool";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
    }];
    readonly name: "registerGroupAndAttachLicenseAndAddIps";
    readonly outputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupPool";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "registerGroupAndAttachLicenseAndAddIps_deprecated";
    readonly outputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupPool";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "registerGroupAndAttachLicense_deprecated";
    readonly outputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "maxAllowedRewardShare";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licensesData";
        readonly internalType: "struct WorkflowStructs.LicenseData[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingConfig";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "disabled";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "expectMinimumGroupRewardShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "expectGroupRewardPool";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "sigMetadataAndAttachAndConfig";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "sigAddToGroup";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerIpAndAttachLicenseAndAddToGroup";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "sigMetadataAndAttachAndConfig";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "sigAddToGroup";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerIpAndAttachLicenseAndAddToGroup_deprecated";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**

*/
export declare const groupingWorkflowsAddress: {
    readonly 1315: "0xD7c0beb3aa4DCD4723465f1ecAd045676c24CDCd";
    readonly 1514: "0xD7c0beb3aa4DCD4723465f1ecAd045676c24CDCd";
};
/**

*/
export declare const groupingWorkflowsConfig: {
    readonly address: {
        readonly 1315: "0xD7c0beb3aa4DCD4723465f1ecAd045676c24CDCd";
        readonly 1514: "0xD7c0beb3aa4DCD4723465f1ecAd045676c24CDCd";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "accessController";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "coreMetadataModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupingModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupNft";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAssetRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensingModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "pilTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyModule";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupingWorkflows__CallerNotSigner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "GroupingWorkflows__NoLicenseData";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "GroupingWorkflows__ZeroAddressParam";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Workflow__CallerNotAuthorizedToMint";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ACCESS_CONTROLLER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IAccessController";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "CORE_METADATA_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ICoreMetadataModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "GROUPING_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IGroupingModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "GROUP_NFT";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract GroupNFT";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSING_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicensingModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "PIL_TEMPLATE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IPILicenseTemplate";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract RoyaltyModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currencyTokens";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "memberIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "collectRoyaltiesAndClaimReward";
        readonly outputs: readonly [{
            readonly name: "collectedRoyalties";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currencyTokens";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "groupSnapshotIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "memberIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "collectRoyaltiesAndClaimReward_deprecated";
        readonly outputs: readonly [{
            readonly name: "collectedRoyalties";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "maxAllowedRewardShare";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensesData";
            readonly internalType: "struct WorkflowStructs.LicenseData[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "licenseTemplate";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "licenseTermsId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingConfig";
                readonly internalType: "struct Licensing.LicensingConfig";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "isSet";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "mintingFee";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "licensingHook";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "hookData";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }, {
                    readonly name: "commercialRevShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "disabled";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "expectMinimumGroupRewardShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "expectGroupRewardPool";
                    readonly internalType: "address";
                    readonly type: "address";
                }];
            }];
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "sigAddToGroup";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "allowDuplicates";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "mintAndRegisterIpAndAttachLicenseAndAddToGroup";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "sigAddToGroup";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "mintAndRegisterIpAndAttachLicenseAndAddToGroup_deprecated";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly name: "multicall";
        readonly outputs: readonly [{
            readonly name: "results";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC721Received";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupPool";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseData";
            readonly internalType: "struct WorkflowStructs.LicenseData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "licenseTemplate";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "licenseTermsId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingConfig";
                readonly internalType: "struct Licensing.LicensingConfig";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "isSet";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "mintingFee";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "licensingHook";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "hookData";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }, {
                    readonly name: "commercialRevShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "disabled";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "expectMinimumGroupRewardShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "expectGroupRewardPool";
                    readonly internalType: "address";
                    readonly type: "address";
                }];
            }];
        }];
        readonly name: "registerGroupAndAttachLicense";
        readonly outputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupPool";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "maxAllowedRewardShare";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licenseData";
            readonly internalType: "struct WorkflowStructs.LicenseData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "licenseTemplate";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "licenseTermsId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingConfig";
                readonly internalType: "struct Licensing.LicensingConfig";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "isSet";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "mintingFee";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "licensingHook";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "hookData";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }, {
                    readonly name: "commercialRevShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "disabled";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "expectMinimumGroupRewardShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "expectGroupRewardPool";
                    readonly internalType: "address";
                    readonly type: "address";
                }];
            }];
        }];
        readonly name: "registerGroupAndAttachLicenseAndAddIps";
        readonly outputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupPool";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "registerGroupAndAttachLicenseAndAddIps_deprecated";
        readonly outputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupPool";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "registerGroupAndAttachLicense_deprecated";
        readonly outputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "maxAllowedRewardShare";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensesData";
            readonly internalType: "struct WorkflowStructs.LicenseData[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "licenseTemplate";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "licenseTermsId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingConfig";
                readonly internalType: "struct Licensing.LicensingConfig";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "isSet";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "mintingFee";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "licensingHook";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "hookData";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }, {
                    readonly name: "commercialRevShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "disabled";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "expectMinimumGroupRewardShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "expectGroupRewardPool";
                    readonly internalType: "address";
                    readonly type: "address";
                }];
            }];
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "sigMetadataAndAttachAndConfig";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "sigAddToGroup";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerIpAndAttachLicenseAndAddToGroup";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "sigMetadataAndAttachAndConfig";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "sigAddToGroup";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerIpAndAttachLicenseAndAddToGroup_deprecated";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**

*/
export declare const ipAccountImplAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "accessController";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAssetRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "moduleRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FnSelectorNotRecognized";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccountStorage__InvalidBatchLengths";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "module";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "IPAccountStorage__NotRegisteredModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccountStorage__ZeroIpAssetRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccountStorage__ZeroLicenseRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccountStorage__ZeroModuleRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccount__ExpiredSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccount__InvalidCalldata";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccount__InvalidOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccount__InvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccount__InvalidSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccount__UUPSUpgradeDisabled";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccount__ZeroAccessController";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OperationNotSupported";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SelfOwnDetected";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Unauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UpgradeFailed";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }, {
        readonly name: "nonce";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }];
    readonly name: "Executed";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }, {
        readonly name: "nonce";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }, {
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "ExecutedWithSig";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "fallback";
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ACCESS_CONTROLLER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MODULE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "bytes32Data";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "bytesData";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "eip712Domain";
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly internalType: "bytes1";
        readonly type: "bytes1";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "salt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "extensions";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "operation";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly name: "execute";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "execute";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "calls";
        readonly internalType: "struct ERC6551.Call[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "operation";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly name: "executeBatch";
    readonly outputs: readonly [{
        readonly name: "results";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "executeWithSig";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "key";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "getBytes";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "namespace";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "key";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "getBytes";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "namespace";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "key";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "getBytes32";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "key";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "getBytes32";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "namespaces";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }, {
        readonly name: "keys";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }];
    readonly name: "getBytes32Batch";
    readonly outputs: readonly [{
        readonly name: "values";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "namespaces";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }, {
        readonly name: "keys";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }];
    readonly name: "getBytesBatch";
    readonly outputs: readonly [{
        readonly name: "values";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "hash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "isValidSignature";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "isValidSigner";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "isValidSigner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "key";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "value";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "setBytes";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "key";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "value";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "setBytes32";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "keys";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }, {
        readonly name: "values";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }];
    readonly name: "setBytes32Batch";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "keys";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }, {
        readonly name: "values";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "setBytesBatch";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "state";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "token";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "receive";
    readonly stateMutability: "payable";
}];
/**

*/
export declare const ipAccountImplAddress: {
    readonly 1315: "0x7343646585443F1c3F64E4F08b708788527e1C77";
    readonly 1514: "0x7343646585443F1c3F64E4F08b708788527e1C77";
};
/**

*/
export declare const ipAccountImplConfig: {
    readonly address: {
        readonly 1315: "0x7343646585443F1c3F64E4F08b708788527e1C77";
        readonly 1514: "0x7343646585443F1c3F64E4F08b708788527e1C77";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "accessController";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAssetRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "moduleRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FnSelectorNotRecognized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccountStorage__InvalidBatchLengths";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "module";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "IPAccountStorage__NotRegisteredModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccountStorage__ZeroIpAssetRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccountStorage__ZeroLicenseRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccountStorage__ZeroModuleRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccount__ExpiredSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccount__InvalidCalldata";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccount__InvalidOperation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccount__InvalidSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccount__InvalidSigner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccount__UUPSUpgradeDisabled";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccount__ZeroAccessController";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OperationNotSupported";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SelfOwnDetected";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Unauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UpgradeFailed";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }];
        readonly name: "Executed";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "ExecutedWithSig";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "fallback";
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ACCESS_CONTROLLER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MODULE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "bytes32Data";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "bytesData";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "eip712Domain";
        readonly outputs: readonly [{
            readonly name: "fields";
            readonly internalType: "bytes1";
            readonly type: "bytes1";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "verifyingContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "salt";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "extensions";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "operation";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly name: "execute";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "execute";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "calls";
            readonly internalType: "struct ERC6551.Call[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "target";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "value";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "data";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "operation";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly name: "executeBatch";
        readonly outputs: readonly [{
            readonly name: "results";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "executeWithSig";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "key";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "getBytes";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "namespace";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "key";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "getBytes";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "namespace";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "key";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "getBytes32";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "key";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "getBytes32";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "namespaces";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }, {
            readonly name: "keys";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }];
        readonly name: "getBytes32Batch";
        readonly outputs: readonly [{
            readonly name: "values";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "namespaces";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }, {
            readonly name: "keys";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }];
        readonly name: "getBytesBatch";
        readonly outputs: readonly [{
            readonly name: "values";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "hash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "isValidSignature";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "isValidSigner";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "isValidSigner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "key";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "value";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "setBytes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "key";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "value";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "setBytes32";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "keys";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }, {
            readonly name: "values";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }];
        readonly name: "setBytes32Batch";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "keys";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }, {
            readonly name: "values";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly name: "setBytesBatch";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "state";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "receive";
        readonly stateMutability: "payable";
    }];
};
/**

*/
export declare const ipAssetRegistryAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "erc6551Registry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAccountImpl";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupingModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAccountImplBeacon";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExpectedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupIPAssetRegistry__CallerIsNotGroupingModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupPool";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupIPAssetRegistry__GroupRewardPoolNotRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupSize";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "GroupIPAssetRegistry__GroupSizeExceedsLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "rewardPool";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupIPAssetRegistry__InvalidGroupRewardPool";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupIPAssetRegistry__NotRegisteredGroupIP";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "GroupIPAssetRegistry__NotRegisteredIP";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "pageSize";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "GroupIPAssetRegistry__PageSizeExceedsLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccountRegistry_ZeroERC6551Registry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccountRegistry_ZeroIpAccountImpl";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccountRegistry_ZeroIpAccountImplBeacon";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "IPAssetRegistry__InvalidToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "IPAssetRegistry__UnsupportedIERC721";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "IPAssetRegistry__UnsupportedIERC721Metadata";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAssetRegistry__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "IPAssetRegistry__ZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "length";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "StringsInsufficientHexLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "IPAccountRegistered";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "uri";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "registrationDate";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "IPRegistered";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "payer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "treasury";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "feeToken";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint96";
        readonly type: "uint96";
        readonly indexed: false;
    }];
    readonly name: "IPRegistrationFeePaid";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Paused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "treasury";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "feeToken";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "feeAmount";
        readonly internalType: "uint96";
        readonly type: "uint96";
        readonly indexed: false;
    }];
    readonly name: "RegistrationFeeSet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Unpaused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ERC6551_PUBLIC_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "GROUPING_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IGroupingModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ACCOUNT_IMPL";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ACCOUNT_IMPL_UPGRADEABLE_BEACON";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ACCOUNT_SALT";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MAX_GROUP_SIZE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "__ProtocolPausable_init";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "addGroupMember";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "containsIp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getFeeAmount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint96";
        readonly type: "uint96";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getFeeToken";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "startIndex";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "size";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getGroupMembers";
    readonly outputs: readonly [{
        readonly name: "results";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getGroupRewardPool";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getIPAccountImpl";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getTreasury";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ipAccount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ipId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "id";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isRegistered";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isRegisteredGroup";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "rewardPool";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isWhitelistedGroupRewardPool";
    readonly outputs: readonly [{
        readonly name: "isWhitelisted";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "paused";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "chainid";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "register";
    readonly outputs: readonly [{
        readonly name: "id";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupNft";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupNftId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "rewardPool";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "registerFeePayer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "registerGroup";
    readonly outputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "removeGroupMember";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "treasury";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "feeToken";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "feeAmount";
        readonly internalType: "uint96";
        readonly type: "uint96";
    }];
    readonly name: "setRegistrationFee";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "totalMembers";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "unpause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newIpAccountImpl";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "upgradeIPAccountImpl";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "rewardPool";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "whitelistGroupRewardPool";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
/**

*/
export declare const ipAssetRegistryAddress: {
    readonly 1315: "0x77319B4031e6eF1250907aa00018B8B1c67a244b";
    readonly 1514: "0x77319B4031e6eF1250907aa00018B8B1c67a244b";
};
/**

*/
export declare const ipAssetRegistryConfig: {
    readonly address: {
        readonly 1315: "0x77319B4031e6eF1250907aa00018B8B1c67a244b";
        readonly 1514: "0x77319B4031e6eF1250907aa00018B8B1c67a244b";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "erc6551Registry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAccountImpl";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupingModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAccountImplBeacon";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupIPAssetRegistry__CallerIsNotGroupingModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupPool";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupIPAssetRegistry__GroupRewardPoolNotRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupSize";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "limit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "GroupIPAssetRegistry__GroupSizeExceedsLimit";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "rewardPool";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupIPAssetRegistry__InvalidGroupRewardPool";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupIPAssetRegistry__NotRegisteredGroupIP";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "GroupIPAssetRegistry__NotRegisteredIP";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "pageSize";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "limit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "GroupIPAssetRegistry__PageSizeExceedsLimit";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccountRegistry_ZeroERC6551Registry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccountRegistry_ZeroIpAccountImpl";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccountRegistry_ZeroIpAccountImplBeacon";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "IPAssetRegistry__InvalidToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "IPAssetRegistry__UnsupportedIERC721";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "IPAssetRegistry__UnsupportedIERC721Metadata";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAssetRegistry__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "IPAssetRegistry__ZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "length";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "StringsInsufficientHexLength";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "IPAccountRegistered";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "registrationDate";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "IPRegistered";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "payer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "treasury";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "feeToken";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "amount";
            readonly internalType: "uint96";
            readonly type: "uint96";
            readonly indexed: false;
        }];
        readonly name: "IPRegistrationFeePaid";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Paused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "treasury";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "feeToken";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "feeAmount";
            readonly internalType: "uint96";
            readonly type: "uint96";
            readonly indexed: false;
        }];
        readonly name: "RegistrationFeeSet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Unpaused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ERC6551_PUBLIC_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "GROUPING_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IGroupingModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ACCOUNT_IMPL";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ACCOUNT_IMPL_UPGRADEABLE_BEACON";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ACCOUNT_SALT";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MAX_GROUP_SIZE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "__ProtocolPausable_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "addGroupMember";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "containsIp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getFeeAmount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getFeeToken";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "startIndex";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "size";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getGroupMembers";
        readonly outputs: readonly [{
            readonly name: "results";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getGroupRewardPool";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getIPAccountImpl";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getTreasury";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ipAccount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ipId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "id";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isRegistered";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isRegisteredGroup";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "rewardPool";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isWhitelistedGroupRewardPool";
        readonly outputs: readonly [{
            readonly name: "isWhitelisted";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "chainid";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "register";
        readonly outputs: readonly [{
            readonly name: "id";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupNft";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupNftId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "rewardPool";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "registerFeePayer";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "registerGroup";
        readonly outputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "removeGroupMember";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "treasury";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "feeToken";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "feeAmount";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }];
        readonly name: "setRegistrationFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "totalMembers";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newIpAccountImpl";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "upgradeIPAccountImpl";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "rewardPool";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "whitelistGroupRewardPool";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
/**

*/
export declare const ipRoyaltyVaultImplAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "disputeModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAssetRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupingModule";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "allowance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "needed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC20InsufficientAllowance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "balance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "needed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC20InsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "approver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidApprover";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidReceiver";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidSender";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidSpender";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__GroupPoolMustClaimViaGroupingModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "vault";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "IpRoyaltyVault__InsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__InvalidTargetIpId";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__NegativeValueUnsafeCastingToUint256";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__NoClaimableTokens";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__NotAllowedToAddTokenToVault";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__NotWhitelistedRoyaltyToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "vault";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "IpRoyaltyVault__SameFromToAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__VaultDoesNotBelongToAnAncestor";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__VaultsMustClaimAsSelf";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__ZeroAmount";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "vault";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "IpRoyaltyVault__ZeroBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__ZeroDisputeModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__ZeroGroupingModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__ZeroIpAssetRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__ZeroRoyaltyModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Approval";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "claimer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "revenueDebt";
        readonly internalType: "int256";
        readonly type: "int256";
        readonly indexed: false;
    }];
    readonly name: "RevenueDebtUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RevenueTokenAddedToVault";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "claimer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RevenueTokenClaimed";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Transfer";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DISPUTE_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IDisputeModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "GROUPING_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IGroupIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IRoyaltyModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenList";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "targetIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "claimByTokenBatchAsSelf";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "claimer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "claimRevenueOnBehalf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "claimer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenList";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "claimRevenueOnBehalfByTokenBatch";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "claimer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "claimableRevenue";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "claimer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "claimerRevenueDebt";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "int256";
        readonly type: "int256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "decimals";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "supply";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "ipIdAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "rtReceiver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ipId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "tokens";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "updateVaultBalance";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "vaultAccBalances";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}];
/**

*/
export declare const ipRoyaltyVaultImplAddress: {
    readonly 1315: "0x63cC7611316880213f3A4Ba9bD72b0EaA2010298";
    readonly 1514: "0x63cC7611316880213f3A4Ba9bD72b0EaA2010298";
};
/**

*/
export declare const ipRoyaltyVaultImplConfig: {
    readonly address: {
        readonly 1315: "0x63cC7611316880213f3A4Ba9bD72b0EaA2010298";
        readonly 1514: "0x63cC7611316880213f3A4Ba9bD72b0EaA2010298";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "disputeModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAssetRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupingModule";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "allowance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "needed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC20InsufficientAllowance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "balance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "needed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC20InsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "approver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidApprover";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidReceiver";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidSender";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidSpender";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__GroupPoolMustClaimViaGroupingModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "vault";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "IpRoyaltyVault__InsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__InvalidTargetIpId";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__NegativeValueUnsafeCastingToUint256";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__NoClaimableTokens";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__NotAllowedToAddTokenToVault";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__NotWhitelistedRoyaltyToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "vault";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "IpRoyaltyVault__SameFromToAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__VaultDoesNotBelongToAnAncestor";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__VaultsMustClaimAsSelf";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__ZeroAmount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "vault";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "IpRoyaltyVault__ZeroBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__ZeroDisputeModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__ZeroGroupingModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__ZeroIpAssetRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__ZeroRoyaltyModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "Approval";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "claimer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "revenueDebt";
            readonly internalType: "int256";
            readonly type: "int256";
            readonly indexed: false;
        }];
        readonly name: "RevenueDebtUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RevenueTokenAddedToVault";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "claimer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RevenueTokenClaimed";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "Transfer";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DISPUTE_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IDisputeModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "GROUPING_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IGroupIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IRoyaltyModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenList";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "targetIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "claimByTokenBatchAsSelf";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "claimer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "claimRevenueOnBehalf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "claimer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenList";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "claimRevenueOnBehalfByTokenBatch";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "claimer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "claimableRevenue";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "claimer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "claimerRevenueDebt";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "int256";
            readonly type: "int256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "supply";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "ipIdAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "rtReceiver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ipId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "tokens";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "updateVaultBalance";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "vaultAccBalances";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }];
};
/**

*/
export declare const licenseAttachmentWorkflowsAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "accessController";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "coreMetadataModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAssetRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensingModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "pilTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseAttachmentWorkflows__CallerNotSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseAttachmentWorkflows__NoLicenseTermsData";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseAttachmentWorkflows__ZeroAddressParam";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Workflow__CallerNotAuthorizedToMint";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ACCESS_CONTROLLER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IAccessController";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "CORE_METADATA_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ICoreMetadataModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSING_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicensingModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PIL_TEMPLATE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IPILicenseTemplate";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "allowDuplicates";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "mintAndRegisterIpAndAttachDefaultTerms";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "licenseTermsData";
        readonly internalType: "struct WorkflowStructs.LicenseTermsData[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "terms";
            readonly internalType: "struct PILTerms";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "defaultMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "licensingConfig";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "disabled";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "expectMinimumGroupRewardShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "expectGroupRewardPool";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
    }, {
        readonly name: "allowDuplicates";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "mintAndRegisterIpAndAttachPILTerms";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "terms";
        readonly internalType: "struct PILTerms";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "defaultMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commercialUse";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commercializerCheckerData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "commercialRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivativesAllowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesApproval";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesReciprocal";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativeRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly name: "mintAndRegisterIpAndAttachPILTerms_deprecated";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "terms";
        readonly internalType: "struct PILTerms[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "defaultMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commercialUse";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commercializerCheckerData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "commercialRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivativesAllowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesApproval";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesReciprocal";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativeRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly name: "mintAndRegisterIpAndAttachPILTerms_deprecated";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "multicall";
    readonly outputs: readonly [{
        readonly name: "results";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC721Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "sigMetadataAndDefaultTerms";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerIpAndAttachDefaultTerms";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "licenseTermsData";
        readonly internalType: "struct WorkflowStructs.LicenseTermsData[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "terms";
            readonly internalType: "struct PILTerms";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "defaultMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "licensingConfig";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "disabled";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "expectMinimumGroupRewardShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "expectGroupRewardPool";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
    }, {
        readonly name: "sigMetadataAndAttachAndConfig";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerIpAndAttachPILTerms";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "terms";
        readonly internalType: "struct PILTerms";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "defaultMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commercialUse";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commercializerCheckerData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "commercialRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivativesAllowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesApproval";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesReciprocal";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativeRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }, {
        readonly name: "sigMetadata";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "sigAttach";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerIpAndAttachPILTerms_deprecated";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "terms";
        readonly internalType: "struct PILTerms[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "defaultMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commercialUse";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commercializerCheckerData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "commercialRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivativesAllowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesApproval";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesReciprocal";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativeRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }, {
        readonly name: "sigMetadata";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "sigAttach";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerIpAndAttachPILTerms_deprecated";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsData";
        readonly internalType: "struct WorkflowStructs.LicenseTermsData[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "terms";
            readonly internalType: "struct PILTerms";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "defaultMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "licensingConfig";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "disabled";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "expectMinimumGroupRewardShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "expectGroupRewardPool";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
    }, {
        readonly name: "sigAttachAndConfig";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerPILTermsAndAttach";
    readonly outputs: readonly [{
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "terms";
        readonly internalType: "struct PILTerms[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "defaultMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commercialUse";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commercializerCheckerData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "commercialRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivativesAllowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesApproval";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesReciprocal";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativeRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }, {
        readonly name: "sigAttach";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerPILTermsAndAttach_deprecated";
    readonly outputs: readonly [{
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "terms";
        readonly internalType: "struct PILTerms";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "defaultMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commercialUse";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commercializerCheckerData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "commercialRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivativesAllowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesApproval";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesReciprocal";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativeRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }, {
        readonly name: "sigAttach";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerPILTermsAndAttach_deprecated";
    readonly outputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**

*/
export declare const licenseAttachmentWorkflowsAddress: {
    readonly 1315: "0xcC2E862bCee5B6036Db0de6E06Ae87e524a79fd8";
    readonly 1514: "0xcC2E862bCee5B6036Db0de6E06Ae87e524a79fd8";
};
/**

*/
export declare const licenseAttachmentWorkflowsConfig: {
    readonly address: {
        readonly 1315: "0xcC2E862bCee5B6036Db0de6E06Ae87e524a79fd8";
        readonly 1514: "0xcC2E862bCee5B6036Db0de6E06Ae87e524a79fd8";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "accessController";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "coreMetadataModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAssetRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensingModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "pilTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseAttachmentWorkflows__CallerNotSigner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseAttachmentWorkflows__NoLicenseTermsData";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseAttachmentWorkflows__ZeroAddressParam";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Workflow__CallerNotAuthorizedToMint";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ACCESS_CONTROLLER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IAccessController";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "CORE_METADATA_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ICoreMetadataModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSING_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicensingModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "PIL_TEMPLATE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IPILicenseTemplate";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "allowDuplicates";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "mintAndRegisterIpAndAttachDefaultTerms";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "licenseTermsData";
            readonly internalType: "struct WorkflowStructs.LicenseTermsData[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "terms";
                readonly internalType: "struct PILTerms";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "transferable";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "royaltyPolicy";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "defaultMintingFee";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "expiration";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "commercialUse";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "commercialAttribution";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "commercializerChecker";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "commercializerCheckerData";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }, {
                    readonly name: "commercialRevShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "commercialRevCeiling";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "derivativesAllowed";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativesAttribution";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativesApproval";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativesReciprocal";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativeRevCeiling";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "currency";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "uri";
                    readonly internalType: "string";
                    readonly type: "string";
                }];
            }, {
                readonly name: "licensingConfig";
                readonly internalType: "struct Licensing.LicensingConfig";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "isSet";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "mintingFee";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "licensingHook";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "hookData";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }, {
                    readonly name: "commercialRevShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "disabled";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "expectMinimumGroupRewardShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "expectGroupRewardPool";
                    readonly internalType: "address";
                    readonly type: "address";
                }];
            }];
        }, {
            readonly name: "allowDuplicates";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "mintAndRegisterIpAndAttachPILTerms";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "terms";
            readonly internalType: "struct PILTerms";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "defaultMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly name: "mintAndRegisterIpAndAttachPILTerms_deprecated";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "terms";
            readonly internalType: "struct PILTerms[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "defaultMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly name: "mintAndRegisterIpAndAttachPILTerms_deprecated";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly name: "multicall";
        readonly outputs: readonly [{
            readonly name: "results";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC721Received";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "sigMetadataAndDefaultTerms";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerIpAndAttachDefaultTerms";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "licenseTermsData";
            readonly internalType: "struct WorkflowStructs.LicenseTermsData[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "terms";
                readonly internalType: "struct PILTerms";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "transferable";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "royaltyPolicy";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "defaultMintingFee";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "expiration";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "commercialUse";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "commercialAttribution";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "commercializerChecker";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "commercializerCheckerData";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }, {
                    readonly name: "commercialRevShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "commercialRevCeiling";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "derivativesAllowed";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativesAttribution";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativesApproval";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativesReciprocal";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativeRevCeiling";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "currency";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "uri";
                    readonly internalType: "string";
                    readonly type: "string";
                }];
            }, {
                readonly name: "licensingConfig";
                readonly internalType: "struct Licensing.LicensingConfig";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "isSet";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "mintingFee";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "licensingHook";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "hookData";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }, {
                    readonly name: "commercialRevShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "disabled";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "expectMinimumGroupRewardShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "expectGroupRewardPool";
                    readonly internalType: "address";
                    readonly type: "address";
                }];
            }];
        }, {
            readonly name: "sigMetadataAndAttachAndConfig";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerIpAndAttachPILTerms";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "terms";
            readonly internalType: "struct PILTerms";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "defaultMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "sigMetadata";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "sigAttach";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerIpAndAttachPILTerms_deprecated";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "terms";
            readonly internalType: "struct PILTerms[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "defaultMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "sigMetadata";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "sigAttach";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerIpAndAttachPILTerms_deprecated";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsData";
            readonly internalType: "struct WorkflowStructs.LicenseTermsData[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "terms";
                readonly internalType: "struct PILTerms";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "transferable";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "royaltyPolicy";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "defaultMintingFee";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "expiration";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "commercialUse";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "commercialAttribution";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "commercializerChecker";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "commercializerCheckerData";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }, {
                    readonly name: "commercialRevShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "commercialRevCeiling";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "derivativesAllowed";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativesAttribution";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativesApproval";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativesReciprocal";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativeRevCeiling";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "currency";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "uri";
                    readonly internalType: "string";
                    readonly type: "string";
                }];
            }, {
                readonly name: "licensingConfig";
                readonly internalType: "struct Licensing.LicensingConfig";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "isSet";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "mintingFee";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "licensingHook";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "hookData";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }, {
                    readonly name: "commercialRevShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "disabled";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "expectMinimumGroupRewardShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "expectGroupRewardPool";
                    readonly internalType: "address";
                    readonly type: "address";
                }];
            }];
        }, {
            readonly name: "sigAttachAndConfig";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerPILTermsAndAttach";
        readonly outputs: readonly [{
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "terms";
            readonly internalType: "struct PILTerms[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "defaultMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "sigAttach";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerPILTermsAndAttach_deprecated";
        readonly outputs: readonly [{
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "terms";
            readonly internalType: "struct PILTerms";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "defaultMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "sigAttach";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerPILTermsAndAttach_deprecated";
        readonly outputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**

*/
export declare const licenseRegistryAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "groupIpAssetRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensingModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipGraphAcl";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parentIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "LicenseRegistry__AddParentIpToIPGraphFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseRegistry__CallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseRegistry__CallerNotLicensingModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__CannotAddIpWithExpirationToGroup";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__DerivativeAlreadyRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__DerivativeIpAlreadyHasChild";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__DerivativeIpAlreadyHasLicense";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__DerivativeIsParent";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__DuplicateParentIp";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__EmptyGroupCannotMintLicenseToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__GroupCannotHasParentIp";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__GroupIpAlreadyHasLicenseTerms";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipCommercialRevShare";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "groupCommercialRevShare";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "LicenseRegistry__GroupIpCommercialRevShareConfigMustNotLessThanIp";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__GroupMustBeSoleParent";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "index";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "length";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseRegistry__IndexOutOfBounds";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "expectGroupRewardPool";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupRewardPool";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__IpExpectGroupRewardPoolNotMatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__IpExpectGroupRewardPoolNotSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__IpExpired";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseRegistry__IpHasNoGroupLicenseTerms";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseRegistry__IpLicenseDisabled";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "hookData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "groupHookData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "LicenseRegistry__IpLicensingHookDataNotMatchWithGroup";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensingHook";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupLicensingHook";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__IpLicensingHookNotMatchWithGroup";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "mintingFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "groupMintingFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseRegistry__IpMintingFeeNotMatchWithGroup";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseRegistry__LicenseTermsAlreadyAttached";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseRegistry__LicenseTermsCannotAttachToGroupIp";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseRegistry__LicenseTermsNotExists";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseRegistry__LicensorIpHasNoLicenseTerms";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__NotLicenseTemplate";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__ParentIpExpired";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseRegistry__ParentIpHasNoLicenseTerms";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__ParentIpIsEmptyGroup";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__ParentIpNotRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__ParentIpTagged";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__ParentIpUnmatchedLicenseTemplate";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ancestors";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxAncestors";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseRegistry__TooManyAncestors";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parents";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxParents";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseRegistry__TooManyParents";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "newLicenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__UnmatchedLicenseTemplate";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__UnregisteredLicenseTemplate";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseRegistry__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseRegistry__ZeroDisputeModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseRegistry__ZeroGroupIpRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseRegistry__ZeroIPGraphACL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseRegistry__ZeroLicenseTemplate";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseRegistry__ZeroLicensingModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__DerivativesCannotAddLicenseTerms";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicensingModule__LicenseTermsNotFound";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__CallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "DefaultLicenseTermsSet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "expireTime";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "ExpirationTimeSet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "LicenseTemplateRegistered";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "licensingConfig";
        readonly internalType: "struct Licensing.LicensingConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "isSet";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingHook";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "disabled";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "expectMinimumGroupRewardShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "expectGroupRewardPool";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly indexed: false;
    }];
    readonly name: "LicensingConfigSetForLicense";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DISPUTE_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IDisputeModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "EXPIRATION_TIME";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "GROUP_IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IGroupIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_GRAPH";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_GRAPH_ACL";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IPGraphACL";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSING_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicensingModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MAX_ANCESTORS";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MAX_PARENTS";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "attachLicenseTermsToIp";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "exists";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getAncestorsCount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "index";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getAttachedLicenseTerms";
    readonly outputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getAttachedLicenseTermsCount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getDefaultLicenseTerms";
    readonly outputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "index";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getDerivativeIp";
    readonly outputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getDerivativeIpCount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getExpireTime";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getLicensingConfig";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct Licensing.LicensingConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "isSet";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingHook";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "disabled";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "expectMinimumGroupRewardShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "expectGroupRewardPool";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "index";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getParentIp";
    readonly outputs: readonly [{
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getParentIpCount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getParentLicenseTerms";
    readonly outputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getRoyaltyPercent";
    readonly outputs: readonly [{
        readonly name: "royaltyPercent";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "hasDerivativeIps";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "hasIpAttachedLicenseTerms";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "isDefaultLicense";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isDerivativeIp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isExpiredNow";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isParentIp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isRegisteredLicenseTemplate";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parentIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "isUsingLicenseToken";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "registerDerivativeIp";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "registerLicenseTemplate";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newLicenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "newLicenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "setDefaultLicenseTerms";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licensingConfig";
        readonly internalType: "struct Licensing.LicensingConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "isSet";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingHook";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "disabled";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "expectMinimumGroupRewardShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "expectGroupRewardPool";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "setLicensingConfigForLicense";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupRewardPool";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupLicenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupLicenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "verifyGroupAddIp";
    readonly outputs: readonly [{
        readonly name: "ipLicensingConfig";
        readonly internalType: "struct Licensing.LicensingConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "isSet";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingHook";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "disabled";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "expectMinimumGroupRewardShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "expectGroupRewardPool";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licensorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "isMintedByIpOwner";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "verifyMintLicenseToken";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct Licensing.LicensingConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "isSet";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingHook";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "disabled";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "expectMinimumGroupRewardShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "expectGroupRewardPool";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly stateMutability: "view";
}];
/**

*/
export declare const licenseRegistryAddress: {
    readonly 1315: "0x529a750E02d8E2f15649c13D69a465286a780e24";
    readonly 1514: "0x529a750E02d8E2f15649c13D69a465286a780e24";
};
/**

*/
export declare const licenseRegistryConfig: {
    readonly address: {
        readonly 1315: "0x529a750E02d8E2f15649c13D69a465286a780e24";
        readonly 1514: "0x529a750E02d8E2f15649c13D69a465286a780e24";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "groupIpAssetRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensingModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipGraphAcl";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "LicenseRegistry__AddParentIpToIPGraphFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__CallFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__CallerNotLicensingModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__CannotAddIpWithExpirationToGroup";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__DerivativeAlreadyRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__DerivativeIpAlreadyHasChild";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__DerivativeIpAlreadyHasLicense";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__DerivativeIsParent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__DuplicateParentIp";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__EmptyGroupCannotMintLicenseToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__GroupCannotHasParentIp";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__GroupIpAlreadyHasLicenseTerms";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipCommercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "groupCommercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "LicenseRegistry__GroupIpCommercialRevShareConfigMustNotLessThanIp";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__GroupMustBeSoleParent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "index";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "length";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseRegistry__IndexOutOfBounds";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "expectGroupRewardPool";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupRewardPool";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__IpExpectGroupRewardPoolNotMatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__IpExpectGroupRewardPoolNotSet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__IpExpired";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseRegistry__IpHasNoGroupLicenseTerms";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseRegistry__IpLicenseDisabled";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "groupHookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "LicenseRegistry__IpLicensingHookDataNotMatchWithGroup";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensingHook";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupLicensingHook";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__IpLicensingHookNotMatchWithGroup";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "groupMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseRegistry__IpMintingFeeNotMatchWithGroup";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseRegistry__LicenseTermsAlreadyAttached";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseRegistry__LicenseTermsCannotAttachToGroupIp";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseRegistry__LicenseTermsNotExists";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseRegistry__LicensorIpHasNoLicenseTerms";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__NotLicenseTemplate";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__ParentIpExpired";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseRegistry__ParentIpHasNoLicenseTerms";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__ParentIpIsEmptyGroup";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__ParentIpNotRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__ParentIpTagged";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__ParentIpUnmatchedLicenseTemplate";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ancestors";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxAncestors";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseRegistry__TooManyAncestors";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parents";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxParents";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseRegistry__TooManyParents";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "newLicenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__UnmatchedLicenseTemplate";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__UnregisteredLicenseTemplate";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__ZeroDisputeModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__ZeroGroupIpRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__ZeroIPGraphACL";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__ZeroLicenseTemplate";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__ZeroLicensingModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__DerivativesCannotAddLicenseTerms";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicensingModule__LicenseTermsNotFound";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__CallFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "DefaultLicenseTermsSet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "expireTime";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "ExpirationTimeSet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "LicenseTemplateRegistered";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "licensingConfig";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "disabled";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "expectMinimumGroupRewardShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "expectGroupRewardPool";
                readonly internalType: "address";
                readonly type: "address";
            }];
            readonly indexed: false;
        }];
        readonly name: "LicensingConfigSetForLicense";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DISPUTE_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IDisputeModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "EXPIRATION_TIME";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "GROUP_IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IGroupIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_GRAPH";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_GRAPH_ACL";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IPGraphACL";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSING_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicensingModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MAX_ANCESTORS";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MAX_PARENTS";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "attachLicenseTermsToIp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "exists";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getAncestorsCount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "index";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getAttachedLicenseTerms";
        readonly outputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getAttachedLicenseTermsCount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getDefaultLicenseTerms";
        readonly outputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "index";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getDerivativeIp";
        readonly outputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getDerivativeIpCount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getExpireTime";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getLicensingConfig";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "disabled";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "expectMinimumGroupRewardShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "expectGroupRewardPool";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "index";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getParentIp";
        readonly outputs: readonly [{
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getParentIpCount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getParentLicenseTerms";
        readonly outputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getRoyaltyPercent";
        readonly outputs: readonly [{
            readonly name: "royaltyPercent";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "hasDerivativeIps";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "hasIpAttachedLicenseTerms";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "isDefaultLicense";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isDerivativeIp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isExpiredNow";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isParentIp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isRegisteredLicenseTemplate";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "isUsingLicenseToken";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "registerDerivativeIp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "registerLicenseTemplate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newLicenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "newLicenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultLicenseTerms";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingConfig";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "disabled";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "expectMinimumGroupRewardShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "expectGroupRewardPool";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly name: "setLicensingConfigForLicense";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupRewardPool";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupLicenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupLicenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "verifyGroupAddIp";
        readonly outputs: readonly [{
            readonly name: "ipLicensingConfig";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "disabled";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "expectMinimumGroupRewardShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "expectGroupRewardPool";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licensorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "isMintedByIpOwner";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "verifyMintLicenseToken";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "disabled";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "expectMinimumGroupRewardShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "expectGroupRewardPool";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly stateMutability: "view";
    }];
};
/**

*/
export declare const licenseTokenAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "licensingModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC721EnumerableForbiddenBatchMint";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721IncorrectOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC721InsufficientApproval";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "approver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidApprover";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidOperator";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidReceiver";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidSender";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC721NonexistentToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "index";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC721OutOfBoundsIndex";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "anotherLicenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseToken__AllLicenseTokensMustFromSameLicenseTemplate";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "childIpIp";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "actualTokenOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseToken__CallerAndChildIPNotTokenOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseToken__CallerNotLicensingModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseToken__ChildIPAlreadyHasBeenMintedLicenseTokens";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "commercialRevenueShare";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "maxRevenueShare";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseToken__CommercialRevenueShareExceedMaxRevenueShare";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "invalidRoyaltyPercent";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseToken__InvalidRoyaltyPercent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseToken__NotTransferable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseToken__RevokedLicense";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseToken__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "length";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "StringsInsufficientHexLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "approved";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "Approval";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "ApprovalForAll";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "_fromTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "_toTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "BatchMetadataUpdate";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "minter";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "LicenseTokenMinted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "Transfer";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DISPUTE_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IDisputeModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSING_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicensingModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MAX_COMMERCIAL_REVENUE_SHARE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "holder";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "burnLicenseTokens";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getApproved";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getLicenseTemplate";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getLicenseTermsId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getLicenseTokenMetadata";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct ILicenseToken.LicenseTokenMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "licensorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getLicensorIpId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licensorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getTotalTokensByLicensor";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "imageUrl";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isApprovedForAll";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "isLicenseTokenRevoked";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licensorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "minter";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "maxRevenueShare";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "mintLicenseTokens";
    readonly outputs: readonly [{
        readonly name: "startLicenseTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ownerOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "safeTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "safeTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "setApprovalForAll";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "url";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "setLicensingImageUrl";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "index";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "tokenByIndex";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "index";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "tokenOfOwnerByIndex";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "tokenURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalMintedTokens";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "validateLicenseTokensForDerivative";
    readonly outputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensorIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "commercialRevShares";
        readonly internalType: "uint32[]";
        readonly type: "uint32[]";
    }];
    readonly stateMutability: "view";
}];
/**

*/
export declare const licenseTokenAddress: {
    readonly 1315: "0xFe3838BFb30B34170F00030B52eA4893d8aAC6bC";
    readonly 1514: "0xFe3838BFb30B34170F00030B52eA4893d8aAC6bC";
};
/**

*/
export declare const licenseTokenConfig: {
    readonly address: {
        readonly 1315: "0xFe3838BFb30B34170F00030B52eA4893d8aAC6bC";
        readonly 1514: "0xFe3838BFb30B34170F00030B52eA4893d8aAC6bC";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "licensingModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC721EnumerableForbiddenBatchMint";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721IncorrectOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC721InsufficientApproval";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "approver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidApprover";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidOperator";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidReceiver";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidSender";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC721NonexistentToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "index";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC721OutOfBoundsIndex";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "anotherLicenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseToken__AllLicenseTokensMustFromSameLicenseTemplate";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "childIpIp";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "actualTokenOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseToken__CallerAndChildIPNotTokenOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseToken__CallerNotLicensingModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseToken__ChildIPAlreadyHasBeenMintedLicenseTokens";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "commercialRevenueShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "maxRevenueShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseToken__CommercialRevenueShareExceedMaxRevenueShare";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "invalidRoyaltyPercent";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseToken__InvalidRoyaltyPercent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseToken__NotTransferable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseToken__RevokedLicense";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseToken__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "length";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "StringsInsufficientHexLength";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "approved";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "Approval";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "ApprovalForAll";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "_fromTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "_toTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "BatchMetadataUpdate";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "minter";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "LicenseTokenMinted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "Transfer";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DISPUTE_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IDisputeModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSING_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicensingModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MAX_COMMERCIAL_REVENUE_SHARE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "holder";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly name: "burnLicenseTokens";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getApproved";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getLicenseTemplate";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getLicenseTermsId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getLicenseTokenMetadata";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct ILicenseToken.LicenseTokenMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "licensorIpId";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "licenseTemplate";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "licenseTermsId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getLicensorIpId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licensorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getTotalTokensByLicensor";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "imageUrl";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isApprovedForAll";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "isLicenseTokenRevoked";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licensorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "minter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "maxRevenueShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "mintLicenseTokens";
        readonly outputs: readonly [{
            readonly name: "startLicenseTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ownerOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "setApprovalForAll";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "url";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "setLicensingImageUrl";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "index";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "tokenByIndex";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "index";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "tokenOfOwnerByIndex";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "id";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "tokenURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalMintedTokens";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly name: "validateLicenseTokensForDerivative";
        readonly outputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensorIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "commercialRevShares";
            readonly internalType: "uint32[]";
            readonly type: "uint32[]";
        }];
        readonly stateMutability: "view";
    }];
};
/**

*/
export declare const licensingModuleAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "accessController";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAccountRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "moduleRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseToken";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipGraphAcl";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessControlled__NotIpAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessControlled__ZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExpectedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseRegistry__LicenseTemplateCannotBeZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__UnregisteredLicenseTemplate";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "newRoyaltyPercent";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "LicensingModule__CurrentLicenseNotAllowOverrideRoyaltyPercent";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicensingModule__DerivativeAlreadyHasBeenMintedLicenseTokens";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__DisputedIpId";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "revenueShare";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "maxRevenueShare";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "LicensingModule__ExceedMaxRevenueShare";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicensingModule__GroupIpCannotChangeHookData";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicensingModule__GroupIpCannotChangeIsSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicensingModule__GroupIpCannotChangeLicensingHook";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicensingModule__GroupIpCannotChangeMintingFee";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "newRoyaltyPercent";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "oldRoyaltyPercent";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "LicensingModule__GroupIpCannotDecreaseRoyalty";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicensingModule__GroupIpCannotSetExpectGroupRewardPool";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicensingModule__InvalidLicenseTermsId";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "hook";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicensingModule__InvalidLicensingHook";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licensorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicensingModule__LicenseDenyMintLicenseToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicensingModule__LicenseDisabled";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicensingModule__LicenseNotCompatibleForDerivative";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipLength";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licenseTermsLength";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicensingModule__LicenseTermsLengthMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "LicensingModule__LicenseTokenNotCompatibleForDerivative";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licensingConfigMintingFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licenseTermsMintingFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicensingModule__LicensingConfigMintingFeeBelowLicenseTerms";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__LicensorIpNotRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__MintAmountZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "mintingFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxMintingFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicensingModule__MintingFeeExceedMaxMintingFee";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__MintingFeeRequiresRoyaltyPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__NoLicenseToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__NoParentIp";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__ReceiverZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "royaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "anotherRoyaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicensingModule__RoyaltyPolicyMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licensorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ancestors";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxAncestors";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicensingModule__TooManyAncestorsForMintingLicenseTokenAllowRegisterDerivative";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__ZeroDisputeModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__ZeroIPGraphACL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__ZeroLicenseRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__ZeroLicenseTemplate";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__ZeroLicenseToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__ZeroModuleRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__ZeroRoyaltyModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "licenseTokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }, {
        readonly name: "parentIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
        readonly indexed: false;
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "DerivativeRegistered";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "LicenseTermsAttached";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "licensorIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "startLicenseTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "LicenseTokensMinted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Paused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Unpaused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ACCESS_CONTROLLER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IAccessController";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DISPUTE_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IDisputeModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_GRAPH_ACL";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IPGraphACL";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_NFT";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseToken";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MODULE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IModuleRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract RoyaltyModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "__ProtocolPausable_init";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "attachDefaultLicenseTerms";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "attachLicenseTerms";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licensorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyContext";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "maxMintingFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxRevenueShare";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "mintLicenseTokens";
    readonly outputs: readonly [{
        readonly name: "startLicenseTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "paused";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licensorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyContext";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "predictMintingLicenseFee";
    readonly outputs: readonly [{
        readonly name: "currencyToken";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parentIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyContext";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "maxMintingFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxRts";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "maxRevenueShare";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "registerDerivative";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "royaltyContext";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "maxRts";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "registerDerivativeWithLicenseTokens";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licensingConfig";
        readonly internalType: "struct Licensing.LicensingConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "isSet";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingHook";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "disabled";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "expectMinimumGroupRewardShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "expectGroupRewardPool";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "setLicensingConfig";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "unpause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**

*/
export declare const licensingModuleAddress: {
    readonly 1315: "0x04fbd8a2e56dd85CFD5500A4A4DfA955B9f1dE6f";
    readonly 1514: "0x04fbd8a2e56dd85CFD5500A4A4DfA955B9f1dE6f";
};
/**

*/
export declare const licensingModuleConfig: {
    readonly address: {
        readonly 1315: "0x04fbd8a2e56dd85CFD5500A4A4DfA955B9f1dE6f";
        readonly 1514: "0x04fbd8a2e56dd85CFD5500A4A4DfA955B9f1dE6f";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "accessController";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAccountRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "moduleRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseToken";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipGraphAcl";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessControlled__NotIpAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessControlled__ZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__LicenseTemplateCannotBeZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__UnregisteredLicenseTemplate";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "newRoyaltyPercent";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "LicensingModule__CurrentLicenseNotAllowOverrideRoyaltyPercent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicensingModule__DerivativeAlreadyHasBeenMintedLicenseTokens";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__DisputedIpId";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "revenueShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "maxRevenueShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "LicensingModule__ExceedMaxRevenueShare";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicensingModule__GroupIpCannotChangeHookData";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicensingModule__GroupIpCannotChangeIsSet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicensingModule__GroupIpCannotChangeLicensingHook";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicensingModule__GroupIpCannotChangeMintingFee";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "newRoyaltyPercent";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "oldRoyaltyPercent";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "LicensingModule__GroupIpCannotDecreaseRoyalty";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicensingModule__GroupIpCannotSetExpectGroupRewardPool";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicensingModule__InvalidLicenseTermsId";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "hook";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicensingModule__InvalidLicensingHook";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicensingModule__LicenseDenyMintLicenseToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicensingModule__LicenseDisabled";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicensingModule__LicenseNotCompatibleForDerivative";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipLength";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licenseTermsLength";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicensingModule__LicenseTermsLengthMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly name: "LicensingModule__LicenseTokenNotCompatibleForDerivative";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingConfigMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licenseTermsMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicensingModule__LicensingConfigMintingFeeBelowLicenseTerms";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__LicensorIpNotRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__MintAmountZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicensingModule__MintingFeeExceedMaxMintingFee";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__MintingFeeRequiresRoyaltyPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__NoLicenseToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__NoParentIp";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ReceiverZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "anotherRoyaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicensingModule__RoyaltyPolicyMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licensorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ancestors";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxAncestors";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicensingModule__TooManyAncestorsForMintingLicenseTokenAllowRegisterDerivative";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ZeroDisputeModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ZeroIPGraphACL";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ZeroLicenseRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ZeroLicenseTemplate";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ZeroLicenseToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ZeroModuleRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ZeroRoyaltyModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "licenseTokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
            readonly indexed: false;
        }, {
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
            readonly indexed: false;
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
            readonly indexed: false;
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "DerivativeRegistered";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "LicenseTermsAttached";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "licensorIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "startLicenseTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "LicenseTokensMinted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Paused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Unpaused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ACCESS_CONTROLLER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IAccessController";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DISPUTE_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IDisputeModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_GRAPH_ACL";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IPGraphACL";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_NFT";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseToken";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MODULE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IModuleRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract RoyaltyModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "__ProtocolPausable_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "attachDefaultLicenseTerms";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "attachLicenseTerms";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licensorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "maxMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxRevenueShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "mintLicenseTokens";
        readonly outputs: readonly [{
            readonly name: "startLicenseTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licensorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "predictMintingLicenseFee";
        readonly outputs: readonly [{
            readonly name: "currencyToken";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "maxMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxRts";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "maxRevenueShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "registerDerivative";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "maxRts";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "registerDerivativeWithLicenseTokens";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingConfig";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "disabled";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "expectMinimumGroupRewardShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "expectGroupRewardPool";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly name: "setLicensingConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**

*/
export declare const mockErc20Abi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "allowance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "needed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC20InsufficientAllowance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "balance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "needed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC20InsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "approver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidApprover";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidReceiver";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidSender";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidSpender";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Approval";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Transfer";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "burn";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "decimals";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "mint";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}];
/**

*/
export declare const mockErc20Address: {
    readonly 1315: "0xF2104833d386a2734a4eB3B8ad6FC6812F29E38E";
    readonly 1514: "0xF2104833d386a2734a4eB3B8ad6FC6812F29E38E";
};
/**

*/
export declare const mockErc20Config: {
    readonly address: {
        readonly 1315: "0xF2104833d386a2734a4eB3B8ad6FC6812F29E38E";
        readonly 1514: "0xF2104833d386a2734a4eB3B8ad6FC6812F29E38E";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "allowance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "needed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC20InsufficientAllowance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "balance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "needed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC20InsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "approver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidApprover";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidReceiver";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidSender";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidSpender";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "Approval";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "Transfer";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "burn";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "mint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }];
};
/**

*/
export declare const moduleRegistryAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__InterfaceIdZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ModuleAddressNotContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ModuleAddressZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ModuleAlreadyRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ModuleNotRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ModuleNotSupportExpectedModuleTypeInterfaceId";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ModuleTypeAlreadyRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ModuleTypeEmptyString";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ModuleTypeNotRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__NameAlreadyRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__NameDoesNotMatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__NameEmptyString";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "module";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "moduleTypeInterfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
        readonly indexed: true;
    }, {
        readonly name: "moduleType";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "ModuleAdded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "module";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "ModuleRemoved";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "getModule";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "moduleAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getModuleType";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "moduleType";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "getModuleTypeInterfaceId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "moduleAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isRegistered";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "moduleAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "registerModule";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "moduleAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "moduleType";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "registerModule";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "registerModuleType";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "removeModule";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "removeModuleType";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**

*/
export declare const moduleRegistryAddress: {
    readonly 1315: "0x022DBAAeA5D8fB31a0Ad793335e39Ced5D631fa5";
    readonly 1514: "0x022DBAAeA5D8fB31a0Ad793335e39Ced5D631fa5";
};
/**

*/
export declare const moduleRegistryConfig: {
    readonly address: {
        readonly 1315: "0x022DBAAeA5D8fB31a0Ad793335e39Ced5D631fa5";
        readonly 1514: "0x022DBAAeA5D8fB31a0Ad793335e39Ced5D631fa5";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__InterfaceIdZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleAddressNotContract";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleAddressZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleAlreadyRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleNotRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleNotSupportExpectedModuleTypeInterfaceId";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleTypeAlreadyRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleTypeEmptyString";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleTypeNotRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__NameAlreadyRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__NameDoesNotMatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__NameEmptyString";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "module";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "moduleTypeInterfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
            readonly indexed: true;
        }, {
            readonly name: "moduleType";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }];
        readonly name: "ModuleAdded";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "module";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "ModuleRemoved";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "getModule";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "moduleAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getModuleType";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "moduleType";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "getModuleTypeInterfaceId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "moduleAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isRegistered";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "moduleAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "registerModule";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "moduleAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "moduleType";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "registerModule";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "registerModuleType";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "removeModule";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "removeModuleType";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**

*/
export declare const multicall3Abi: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "calls";
        readonly internalType: "struct Multicall3.Call[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "callData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "aggregate";
    readonly outputs: readonly [{
        readonly name: "blockNumber";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "returnData";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "calls";
        readonly internalType: "struct Multicall3.Call3[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "allowFailure";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "callData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "aggregate3";
    readonly outputs: readonly [{
        readonly name: "returnData";
        readonly internalType: "struct Multicall3.Result[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "success";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "returnData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "calls";
        readonly internalType: "struct Multicall3.Call3Value[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "allowFailure";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "callData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "aggregate3Value";
    readonly outputs: readonly [{
        readonly name: "returnData";
        readonly internalType: "struct Multicall3.Result[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "success";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "returnData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "calls";
        readonly internalType: "struct Multicall3.Call[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "callData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "blockAndAggregate";
    readonly outputs: readonly [{
        readonly name: "blockNumber";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "blockHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "returnData";
        readonly internalType: "struct Multicall3.Result[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "success";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "returnData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getBasefee";
    readonly outputs: readonly [{
        readonly name: "basefee";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "blockNumber";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getBlockHash";
    readonly outputs: readonly [{
        readonly name: "blockHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getBlockNumber";
    readonly outputs: readonly [{
        readonly name: "blockNumber";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getChainId";
    readonly outputs: readonly [{
        readonly name: "chainid";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getCurrentBlockCoinbase";
    readonly outputs: readonly [{
        readonly name: "coinbase";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getCurrentBlockDifficulty";
    readonly outputs: readonly [{
        readonly name: "difficulty";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getCurrentBlockGasLimit";
    readonly outputs: readonly [{
        readonly name: "gaslimit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getCurrentBlockTimestamp";
    readonly outputs: readonly [{
        readonly name: "timestamp";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "addr";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getEthBalance";
    readonly outputs: readonly [{
        readonly name: "balance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getLastBlockHash";
    readonly outputs: readonly [{
        readonly name: "blockHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "requireSuccess";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "calls";
        readonly internalType: "struct Multicall3.Call[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "callData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "tryAggregate";
    readonly outputs: readonly [{
        readonly name: "returnData";
        readonly internalType: "struct Multicall3.Result[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "success";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "returnData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "requireSuccess";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "calls";
        readonly internalType: "struct Multicall3.Call[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "callData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "tryBlockAndAggregate";
    readonly outputs: readonly [{
        readonly name: "blockNumber";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "blockHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "returnData";
        readonly internalType: "struct Multicall3.Result[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "success";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "returnData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly stateMutability: "payable";
}];
/**

*/
export declare const multicall3Address: {
    readonly 1315: "0xcA11bde05977b3631167028862bE2a173976CA11";
    readonly 1514: "0xcA11bde05977b3631167028862bE2a173976CA11";
};
/**

*/
export declare const multicall3Config: {
    readonly address: {
        readonly 1315: "0xcA11bde05977b3631167028862bE2a173976CA11";
        readonly 1514: "0xcA11bde05977b3631167028862bE2a173976CA11";
    };
    readonly abi: readonly [{
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "calls";
            readonly internalType: "struct Multicall3.Call[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "target";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "callData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "aggregate";
        readonly outputs: readonly [{
            readonly name: "blockNumber";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "returnData";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "calls";
            readonly internalType: "struct Multicall3.Call3[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "target";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "allowFailure";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "callData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "aggregate3";
        readonly outputs: readonly [{
            readonly name: "returnData";
            readonly internalType: "struct Multicall3.Result[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "success";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "returnData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "calls";
            readonly internalType: "struct Multicall3.Call3Value[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "target";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "allowFailure";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "value";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "callData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "aggregate3Value";
        readonly outputs: readonly [{
            readonly name: "returnData";
            readonly internalType: "struct Multicall3.Result[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "success";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "returnData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "calls";
            readonly internalType: "struct Multicall3.Call[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "target";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "callData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "blockAndAggregate";
        readonly outputs: readonly [{
            readonly name: "blockNumber";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "blockHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "returnData";
            readonly internalType: "struct Multicall3.Result[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "success";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "returnData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getBasefee";
        readonly outputs: readonly [{
            readonly name: "basefee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "blockNumber";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getBlockHash";
        readonly outputs: readonly [{
            readonly name: "blockHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getBlockNumber";
        readonly outputs: readonly [{
            readonly name: "blockNumber";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getChainId";
        readonly outputs: readonly [{
            readonly name: "chainid";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getCurrentBlockCoinbase";
        readonly outputs: readonly [{
            readonly name: "coinbase";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getCurrentBlockDifficulty";
        readonly outputs: readonly [{
            readonly name: "difficulty";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getCurrentBlockGasLimit";
        readonly outputs: readonly [{
            readonly name: "gaslimit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getCurrentBlockTimestamp";
        readonly outputs: readonly [{
            readonly name: "timestamp";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "addr";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getEthBalance";
        readonly outputs: readonly [{
            readonly name: "balance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getLastBlockHash";
        readonly outputs: readonly [{
            readonly name: "blockHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "requireSuccess";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "calls";
            readonly internalType: "struct Multicall3.Call[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "target";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "callData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "tryAggregate";
        readonly outputs: readonly [{
            readonly name: "returnData";
            readonly internalType: "struct Multicall3.Result[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "success";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "returnData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "requireSuccess";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "calls";
            readonly internalType: "struct Multicall3.Call[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "target";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "callData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "tryBlockAndAggregate";
        readonly outputs: readonly [{
            readonly name: "blockNumber";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "blockHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "returnData";
            readonly internalType: "struct Multicall3.Result[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "success";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "returnData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly stateMutability: "payable";
    }];
};
/**

*/
export declare const piLicenseTemplateAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "accessController";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAccountRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "moduleRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessControlled__NotIpAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessControlled__ZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__CommercialDisabled_CantAddAttribution";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__CommercialDisabled_CantAddCommercializers";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__CommercialDisabled_CantAddDerivativeRevCeiling";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__CommercialDisabled_CantAddRevCeiling";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__CommercialDisabled_CantAddRevShare";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__CommercialDisabled_CantAddRoyaltyPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__CommercialEnabled_RoyaltyPolicyRequired";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "checker";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "PILicenseTemplate__CommercializerCheckerDoesNotSupportHook";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "commercializerChecker";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "PILicenseTemplate__CommercializerCheckerNotRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__CurrencyTokenNotWhitelisted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__DerivativesDisabled_CantAddApproval";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__DerivativesDisabled_CantAddAttribution";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__DerivativesDisabled_CantAddDerivativeRevCeiling";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__DerivativesDisabled_CantAddReciprocal";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__MintingFeeRequiresRoyaltyPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__RoyaltyPolicyNotWhitelisted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__RoyaltyPolicyRequiresCurrencyToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__ZeroLicenseRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__ZeroRoyaltyModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "DerivativeApproved";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "licenseTerms";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "LicenseTermsRegistered";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ACCESS_CONTROLLER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IAccessController";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MODULE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IModuleRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IRoyaltyModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "TERMS_RENDERER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract PILTermsRenderer";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "allowDerivativeRegistration";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "canAttachToGroupIp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "newRoyaltyPercent";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "canOverrideRoyaltyPercent";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "exists";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "start";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getEarlierExpireTime";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "start";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getExpireTime";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "selectedLicenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getLicenseTerms";
    readonly outputs: readonly [{
        readonly name: "terms";
        readonly internalType: "struct PILTerms";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "defaultMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commercialUse";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commercializerCheckerData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "commercialRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivativesAllowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesApproval";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesReciprocal";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativeRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "terms";
        readonly internalType: "struct PILTerms";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "defaultMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commercialUse";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commercializerCheckerData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "commercialRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivativesAllowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesApproval";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesReciprocal";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativeRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly name: "getLicenseTermsId";
    readonly outputs: readonly [{
        readonly name: "selectedLicenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getLicenseTermsURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getMetadataURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getRoyaltyPolicy";
    readonly outputs: readonly [{
        readonly name: "royaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyPercent";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "mintingFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "metadataURI";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isDerivativeApproved";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "isLicenseTransferable";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "terms";
        readonly internalType: "struct PILTerms";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "defaultMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commercialUse";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commercializerCheckerData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "commercialRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivativesAllowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesApproval";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesReciprocal";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativeRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly name: "registerLicenseTerms";
    readonly outputs: readonly [{
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "setApproval";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "toJson";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalRegisteredLicenseTerms";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "verifyCompatibleLicenses";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licensee";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "verifyMintLicenseToken";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licensee";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "verifyRegisterDerivative";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parentIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "verifyRegisterDerivativeForAllParents";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}];
/**

*/
export declare const piLicenseTemplateAddress: {
    readonly 1315: "0x2E896b0b2Fdb7457499B56AAaA4AE55BCB4Cd316";
    readonly 1514: "0x2E896b0b2Fdb7457499B56AAaA4AE55BCB4Cd316";
};
/**

*/
export declare const piLicenseTemplateConfig: {
    readonly address: {
        readonly 1315: "0x2E896b0b2Fdb7457499B56AAaA4AE55BCB4Cd316";
        readonly 1514: "0x2E896b0b2Fdb7457499B56AAaA4AE55BCB4Cd316";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "accessController";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAccountRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "moduleRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessControlled__NotIpAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessControlled__ZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__CommercialDisabled_CantAddAttribution";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__CommercialDisabled_CantAddCommercializers";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__CommercialDisabled_CantAddDerivativeRevCeiling";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__CommercialDisabled_CantAddRevCeiling";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__CommercialDisabled_CantAddRevShare";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__CommercialDisabled_CantAddRoyaltyPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__CommercialEnabled_RoyaltyPolicyRequired";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "checker";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "PILicenseTemplate__CommercializerCheckerDoesNotSupportHook";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "PILicenseTemplate__CommercializerCheckerNotRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__CurrencyTokenNotWhitelisted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__DerivativesDisabled_CantAddApproval";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__DerivativesDisabled_CantAddAttribution";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__DerivativesDisabled_CantAddDerivativeRevCeiling";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__DerivativesDisabled_CantAddReciprocal";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__MintingFeeRequiresRoyaltyPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__RoyaltyPolicyNotWhitelisted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__RoyaltyPolicyRequiresCurrencyToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__ZeroLicenseRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__ZeroRoyaltyModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "DerivativeApproved";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "licenseTerms";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "LicenseTermsRegistered";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ACCESS_CONTROLLER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IAccessController";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MODULE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IModuleRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IRoyaltyModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "TERMS_RENDERER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract PILTermsRenderer";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "allowDerivativeRegistration";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "canAttachToGroupIp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "newRoyaltyPercent";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "canOverrideRoyaltyPercent";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "exists";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "start";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getEarlierExpireTime";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "start";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getExpireTime";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "selectedLicenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getLicenseTerms";
        readonly outputs: readonly [{
            readonly name: "terms";
            readonly internalType: "struct PILTerms";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "defaultMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "terms";
            readonly internalType: "struct PILTerms";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "defaultMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly name: "getLicenseTermsId";
        readonly outputs: readonly [{
            readonly name: "selectedLicenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getLicenseTermsURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getMetadataURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getRoyaltyPolicy";
        readonly outputs: readonly [{
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyPercent";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "metadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isDerivativeApproved";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "isLicenseTransferable";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "terms";
            readonly internalType: "struct PILTerms";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "defaultMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly name: "registerLicenseTerms";
        readonly outputs: readonly [{
            readonly name: "id";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "setApproval";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "toJson";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalRegisteredLicenseTerms";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly name: "verifyCompatibleLicenses";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensee";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "verifyMintLicenseToken";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensee";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "verifyRegisterDerivative";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "verifyRegisterDerivativeForAllParents";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }];
};
/**

*/
export declare const registrationWorkflowsAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "accessController";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "coreMetadataModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAssetRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensingModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "pilTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "RegistrationWorkflows__CallerNotSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RegistrationWorkflows__ZeroAddressParam";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Workflow__CallerNotAuthorizedToMint";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "CollectionCreated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ACCESS_CONTROLLER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IAccessController";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "CORE_METADATA_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ICoreMetadataModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSING_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicensingModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PIL_TEMPLATE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IPILicenseTemplate";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spgNftInitParams";
        readonly internalType: "struct ISPGNFT.InitParams";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "baseURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "mintFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "mintFeeToken";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintFeeRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintOpen";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "isPublicMinting";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
    readonly name: "createCollection";
    readonly outputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "allowDuplicates";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "mintAndRegisterIp";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }];
    readonly name: "mintAndRegisterIp_deprecated";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "multicall";
    readonly outputs: readonly [{
        readonly name: "results";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC721Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "sigMetadata";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerIp";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newNftContractBeacon";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setNftContractBeacon";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "upgradeCollections";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**

*/
export declare const registrationWorkflowsAddress: {
    readonly 1315: "0xbe39E1C756e921BD25DF86e7AAa31106d1eb0424";
    readonly 1514: "0xbe39E1C756e921BD25DF86e7AAa31106d1eb0424";
};
/**

*/
export declare const registrationWorkflowsConfig: {
    readonly address: {
        readonly 1315: "0xbe39E1C756e921BD25DF86e7AAa31106d1eb0424";
        readonly 1514: "0xbe39E1C756e921BD25DF86e7AAa31106d1eb0424";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "accessController";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "coreMetadataModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAssetRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensingModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "pilTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "RegistrationWorkflows__CallerNotSigner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RegistrationWorkflows__ZeroAddressParam";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Workflow__CallerNotAuthorizedToMint";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "CollectionCreated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ACCESS_CONTROLLER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IAccessController";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "CORE_METADATA_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ICoreMetadataModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSING_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicensingModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "PIL_TEMPLATE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IPILicenseTemplate";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spgNftInitParams";
            readonly internalType: "struct ISPGNFT.InitParams";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "name";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "symbol";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "baseURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "contractURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "maxSupply";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "mintFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "mintFeeToken";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "mintFeeRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "owner";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "mintOpen";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "isPublicMinting";
                readonly internalType: "bool";
                readonly type: "bool";
            }];
        }];
        readonly name: "createCollection";
        readonly outputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "allowDuplicates";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "mintAndRegisterIp";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }];
        readonly name: "mintAndRegisterIp_deprecated";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly name: "multicall";
        readonly outputs: readonly [{
            readonly name: "results";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC721Received";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "sigMetadata";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerIp";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newNftContractBeacon";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setNftContractBeacon";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "upgradeCollections";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**

*/
export declare const royaltyModuleAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "licensingModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAssetRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipGraphAcl";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExpectedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__AboveAccumulatedRoyaltyPoliciesLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__AboveMaxPercent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__AboveMaxRts";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__CallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "groupId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "rewardPool";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "RoyaltyModule__GroupRewardPoolNotWhitelisted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__InvalidExternalRoyaltyPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__IpExpired";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__IpIsTagged";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__NoParentsOnLinking";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__NotAllowedCaller";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__NotWhitelistedOrRegisteredRoyaltyPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__NotWhitelistedRoyaltyToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__PaymentAmountIsTooLow";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__PolicyAlreadyRegisteredAsExternalRoyaltyPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__PolicyAlreadyWhitelistedOrRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__UnlinkableToParents";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroAccumulatedRoyaltyPoliciesLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroAmount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroDisputeModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroIpAssetRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroIpGraphAcl";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroLicenseRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroLicensingModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroParentIpId";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroReceiverVault";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroRoyaltyPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroRoyaltyToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroTreasury";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "VaultController__ZeroIpRoyaltyVaultBeacon";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "externalRoyaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "ExternalRoyaltyPolicyRegistered";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "ipRoyaltyVault";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "IpRoyaltyVaultDeployed";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "receiverIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "payerAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "amountAfterFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "LicenseMintingFeePaid";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "royaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "licensePercent";
        readonly internalType: "uint32";
        readonly type: "uint32";
        readonly indexed: false;
    }, {
        readonly name: "externalData";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "LicensedWithRoyalty";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "parentIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
        readonly indexed: false;
    }, {
        readonly name: "licenseRoyaltyPolicies";
        readonly internalType: "address[]";
        readonly type: "address[]";
        readonly indexed: false;
    }, {
        readonly name: "licensesPercent";
        readonly internalType: "uint32[]";
        readonly type: "uint32[]";
        readonly indexed: false;
    }, {
        readonly name: "externalData";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "LinkedToParents";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Paused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "royaltyFeePercent";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RoyaltyFeePercentSet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "accumulatedRoyaltyPoliciesLimit";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RoyaltyLimitsUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "receiverIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "payerIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "amountAfterFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RoyaltyPaid";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "royaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "RoyaltyPolicyWhitelistUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "RoyaltyTokenWhitelistUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "treasury";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "TreasurySet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Unpaused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DISPUTE_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IDisputeModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IGroupIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_GRAPH";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_GRAPH_ACL";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IPGraphACL";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSING_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicensingModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MAX_PERCENT";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "__ProtocolPausable_init";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "accumulatedRoyaltyPolicies";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "globalRoyaltyStack";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ancestorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "hasAncestorIp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "accumulatedRoyaltyPoliciesLimit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ipRoyaltyVaultBeacon";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ipRoyaltyVaults";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipRoyaltyVault";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isIpRoyaltyVault";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "externalRoyaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isRegisteredExternalRoyaltyPolicy";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "royaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isWhitelistedRoyaltyPolicy";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isWhitelistedRoyaltyToken";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "maxAccumulatedRoyaltyPolicies";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "maxAncestors";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "maxParents";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "maxPercent";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensePercent";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "externalData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onLicenseMinting";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parentIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "licenseRoyaltyPolicies";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "licensesPercent";
        readonly internalType: "uint32[]";
        readonly type: "uint32[]";
    }, {
        readonly name: "externalData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "maxRts";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "onLinkToParents";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "paused";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "receiverIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "payerAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "payLicenseMintingFee";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "receiverIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "payerIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "payRoyaltyOnBehalf";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "externalRoyaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "registerExternalRoyaltyPolicy";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "royaltyFeePercent";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "beacon";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setIpRoyaltyVaultBeacon";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "royaltyFeePercent";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "setRoyaltyFeePercent";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accumulatedRoyaltyPoliciesLimit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "setRoyaltyLimits";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "treasury";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setTreasury";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "totalRevenueTokensAccounted";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "totalRevenueTokensReceived";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "treasury";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "unpause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newVault";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "upgradeVaults";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "royaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "whitelistRoyaltyPolicy";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "whitelistRoyaltyToken";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
/**

*/
export declare const royaltyModuleAddress: {
    readonly 1315: "0xD2f60c40fEbccf6311f8B47c4f2Ec6b040400086";
    readonly 1514: "0xD2f60c40fEbccf6311f8B47c4f2Ec6b040400086";
};
/**

*/
export declare const royaltyModuleConfig: {
    readonly address: {
        readonly 1315: "0xD2f60c40fEbccf6311f8B47c4f2Ec6b040400086";
        readonly 1514: "0xD2f60c40fEbccf6311f8B47c4f2Ec6b040400086";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "licensingModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAssetRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipGraphAcl";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__AboveAccumulatedRoyaltyPoliciesLimit";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__AboveMaxPercent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__AboveMaxRts";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__CallFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "groupId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "rewardPool";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "RoyaltyModule__GroupRewardPoolNotWhitelisted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__InvalidExternalRoyaltyPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__IpExpired";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__IpIsTagged";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__NoParentsOnLinking";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__NotAllowedCaller";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__NotWhitelistedOrRegisteredRoyaltyPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__NotWhitelistedRoyaltyToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__PaymentAmountIsTooLow";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__PolicyAlreadyRegisteredAsExternalRoyaltyPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__PolicyAlreadyWhitelistedOrRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__UnlinkableToParents";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroAccumulatedRoyaltyPoliciesLimit";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroAmount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroDisputeModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroIpAssetRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroIpGraphAcl";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroLicenseRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroLicensingModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroParentIpId";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroReceiverVault";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroRoyaltyPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroRoyaltyToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroTreasury";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "VaultController__ZeroIpRoyaltyVaultBeacon";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "externalRoyaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "ExternalRoyaltyPolicyRegistered";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "ipRoyaltyVault";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "IpRoyaltyVaultDeployed";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "receiverIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "payerAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "amountAfterFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "LicenseMintingFeePaid";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "licensePercent";
            readonly internalType: "uint32";
            readonly type: "uint32";
            readonly indexed: false;
        }, {
            readonly name: "externalData";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "LicensedWithRoyalty";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
            readonly indexed: false;
        }, {
            readonly name: "licenseRoyaltyPolicies";
            readonly internalType: "address[]";
            readonly type: "address[]";
            readonly indexed: false;
        }, {
            readonly name: "licensesPercent";
            readonly internalType: "uint32[]";
            readonly type: "uint32[]";
            readonly indexed: false;
        }, {
            readonly name: "externalData";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "LinkedToParents";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Paused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "royaltyFeePercent";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RoyaltyFeePercentSet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "accumulatedRoyaltyPoliciesLimit";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RoyaltyLimitsUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "receiverIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "payerIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "amountAfterFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RoyaltyPaid";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "RoyaltyPolicyWhitelistUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "RoyaltyTokenWhitelistUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "treasury";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "TreasurySet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Unpaused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DISPUTE_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IDisputeModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IGroupIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_GRAPH";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_GRAPH_ACL";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IPGraphACL";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSING_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicensingModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MAX_PERCENT";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "__ProtocolPausable_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "accumulatedRoyaltyPolicies";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "globalRoyaltyStack";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ancestorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "hasAncestorIp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "accumulatedRoyaltyPoliciesLimit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ipRoyaltyVaultBeacon";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ipRoyaltyVaults";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipRoyaltyVault";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isIpRoyaltyVault";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "externalRoyaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isRegisteredExternalRoyaltyPolicy";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isWhitelistedRoyaltyPolicy";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isWhitelistedRoyaltyToken";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "maxAccumulatedRoyaltyPolicies";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "maxAncestors";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "maxParents";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "maxPercent";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensePercent";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "externalData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onLicenseMinting";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseRoyaltyPolicies";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licensesPercent";
            readonly internalType: "uint32[]";
            readonly type: "uint32[]";
        }, {
            readonly name: "externalData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "maxRts";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "onLinkToParents";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "receiverIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "payerAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "payLicenseMintingFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "receiverIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "payerIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "payRoyaltyOnBehalf";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "externalRoyaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "registerExternalRoyaltyPolicy";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "royaltyFeePercent";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "beacon";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setIpRoyaltyVaultBeacon";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "royaltyFeePercent";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "setRoyaltyFeePercent";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accumulatedRoyaltyPoliciesLimit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "setRoyaltyLimits";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "treasury";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setTreasury";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "totalRevenueTokensAccounted";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "totalRevenueTokensReceived";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newVault";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "upgradeVaults";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "whitelistRoyaltyPolicy";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "whitelistRoyaltyToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
/**

*/
export declare const royaltyPolicyLapAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "royaltyModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipGraphAcl";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExpectedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__AboveMaxPercent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__CallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__NotRoyaltyModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__ZeroClaimableRoyalty";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__ZeroIPGraphACL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__ZeroRoyaltyModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Paused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "ancestorIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RevenueTransferredToVault";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Unpaused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_GRAPH";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_GRAPH_ACL";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IPGraphACL";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IRoyaltyModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "__ProtocolPausable_init";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ancestorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getPolicyRoyalty";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getPolicyRoyaltyStack";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensePercent";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "getPolicyRtsRequiredToLink";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ancestorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getTransferredTokens";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isSupportGroup";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensePercent";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onLicenseMinting";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parentIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "licenseRoyaltyPolicies";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "licensesPercent";
        readonly internalType: "uint32[]";
        readonly type: "uint32[]";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onLinkToParents";
    readonly outputs: readonly [{
        readonly name: "newRoyaltyStackLAP";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "paused";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ancestorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferToVault";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "unpause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**

*/
export declare const royaltyPolicyLapAddress: {
    readonly 1315: "0xBe54FB168b3c982b7AaE60dB6CF75Bd8447b390E";
    readonly 1514: "0xBe54FB168b3c982b7AaE60dB6CF75Bd8447b390E";
};
/**

*/
export declare const royaltyPolicyLapConfig: {
    readonly address: {
        readonly 1315: "0xBe54FB168b3c982b7AaE60dB6CF75Bd8447b390E";
        readonly 1514: "0xBe54FB168b3c982b7AaE60dB6CF75Bd8447b390E";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "royaltyModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipGraphAcl";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__AboveMaxPercent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__CallFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__NotRoyaltyModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__ZeroClaimableRoyalty";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__ZeroIPGraphACL";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__ZeroRoyaltyModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Paused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "ancestorIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RevenueTransferredToVault";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Unpaused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_GRAPH";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_GRAPH_ACL";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IPGraphACL";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IRoyaltyModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "__ProtocolPausable_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ancestorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getPolicyRoyalty";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getPolicyRoyaltyStack";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensePercent";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "getPolicyRtsRequiredToLink";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ancestorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getTransferredTokens";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isSupportGroup";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensePercent";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onLicenseMinting";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseRoyaltyPolicies";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licensesPercent";
            readonly internalType: "uint32[]";
            readonly type: "uint32[]";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onLinkToParents";
        readonly outputs: readonly [{
            readonly name: "newRoyaltyStackLAP";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ancestorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferToVault";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**

*/
export declare const royaltyPolicyLrpAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "royaltyModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyPolicyLAP";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipGraphAcl";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExpectedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLRP__AboveMaxPercent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLRP__CallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLRP__NotRoyaltyModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLRP__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLRP__ZeroClaimableRoyalty";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLRP__ZeroIPGraphACL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLRP__ZeroRoyaltyModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLRP__ZeroRoyaltyPolicyLAP";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Paused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "ancestorIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RevenueTransferredToVault";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Unpaused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_GRAPH";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_GRAPH_ACL";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IPGraphACL";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IRoyaltyModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_POLICY_LAP";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IGraphAwareRoyaltyPolicy";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "__ProtocolPausable_init";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ancestorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getPolicyRoyalty";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getPolicyRoyaltyStack";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensePercent";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "getPolicyRtsRequiredToLink";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ancestorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getTransferredTokens";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isSupportGroup";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensePercent";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onLicenseMinting";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parentIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "licenseRoyaltyPolicies";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "licensesPercent";
        readonly internalType: "uint32[]";
        readonly type: "uint32[]";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onLinkToParents";
    readonly outputs: readonly [{
        readonly name: "newRoyaltyStackLRP";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "paused";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ancestorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferToVault";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "unpause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**

*/
export declare const royaltyPolicyLrpAddress: {
    readonly 1315: "0x9156e603C949481883B1d3355c6f1132D191fC41";
    readonly 1514: "0x9156e603C949481883B1d3355c6f1132D191fC41";
};
/**

*/
export declare const royaltyPolicyLrpConfig: {
    readonly address: {
        readonly 1315: "0x9156e603C949481883B1d3355c6f1132D191fC41";
        readonly 1514: "0x9156e603C949481883B1d3355c6f1132D191fC41";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "royaltyModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyPolicyLAP";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipGraphAcl";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLRP__AboveMaxPercent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLRP__CallFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLRP__NotRoyaltyModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLRP__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLRP__ZeroClaimableRoyalty";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLRP__ZeroIPGraphACL";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLRP__ZeroRoyaltyModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLRP__ZeroRoyaltyPolicyLAP";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Paused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "ancestorIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RevenueTransferredToVault";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Unpaused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_GRAPH";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_GRAPH_ACL";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IPGraphACL";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IRoyaltyModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_POLICY_LAP";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IGraphAwareRoyaltyPolicy";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "__ProtocolPausable_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ancestorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getPolicyRoyalty";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getPolicyRoyaltyStack";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensePercent";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "getPolicyRtsRequiredToLink";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ancestorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getTransferredTokens";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isSupportGroup";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensePercent";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onLicenseMinting";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseRoyaltyPolicies";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licensesPercent";
            readonly internalType: "uint32[]";
            readonly type: "uint32[]";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onLinkToParents";
        readonly outputs: readonly [{
            readonly name: "newRoyaltyStackLRP";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ancestorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferToVault";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**

*/
export declare const royaltyTokenDistributionWorkflowsAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "accessController";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "coreMetadataModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAssetRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensingModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "pilTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyPolicyLAP";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "wip";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "RoyaltyTokenDistributionWorkflows__CallerNotSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyTokenDistributionWorkflows__NoLicenseTermsData";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyTokenDistributionWorkflows__RoyaltyVaultNotDeployed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "totalShares";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "ipAccountBalance";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "RoyaltyTokenDistributionWorkflows__TotalSharesExceedsIPAccountBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyTokenDistributionWorkflows__ZeroAddressParam";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Workflow__CallerNotAuthorizedToMint";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ACCESS_CONTROLLER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IAccessController";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "CORE_METADATA_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ICoreMetadataModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSING_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicensingModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PIL_TEMPLATE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IPILicenseTemplate";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IRoyaltyModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_POLICY_LAP";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "WIP";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyShares";
        readonly internalType: "struct WorkflowStructs.RoyaltyShare[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "percentage";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
    }, {
        readonly name: "sigApproveRoyaltyTokens";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "distributeRoyaltyTokens";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "licenseTermsData";
        readonly internalType: "struct WorkflowStructs.LicenseTermsData[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "terms";
            readonly internalType: "struct PILTerms";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "defaultMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "licensingConfig";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "disabled";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "expectMinimumGroupRewardShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "expectGroupRewardPool";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
    }, {
        readonly name: "royaltyShares";
        readonly internalType: "struct WorkflowStructs.RoyaltyShare[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "percentage";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
    }, {
        readonly name: "allowDuplicates";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "terms";
        readonly internalType: "struct PILTerms[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "defaultMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commercialUse";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commercializerCheckerData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "commercialRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivativesAllowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesApproval";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesReciprocal";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativeRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }, {
        readonly name: "royaltyShares";
        readonly internalType: "struct WorkflowStructs.RoyaltyShare[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "percentage";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
    }];
    readonly name: "mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens_deprecated";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "derivData";
        readonly internalType: "struct WorkflowStructs.MakeDerivative";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "maxMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxRts";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "maxRevenueShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
    }, {
        readonly name: "royaltyShares";
        readonly internalType: "struct WorkflowStructs.RoyaltyShare[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "percentage";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
    }, {
        readonly name: "allowDuplicates";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "multicall";
    readonly outputs: readonly [{
        readonly name: "results";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC721Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "licenseTermsData";
        readonly internalType: "struct WorkflowStructs.LicenseTermsData[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "terms";
            readonly internalType: "struct PILTerms";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "defaultMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "licensingConfig";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "disabled";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "expectMinimumGroupRewardShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "expectGroupRewardPool";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
    }, {
        readonly name: "sigMetadataAndAttachAndConfig";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerIpAndAttachPILTermsAndDeployRoyaltyVault";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "ipRoyaltyVault";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "terms";
        readonly internalType: "struct PILTerms[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "defaultMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commercialUse";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commercializerCheckerData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "commercialRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivativesAllowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesApproval";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesReciprocal";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativeRevCeiling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }, {
        readonly name: "sigMetadata";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "sigAttach";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerIpAndAttachPILTermsAndDeployRoyaltyVault_deprecated";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "ipRoyaltyVault";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ipMetadata";
        readonly internalType: "struct WorkflowStructs.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "ipMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "ipMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "derivData";
        readonly internalType: "struct WorkflowStructs.MakeDerivative";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "maxMintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxRts";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "maxRevenueShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
    }, {
        readonly name: "sigMetadataAndRegister";
        readonly internalType: "struct WorkflowStructs.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerIpAndMakeDerivativeAndDeployRoyaltyVault";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipRoyaltyVault";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**

*/
export declare const royaltyTokenDistributionWorkflowsAddress: {
    readonly 1315: "0xa38f42B8d33809917f23997B8423054aAB97322C";
    readonly 1514: "0xa38f42B8d33809917f23997B8423054aAB97322C";
};
/**

*/
export declare const royaltyTokenDistributionWorkflowsConfig: {
    readonly address: {
        readonly 1315: "0xa38f42B8d33809917f23997B8423054aAB97322C";
        readonly 1514: "0xa38f42B8d33809917f23997B8423054aAB97322C";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "accessController";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "coreMetadataModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAssetRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensingModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "pilTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyPolicyLAP";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "wip";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "RoyaltyTokenDistributionWorkflows__CallerNotSigner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyTokenDistributionWorkflows__NoLicenseTermsData";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyTokenDistributionWorkflows__RoyaltyVaultNotDeployed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "totalShares";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "ipAccountBalance";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "RoyaltyTokenDistributionWorkflows__TotalSharesExceedsIPAccountBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyTokenDistributionWorkflows__ZeroAddressParam";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Workflow__CallerNotAuthorizedToMint";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ACCESS_CONTROLLER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IAccessController";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "CORE_METADATA_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ICoreMetadataModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSING_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicensingModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "PIL_TEMPLATE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IPILicenseTemplate";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IRoyaltyModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_POLICY_LAP";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "WIP";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyShares";
            readonly internalType: "struct WorkflowStructs.RoyaltyShare[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "recipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "percentage";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }];
        }, {
            readonly name: "sigApproveRoyaltyTokens";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "distributeRoyaltyTokens";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "licenseTermsData";
            readonly internalType: "struct WorkflowStructs.LicenseTermsData[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "terms";
                readonly internalType: "struct PILTerms";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "transferable";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "royaltyPolicy";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "defaultMintingFee";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "expiration";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "commercialUse";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "commercialAttribution";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "commercializerChecker";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "commercializerCheckerData";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }, {
                    readonly name: "commercialRevShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "commercialRevCeiling";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "derivativesAllowed";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativesAttribution";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativesApproval";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativesReciprocal";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativeRevCeiling";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "currency";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "uri";
                    readonly internalType: "string";
                    readonly type: "string";
                }];
            }, {
                readonly name: "licensingConfig";
                readonly internalType: "struct Licensing.LicensingConfig";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "isSet";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "mintingFee";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "licensingHook";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "hookData";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }, {
                    readonly name: "commercialRevShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "disabled";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "expectMinimumGroupRewardShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "expectGroupRewardPool";
                    readonly internalType: "address";
                    readonly type: "address";
                }];
            }];
        }, {
            readonly name: "royaltyShares";
            readonly internalType: "struct WorkflowStructs.RoyaltyShare[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "recipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "percentage";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }];
        }, {
            readonly name: "allowDuplicates";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "terms";
            readonly internalType: "struct PILTerms[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "defaultMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "royaltyShares";
            readonly internalType: "struct WorkflowStructs.RoyaltyShare[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "recipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "percentage";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }];
        }];
        readonly name: "mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens_deprecated";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "derivData";
            readonly internalType: "struct WorkflowStructs.MakeDerivative";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "parentIpIds";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }, {
                readonly name: "licenseTemplate";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "licenseTermsIds";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "royaltyContext";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "maxMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxRts";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "maxRevenueShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }];
        }, {
            readonly name: "royaltyShares";
            readonly internalType: "struct WorkflowStructs.RoyaltyShare[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "recipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "percentage";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }];
        }, {
            readonly name: "allowDuplicates";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly name: "multicall";
        readonly outputs: readonly [{
            readonly name: "results";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC721Received";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "licenseTermsData";
            readonly internalType: "struct WorkflowStructs.LicenseTermsData[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "terms";
                readonly internalType: "struct PILTerms";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "transferable";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "royaltyPolicy";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "defaultMintingFee";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "expiration";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "commercialUse";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "commercialAttribution";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "commercializerChecker";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "commercializerCheckerData";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }, {
                    readonly name: "commercialRevShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "commercialRevCeiling";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "derivativesAllowed";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativesAttribution";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativesApproval";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativesReciprocal";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "derivativeRevCeiling";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "currency";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "uri";
                    readonly internalType: "string";
                    readonly type: "string";
                }];
            }, {
                readonly name: "licensingConfig";
                readonly internalType: "struct Licensing.LicensingConfig";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "isSet";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "mintingFee";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "licensingHook";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "hookData";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }, {
                    readonly name: "commercialRevShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "disabled";
                    readonly internalType: "bool";
                    readonly type: "bool";
                }, {
                    readonly name: "expectMinimumGroupRewardShare";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "expectGroupRewardPool";
                    readonly internalType: "address";
                    readonly type: "address";
                }];
            }];
        }, {
            readonly name: "sigMetadataAndAttachAndConfig";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerIpAndAttachPILTermsAndDeployRoyaltyVault";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "ipRoyaltyVault";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "terms";
            readonly internalType: "struct PILTerms[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "defaultMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCeiling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "sigMetadata";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "sigAttach";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerIpAndAttachPILTermsAndDeployRoyaltyVault_deprecated";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "ipRoyaltyVault";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ipMetadata";
            readonly internalType: "struct WorkflowStructs.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "ipMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "ipMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "derivData";
            readonly internalType: "struct WorkflowStructs.MakeDerivative";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "parentIpIds";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }, {
                readonly name: "licenseTemplate";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "licenseTermsIds";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "royaltyContext";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "maxMintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxRts";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "maxRevenueShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }];
        }, {
            readonly name: "sigMetadataAndRegister";
            readonly internalType: "struct WorkflowStructs.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerIpAndMakeDerivativeAndDeployRoyaltyVault";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipRoyaltyVault";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**

*/
export declare const royaltyWorkflowsAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "royaltyModule";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyWorkflows__ZeroAddressParam";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IRoyaltyModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ancestorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "claimer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "childIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "royaltyPolicies";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "currencyTokens";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "claimAllRevenue";
    readonly outputs: readonly [{
        readonly name: "amountsClaimed";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "multicall";
    readonly outputs: readonly [{
        readonly name: "results";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**

*/
export declare const royaltyWorkflowsAddress: {
    readonly 1315: "0x9515faE61E0c0447C6AC6dEe5628A2097aFE1890";
    readonly 1514: "0x9515faE61E0c0447C6AC6dEe5628A2097aFE1890";
};
/**

*/
export declare const royaltyWorkflowsConfig: {
    readonly address: {
        readonly 1315: "0x9515faE61E0c0447C6AC6dEe5628A2097aFE1890";
        readonly 1514: "0x9515faE61E0c0447C6AC6dEe5628A2097aFE1890";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "royaltyModule";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyWorkflows__ZeroAddressParam";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IRoyaltyModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ancestorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "claimer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "childIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "royaltyPolicies";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "currencyTokens";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "claimAllRevenue";
        readonly outputs: readonly [{
            readonly name: "amountsClaimed";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly name: "multicall";
        readonly outputs: readonly [{
            readonly name: "results";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**

*/
export declare const spgnftBeaconAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "implementation_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "initialOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "BeaconInvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "implementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "upgradeTo";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
/**

*/
export declare const spgnftBeaconAddress: {
    readonly 1315: "0xD2926B9ecaE85fF59B6FB0ff02f568a680c01218";
    readonly 1514: "0xD2926B9ecaE85fF59B6FB0ff02f568a680c01218";
};
/**

*/
export declare const spgnftBeaconConfig: {
    readonly address: {
        readonly 1315: "0xD2926B9ecaE85fF59B6FB0ff02f568a680c01218";
        readonly 1514: "0xD2926B9ecaE85fF59B6FB0ff02f568a680c01218";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "implementation_";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "initialOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "BeaconInvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
/**

*/
export declare const spgnftImplAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "derivativeWorkflows";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "groupingWorkflows";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseAttachmentWorkflows";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "registrationWorkflows";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyTokenDistributionWorkflows";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessControlBadConfirmation";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "neededRole";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "AccessControlUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721IncorrectOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC721InsufficientApproval";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "approver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidApprover";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidOperator";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidReceiver";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidSender";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC721NonexistentToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SPGNFT__CallerNotFeeRecipientOrAdmin";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SPGNFT__CallerNotPeripheryContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "spgNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "nftMetadataHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "SPGNFT__DuplicatedNFTMetadataHash";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SPGNFT__MaxSupplyReached";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SPGNFT__MintingClosed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SPGNFT__MintingDenied";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SPGNFT__ZeroAddressParam";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SPGNFT__ZeroMaxSupply";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "approved";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "Approval";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "ApprovalForAll";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "_fromTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "_toTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "BatchMetadataUpdate";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "ContractURIUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "_tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "MetadataUpdate";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "previousAdminRole";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "newAdminRole";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }];
    readonly name: "RoleAdminChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "RoleGranted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "RoleRevoked";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "Transfer";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DEFAULT_ADMIN_ROLE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DERIVATIVE_WORKFLOWS_ADDRESS";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "GROUPING_WORKFLOWS_ADDRESS";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_ATTACHMENT_WORKFLOWS_ADDRESS";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "REGISTRATION_WORKFLOWS_ADDRESS";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_TOKEN_DISTRIBUTION_WORKFLOWS_ADDRESS";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "baseURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getApproved";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "getRoleAdmin";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftMetadataHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "getTokenIdByMetadataHash";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "grantRole";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "hasRole";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "initParams";
        readonly internalType: "struct ISPGNFT.InitParams";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "baseURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "mintFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "mintFeeToken";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintFeeRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintOpen";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "isPublicMinting";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isApprovedForAll";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "nftMetadataURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "nftMetadataHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "allowDuplicates";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "mint";
    readonly outputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "payer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "nftMetadataURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "nftMetadataHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "allowDuplicates";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "mintByPeriphery";
    readonly outputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "mintFee";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "mintFeeRecipient";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "mintFeeToken";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "mintOpen";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ownerOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "publicMinting";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "callerConfirmation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "renounceRole";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "revokeRole";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "safeTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "safeTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "setApprovalForAll";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "baseURI";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "setBaseURI";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractURI";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "setContractURI";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "fee";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "setMintFee";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newFeeRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setMintFeeRecipient";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setMintFeeToken";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "mintOpen";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "setMintOpen";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "isPublicMinting";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "setPublicMinting";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "tokenURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "withdrawToken";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
/**

*/
export declare const spgnftImplAddress: {
    readonly 1315: "0x6Cfa03Bc64B1a76206d0Ea10baDed31D520449F5";
    readonly 1514: "0x6Cfa03Bc64B1a76206d0Ea10baDed31D520449F5";
};
/**

*/
export declare const spgnftImplConfig: {
    readonly address: {
        readonly 1315: "0x6Cfa03Bc64B1a76206d0Ea10baDed31D520449F5";
        readonly 1514: "0x6Cfa03Bc64B1a76206d0Ea10baDed31D520449F5";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "derivativeWorkflows";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "groupingWorkflows";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseAttachmentWorkflows";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "registrationWorkflows";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyTokenDistributionWorkflows";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "neededRole";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721IncorrectOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC721InsufficientApproval";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "approver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidApprover";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidOperator";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidReceiver";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidSender";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC721NonexistentToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SPGNFT__CallerNotFeeRecipientOrAdmin";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SPGNFT__CallerNotPeripheryContract";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "spgNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "SPGNFT__DuplicatedNFTMetadataHash";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SPGNFT__MaxSupplyReached";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SPGNFT__MintingClosed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SPGNFT__MintingDenied";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SPGNFT__ZeroAddressParam";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SPGNFT__ZeroMaxSupply";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "approved";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "Approval";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "ApprovalForAll";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "_fromTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "_toTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "BatchMetadataUpdate";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "ContractURIUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "_tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "MetadataUpdate";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }, {
            readonly name: "previousAdminRole";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }, {
            readonly name: "newAdminRole";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }];
        readonly name: "RoleAdminChanged";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "RoleGranted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "RoleRevoked";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "Transfer";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DERIVATIVE_WORKFLOWS_ADDRESS";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "GROUPING_WORKFLOWS_ADDRESS";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_ATTACHMENT_WORKFLOWS_ADDRESS";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "REGISTRATION_WORKFLOWS_ADDRESS";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_TOKEN_DISTRIBUTION_WORKFLOWS_ADDRESS";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "baseURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getApproved";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "getTokenIdByMetadataHash";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "initParams";
            readonly internalType: "struct ISPGNFT.InitParams";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "name";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "symbol";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "baseURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "contractURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "maxSupply";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "mintFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "mintFeeToken";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "mintFeeRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "owner";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "mintOpen";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "isPublicMinting";
                readonly internalType: "bool";
                readonly type: "bool";
            }];
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isApprovedForAll";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "allowDuplicates";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "mint";
        readonly outputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "payer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "nftMetadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "allowDuplicates";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "mintByPeriphery";
        readonly outputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "mintFee";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "mintFeeRecipient";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "mintFeeToken";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "mintOpen";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ownerOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "publicMinting";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "callerConfirmation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "setApprovalForAll";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "baseURI";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "setBaseURI";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "setContractURI";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "fee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "setMintFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newFeeRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setMintFeeRecipient";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setMintFeeToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "mintOpen";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "setMintOpen";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "isPublicMinting";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "setPublicMinting";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "tokenURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
/**

*/
export declare const wrappedIpAbi: readonly [{
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AllowanceOverflow";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AllowanceUnderflow";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidReceiver";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidSpender";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPTransferFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InsufficientAllowance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidPermit";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Permit2AllowanceIsFixedAtInfinity";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PermitExpired";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TotalSupplyOverflow";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Approval";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Deposit";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Transfer";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Withdrawal";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DOMAIN_SEPARATOR";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "decimals";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "deposit";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "nonces";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "v";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "r";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "s";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "permit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "withdraw";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "receive";
    readonly stateMutability: "payable";
}];
/**

*/
export declare const wrappedIpAddress: {
    readonly 1315: "0x1514000000000000000000000000000000000000";
    readonly 1514: "0x1514000000000000000000000000000000000000";
};
/**

*/
export declare const wrappedIpConfig: {
    readonly address: {
        readonly 1315: "0x1514000000000000000000000000000000000000";
        readonly 1514: "0x1514000000000000000000000000000000000000";
    };
    readonly abi: readonly [{
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AllowanceOverflow";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AllowanceUnderflow";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidReceiver";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidSpender";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPTransferFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InsufficientAllowance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidPermit";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Permit2AllowanceIsFixedAtInfinity";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PermitExpired";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "TotalSupplyOverflow";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "Approval";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "Deposit";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "Transfer";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "Withdrawal";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DOMAIN_SEPARATOR";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "deposit";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "nonces";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "v";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "r";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "s";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "permit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "withdraw";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "receive";
        readonly stateMutability: "payable";
    }];
};
export type EncodedTxData = {
    to: Address;
    data: Hex;
};
export type SimpleWalletClient<TChain extends Chain | undefined = Chain | undefined, TAccount extends Account | undefined = Account | undefined> = {
    account?: TAccount;
    writeContract: <const abi extends Abi | readonly unknown[], functionName extends ContractFunctionName<abi, "payable" | "nonpayable">, args extends ContractFunctionArgs<abi, "payable" | "nonpayable", functionName>, TChainOverride extends Chain | undefined = undefined>(args: WriteContractParameters<abi, functionName, args, TChain, TAccount, TChainOverride>) => Promise<WriteContractReturnType>;
};
/**
 * AccessControllerPermissionSetEvent
 *
 * @param ipAccountOwner address
 * @param ipAccount address
 * @param signer address
 * @param to address
 * @param func bytes4
 * @param permission uint8
 */
export type AccessControllerPermissionSetEvent = {
    ipAccountOwner: Address;
    ipAccount: Address;
    signer: Address;
    to: Address;
    func: Hex;
    permission: number;
};
/**
 * AccessControllerSetAllPermissionsRequest
 *
 * @param ipAccount address
 * @param signer address
 * @param permission uint8
 */
export type AccessControllerSetAllPermissionsRequest = {
    ipAccount: Address;
    signer: Address;
    permission: number;
};
/**
 * AccessControllerSetBatchPermissionsRequest
 *
 * @param permissions tuple[]
 */
export type AccessControllerSetBatchPermissionsRequest = {
    permissions: {
        ipAccount: Address;
        signer: Address;
        to: Address;
        func: Hex;
        permission: number;
    }[];
};
/**
 * AccessControllerSetPermissionRequest
 *
 * @param ipAccount address
 * @param signer address
 * @param to address
 * @param func bytes4
 * @param permission uint8
 */
export type AccessControllerSetPermissionRequest = {
    ipAccount: Address;
    signer: Address;
    to: Address;
    func: Hex;
    permission: number;
};
/**
 * contract AccessController event
 */
export declare class AccessControllerEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event PermissionSet for contract AccessController
     */
    watchPermissionSetEvent(onLogs: (txHash: Hex, ev: Partial<AccessControllerPermissionSetEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event PermissionSet for contract AccessController
     */
    parseTxPermissionSetEvent(txReceipt: TransactionReceipt): Array<AccessControllerPermissionSetEvent>;
}
/**
 * contract AccessController write method
 */
export declare class AccessControllerClient extends AccessControllerEventClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method setAllPermissions for contract AccessController
     *
     * @param request AccessControllerSetAllPermissionsRequest
     * @return Promise<WriteContractReturnType>
     */
    setAllPermissions(request: AccessControllerSetAllPermissionsRequest): Promise<WriteContractReturnType>;
    /**
     * method setAllPermissions for contract AccessController with only encode
     *
     * @param request AccessControllerSetAllPermissionsRequest
     * @return EncodedTxData
     */
    setAllPermissionsEncode(request: AccessControllerSetAllPermissionsRequest): EncodedTxData;
    /**
     * method setBatchPermissions for contract AccessController
     *
     * @param request AccessControllerSetBatchPermissionsRequest
     * @return Promise<WriteContractReturnType>
     */
    setBatchPermissions(request: AccessControllerSetBatchPermissionsRequest): Promise<WriteContractReturnType>;
    /**
     * method setBatchPermissions for contract AccessController with only encode
     *
     * @param request AccessControllerSetBatchPermissionsRequest
     * @return EncodedTxData
     */
    setBatchPermissionsEncode(request: AccessControllerSetBatchPermissionsRequest): EncodedTxData;
    /**
     * method setPermission for contract AccessController
     *
     * @param request AccessControllerSetPermissionRequest
     * @return Promise<WriteContractReturnType>
     */
    setPermission(request: AccessControllerSetPermissionRequest): Promise<WriteContractReturnType>;
    /**
     * method setPermission for contract AccessController with only encode
     *
     * @param request AccessControllerSetPermissionRequest
     * @return EncodedTxData
     */
    setPermissionEncode(request: AccessControllerSetPermissionRequest): EncodedTxData;
}
/**
 * ArbitrationPolicyUmaMaxBondsRequest
 *
 * @param token address
 */
export type ArbitrationPolicyUmaMaxBondsRequest = {
    token: Address;
};
export type ArbitrationPolicyUmaMaxBondsResponse = bigint;
export type ArbitrationPolicyUmaMaxLivenessResponse = bigint;
export type ArbitrationPolicyUmaMinLivenessResponse = bigint;
/**
 * contract ArbitrationPolicyUMA readonly method
 */
export declare class ArbitrationPolicyUmaReadOnlyClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method maxBonds for contract ArbitrationPolicyUMA
     *
     * @param request ArbitrationPolicyUmaMaxBondsRequest
     * @return Promise<ArbitrationPolicyUmaMaxBondsResponse>
     */
    maxBonds(request: ArbitrationPolicyUmaMaxBondsRequest): Promise<ArbitrationPolicyUmaMaxBondsResponse>;
    /**
     * method maxLiveness for contract ArbitrationPolicyUMA
     *
     * @param request ArbitrationPolicyUmaMaxLivenessRequest
     * @return Promise<ArbitrationPolicyUmaMaxLivenessResponse>
     */
    maxLiveness(): Promise<ArbitrationPolicyUmaMaxLivenessResponse>;
    /**
     * method minLiveness for contract ArbitrationPolicyUMA
     *
     * @param request ArbitrationPolicyUmaMinLivenessRequest
     * @return Promise<ArbitrationPolicyUmaMinLivenessResponse>
     */
    minLiveness(): Promise<ArbitrationPolicyUmaMinLivenessResponse>;
}
/**
 * CoreMetadataModuleAuthorityUpdatedEvent
 *
 * @param authority address
 */
export type CoreMetadataModuleAuthorityUpdatedEvent = {
    authority: Address;
};
/**
 * CoreMetadataModuleInitializedEvent
 *
 * @param version uint64
 */
export type CoreMetadataModuleInitializedEvent = {
    version: bigint;
};
/**
 * CoreMetadataModuleMetadataFrozenEvent
 *
 * @param ipId address
 */
export type CoreMetadataModuleMetadataFrozenEvent = {
    ipId: Address;
};
/**
 * CoreMetadataModuleMetadataUriSetEvent
 *
 * @param ipId address
 * @param metadataURI string
 * @param metadataHash bytes32
 */
export type CoreMetadataModuleMetadataUriSetEvent = {
    ipId: Address;
    metadataURI: string;
    metadataHash: Hex;
};
/**
 * CoreMetadataModuleNftTokenUriSetEvent
 *
 * @param ipId address
 * @param nftTokenURI string
 * @param nftMetadataHash bytes32
 */
export type CoreMetadataModuleNftTokenUriSetEvent = {
    ipId: Address;
    nftTokenURI: string;
    nftMetadataHash: Hex;
};
/**
 * CoreMetadataModuleUpgradedEvent
 *
 * @param implementation address
 */
export type CoreMetadataModuleUpgradedEvent = {
    implementation: Address;
};
export type CoreMetadataModuleAccessControllerResponse = Address;
export type CoreMetadataModuleIpAssetRegistryResponse = Address;
export type CoreMetadataModuleUpgradeInterfaceVersionResponse = string;
export type CoreMetadataModuleAuthorityResponse = Address;
export type CoreMetadataModuleIsConsumingScheduledOpResponse = Hex;
/**
 * CoreMetadataModuleIsMetadataFrozenRequest
 *
 * @param ipId address
 */
export type CoreMetadataModuleIsMetadataFrozenRequest = {
    ipId: Address;
};
export type CoreMetadataModuleIsMetadataFrozenResponse = boolean;
export type CoreMetadataModuleNameResponse = string;
export type CoreMetadataModuleProxiableUuidResponse = Hex;
/**
 * CoreMetadataModuleSupportsInterfaceRequest
 *
 * @param interfaceId bytes4
 */
export type CoreMetadataModuleSupportsInterfaceRequest = {
    interfaceId: Hex;
};
export type CoreMetadataModuleSupportsInterfaceResponse = boolean;
/**
 * CoreMetadataModuleFreezeMetadataRequest
 *
 * @param ipId address
 */
export type CoreMetadataModuleFreezeMetadataRequest = {
    ipId: Address;
};
/**
 * CoreMetadataModuleInitializeRequest
 *
 * @param accessManager address
 */
export type CoreMetadataModuleInitializeRequest = {
    accessManager: Address;
};
/**
 * CoreMetadataModuleSetAllRequest
 *
 * @param ipId address
 * @param metadataURI string
 * @param metadataHash bytes32
 * @param nftMetadataHash bytes32
 */
export type CoreMetadataModuleSetAllRequest = {
    ipId: Address;
    metadataURI: string;
    metadataHash: Hex;
    nftMetadataHash: Hex;
};
/**
 * CoreMetadataModuleSetAuthorityRequest
 *
 * @param newAuthority address
 */
export type CoreMetadataModuleSetAuthorityRequest = {
    newAuthority: Address;
};
/**
 * CoreMetadataModuleSetMetadataUriRequest
 *
 * @param ipId address
 * @param metadataURI string
 * @param metadataHash bytes32
 */
export type CoreMetadataModuleSetMetadataUriRequest = {
    ipId: Address;
    metadataURI: string;
    metadataHash: Hex;
};
/**
 * CoreMetadataModuleUpdateNftTokenUriRequest
 *
 * @param ipId address
 * @param nftMetadataHash bytes32
 */
export type CoreMetadataModuleUpdateNftTokenUriRequest = {
    ipId: Address;
    nftMetadataHash: Hex;
};
/**
 * CoreMetadataModuleUpgradeToAndCallRequest
 *
 * @param newImplementation address
 * @param data bytes
 */
export type CoreMetadataModuleUpgradeToAndCallRequest = {
    newImplementation: Address;
    data: Hex;
};
/**
 * contract CoreMetadataModule event
 */
export declare class CoreMetadataModuleEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event AuthorityUpdated for contract CoreMetadataModule
     */
    watchAuthorityUpdatedEvent(onLogs: (txHash: Hex, ev: Partial<CoreMetadataModuleAuthorityUpdatedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event AuthorityUpdated for contract CoreMetadataModule
     */
    parseTxAuthorityUpdatedEvent(txReceipt: TransactionReceipt): Array<CoreMetadataModuleAuthorityUpdatedEvent>;
    /**
     * event Initialized for contract CoreMetadataModule
     */
    watchInitializedEvent(onLogs: (txHash: Hex, ev: Partial<CoreMetadataModuleInitializedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Initialized for contract CoreMetadataModule
     */
    parseTxInitializedEvent(txReceipt: TransactionReceipt): Array<CoreMetadataModuleInitializedEvent>;
    /**
     * event MetadataFrozen for contract CoreMetadataModule
     */
    watchMetadataFrozenEvent(onLogs: (txHash: Hex, ev: Partial<CoreMetadataModuleMetadataFrozenEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event MetadataFrozen for contract CoreMetadataModule
     */
    parseTxMetadataFrozenEvent(txReceipt: TransactionReceipt): Array<CoreMetadataModuleMetadataFrozenEvent>;
    /**
     * event MetadataURISet for contract CoreMetadataModule
     */
    watchMetadataUriSetEvent(onLogs: (txHash: Hex, ev: Partial<CoreMetadataModuleMetadataUriSetEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event MetadataURISet for contract CoreMetadataModule
     */
    parseTxMetadataUriSetEvent(txReceipt: TransactionReceipt): Array<CoreMetadataModuleMetadataUriSetEvent>;
    /**
     * event NFTTokenURISet for contract CoreMetadataModule
     */
    watchNftTokenUriSetEvent(onLogs: (txHash: Hex, ev: Partial<CoreMetadataModuleNftTokenUriSetEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event NFTTokenURISet for contract CoreMetadataModule
     */
    parseTxNftTokenUriSetEvent(txReceipt: TransactionReceipt): Array<CoreMetadataModuleNftTokenUriSetEvent>;
    /**
     * event Upgraded for contract CoreMetadataModule
     */
    watchUpgradedEvent(onLogs: (txHash: Hex, ev: Partial<CoreMetadataModuleUpgradedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Upgraded for contract CoreMetadataModule
     */
    parseTxUpgradedEvent(txReceipt: TransactionReceipt): Array<CoreMetadataModuleUpgradedEvent>;
}
/**
 * contract CoreMetadataModule readonly method
 */
export declare class CoreMetadataModuleReadOnlyClient extends CoreMetadataModuleEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method ACCESS_CONTROLLER for contract CoreMetadataModule
     *
     * @param request CoreMetadataModuleAccessControllerRequest
     * @return Promise<CoreMetadataModuleAccessControllerResponse>
     */
    accessController(): Promise<CoreMetadataModuleAccessControllerResponse>;
    /**
     * method IP_ASSET_REGISTRY for contract CoreMetadataModule
     *
     * @param request CoreMetadataModuleIpAssetRegistryRequest
     * @return Promise<CoreMetadataModuleIpAssetRegistryResponse>
     */
    ipAssetRegistry(): Promise<CoreMetadataModuleIpAssetRegistryResponse>;
    /**
     * method UPGRADE_INTERFACE_VERSION for contract CoreMetadataModule
     *
     * @param request CoreMetadataModuleUpgradeInterfaceVersionRequest
     * @return Promise<CoreMetadataModuleUpgradeInterfaceVersionResponse>
     */
    upgradeInterfaceVersion(): Promise<CoreMetadataModuleUpgradeInterfaceVersionResponse>;
    /**
     * method authority for contract CoreMetadataModule
     *
     * @param request CoreMetadataModuleAuthorityRequest
     * @return Promise<CoreMetadataModuleAuthorityResponse>
     */
    authority(): Promise<CoreMetadataModuleAuthorityResponse>;
    /**
     * method isConsumingScheduledOp for contract CoreMetadataModule
     *
     * @param request CoreMetadataModuleIsConsumingScheduledOpRequest
     * @return Promise<CoreMetadataModuleIsConsumingScheduledOpResponse>
     */
    isConsumingScheduledOp(): Promise<CoreMetadataModuleIsConsumingScheduledOpResponse>;
    /**
     * method isMetadataFrozen for contract CoreMetadataModule
     *
     * @param request CoreMetadataModuleIsMetadataFrozenRequest
     * @return Promise<CoreMetadataModuleIsMetadataFrozenResponse>
     */
    isMetadataFrozen(request: CoreMetadataModuleIsMetadataFrozenRequest): Promise<CoreMetadataModuleIsMetadataFrozenResponse>;
    /**
     * method name for contract CoreMetadataModule
     *
     * @param request CoreMetadataModuleNameRequest
     * @return Promise<CoreMetadataModuleNameResponse>
     */
    name(): Promise<CoreMetadataModuleNameResponse>;
    /**
     * method proxiableUUID for contract CoreMetadataModule
     *
     * @param request CoreMetadataModuleProxiableUuidRequest
     * @return Promise<CoreMetadataModuleProxiableUuidResponse>
     */
    proxiableUuid(): Promise<CoreMetadataModuleProxiableUuidResponse>;
    /**
     * method supportsInterface for contract CoreMetadataModule
     *
     * @param request CoreMetadataModuleSupportsInterfaceRequest
     * @return Promise<CoreMetadataModuleSupportsInterfaceResponse>
     */
    supportsInterface(request: CoreMetadataModuleSupportsInterfaceRequest): Promise<CoreMetadataModuleSupportsInterfaceResponse>;
}
/**
 * contract CoreMetadataModule write method
 */
export declare class CoreMetadataModuleClient extends CoreMetadataModuleReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method freezeMetadata for contract CoreMetadataModule
     *
     * @param request CoreMetadataModuleFreezeMetadataRequest
     * @return Promise<WriteContractReturnType>
     */
    freezeMetadata(request: CoreMetadataModuleFreezeMetadataRequest): Promise<WriteContractReturnType>;
    /**
     * method freezeMetadata for contract CoreMetadataModule with only encode
     *
     * @param request CoreMetadataModuleFreezeMetadataRequest
     * @return EncodedTxData
     */
    freezeMetadataEncode(request: CoreMetadataModuleFreezeMetadataRequest): EncodedTxData;
    /**
     * method initialize for contract CoreMetadataModule
     *
     * @param request CoreMetadataModuleInitializeRequest
     * @return Promise<WriteContractReturnType>
     */
    initialize(request: CoreMetadataModuleInitializeRequest): Promise<WriteContractReturnType>;
    /**
     * method initialize for contract CoreMetadataModule with only encode
     *
     * @param request CoreMetadataModuleInitializeRequest
     * @return EncodedTxData
     */
    initializeEncode(request: CoreMetadataModuleInitializeRequest): EncodedTxData;
    /**
     * method setAll for contract CoreMetadataModule
     *
     * @param request CoreMetadataModuleSetAllRequest
     * @return Promise<WriteContractReturnType>
     */
    setAll(request: CoreMetadataModuleSetAllRequest): Promise<WriteContractReturnType>;
    /**
     * method setAll for contract CoreMetadataModule with only encode
     *
     * @param request CoreMetadataModuleSetAllRequest
     * @return EncodedTxData
     */
    setAllEncode(request: CoreMetadataModuleSetAllRequest): EncodedTxData;
    /**
     * method setAuthority for contract CoreMetadataModule
     *
     * @param request CoreMetadataModuleSetAuthorityRequest
     * @return Promise<WriteContractReturnType>
     */
    setAuthority(request: CoreMetadataModuleSetAuthorityRequest): Promise<WriteContractReturnType>;
    /**
     * method setAuthority for contract CoreMetadataModule with only encode
     *
     * @param request CoreMetadataModuleSetAuthorityRequest
     * @return EncodedTxData
     */
    setAuthorityEncode(request: CoreMetadataModuleSetAuthorityRequest): EncodedTxData;
    /**
     * method setMetadataURI for contract CoreMetadataModule
     *
     * @param request CoreMetadataModuleSetMetadataUriRequest
     * @return Promise<WriteContractReturnType>
     */
    setMetadataUri(request: CoreMetadataModuleSetMetadataUriRequest): Promise<WriteContractReturnType>;
    /**
     * method setMetadataURI for contract CoreMetadataModule with only encode
     *
     * @param request CoreMetadataModuleSetMetadataUriRequest
     * @return EncodedTxData
     */
    setMetadataUriEncode(request: CoreMetadataModuleSetMetadataUriRequest): EncodedTxData;
    /**
     * method updateNftTokenURI for contract CoreMetadataModule
     *
     * @param request CoreMetadataModuleUpdateNftTokenUriRequest
     * @return Promise<WriteContractReturnType>
     */
    updateNftTokenUri(request: CoreMetadataModuleUpdateNftTokenUriRequest): Promise<WriteContractReturnType>;
    /**
     * method updateNftTokenURI for contract CoreMetadataModule with only encode
     *
     * @param request CoreMetadataModuleUpdateNftTokenUriRequest
     * @return EncodedTxData
     */
    updateNftTokenUriEncode(request: CoreMetadataModuleUpdateNftTokenUriRequest): EncodedTxData;
    /**
     * method upgradeToAndCall for contract CoreMetadataModule
     *
     * @param request CoreMetadataModuleUpgradeToAndCallRequest
     * @return Promise<WriteContractReturnType>
     */
    upgradeToAndCall(request: CoreMetadataModuleUpgradeToAndCallRequest): Promise<WriteContractReturnType>;
    /**
     * method upgradeToAndCall for contract CoreMetadataModule with only encode
     *
     * @param request CoreMetadataModuleUpgradeToAndCallRequest
     * @return EncodedTxData
     */
    upgradeToAndCallEncode(request: CoreMetadataModuleUpgradeToAndCallRequest): EncodedTxData;
}
/**
 * DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeRequest
 *
 * @param spgNftContract address
 * @param derivData tuple
 * @param ipMetadata tuple
 * @param recipient address
 * @param allowDuplicates bool
 */
export type DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeRequest = {
    spgNftContract: Address;
    derivData: {
        parentIpIds: readonly Address[];
        licenseTemplate: Address;
        licenseTermsIds: readonly bigint[];
        royaltyContext: Hex;
        maxMintingFee: bigint;
        maxRts: number;
        maxRevenueShare: number;
    };
    ipMetadata: {
        ipMetadataURI: string;
        ipMetadataHash: Hex;
        nftMetadataURI: string;
        nftMetadataHash: Hex;
    };
    recipient: Address;
    allowDuplicates: boolean;
};
/**
 * DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest
 *
 * @param spgNftContract address
 * @param licenseTokenIds uint256[]
 * @param royaltyContext bytes
 * @param maxRts uint32
 * @param ipMetadata tuple
 * @param recipient address
 * @param allowDuplicates bool
 */
export type DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest = {
    spgNftContract: Address;
    licenseTokenIds: readonly bigint[];
    royaltyContext: Hex;
    maxRts: number;
    ipMetadata: {
        ipMetadataURI: string;
        ipMetadataHash: Hex;
        nftMetadataURI: string;
        nftMetadataHash: Hex;
    };
    recipient: Address;
    allowDuplicates: boolean;
};
/**
 * DerivativeWorkflowsMulticallRequest
 *
 * @param data bytes[]
 */
export type DerivativeWorkflowsMulticallRequest = {
    data: readonly Hex[];
};
/**
 * DerivativeWorkflowsRegisterIpAndMakeDerivativeRequest
 *
 * @param nftContract address
 * @param tokenId uint256
 * @param derivData tuple
 * @param ipMetadata tuple
 * @param sigMetadataAndRegister tuple
 */
export type DerivativeWorkflowsRegisterIpAndMakeDerivativeRequest = {
    nftContract: Address;
    tokenId: bigint;
    derivData: {
        parentIpIds: readonly Address[];
        licenseTemplate: Address;
        licenseTermsIds: readonly bigint[];
        royaltyContext: Hex;
        maxMintingFee: bigint;
        maxRts: number;
        maxRevenueShare: number;
    };
    ipMetadata: {
        ipMetadataURI: string;
        ipMetadataHash: Hex;
        nftMetadataURI: string;
        nftMetadataHash: Hex;
    };
    sigMetadataAndRegister: {
        signer: Address;
        deadline: bigint;
        signature: Hex;
    };
};
/**
 * DerivativeWorkflowsRegisterIpAndMakeDerivativeWithLicenseTokensRequest
 *
 * @param nftContract address
 * @param tokenId uint256
 * @param licenseTokenIds uint256[]
 * @param royaltyContext bytes
 * @param maxRts uint32
 * @param ipMetadata tuple
 * @param sigMetadataAndRegister tuple
 */
export type DerivativeWorkflowsRegisterIpAndMakeDerivativeWithLicenseTokensRequest = {
    nftContract: Address;
    tokenId: bigint;
    licenseTokenIds: readonly bigint[];
    royaltyContext: Hex;
    maxRts: number;
    ipMetadata: {
        ipMetadataURI: string;
        ipMetadataHash: Hex;
        nftMetadataURI: string;
        nftMetadataHash: Hex;
    };
    sigMetadataAndRegister: {
        signer: Address;
        deadline: bigint;
        signature: Hex;
    };
};
/**
 * contract DerivativeWorkflows write method
 */
export declare class DerivativeWorkflowsClient {
    protected readonly wallet: SimpleWalletClient;
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method mintAndRegisterIpAndMakeDerivative for contract DerivativeWorkflows
     *
     * @param request DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeRequest
     * @return Promise<WriteContractReturnType>
     */
    mintAndRegisterIpAndMakeDerivative(request: DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeRequest): Promise<WriteContractReturnType>;
    /**
     * method mintAndRegisterIpAndMakeDerivative for contract DerivativeWorkflows with only encode
     *
     * @param request DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeRequest
     * @return EncodedTxData
     */
    mintAndRegisterIpAndMakeDerivativeEncode(request: DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeRequest): EncodedTxData;
    /**
     * method mintAndRegisterIpAndMakeDerivativeWithLicenseTokens for contract DerivativeWorkflows
     *
     * @param request DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest
     * @return Promise<WriteContractReturnType>
     */
    mintAndRegisterIpAndMakeDerivativeWithLicenseTokens(request: DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest): Promise<WriteContractReturnType>;
    /**
     * method mintAndRegisterIpAndMakeDerivativeWithLicenseTokens for contract DerivativeWorkflows with only encode
     *
     * @param request DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest
     * @return EncodedTxData
     */
    mintAndRegisterIpAndMakeDerivativeWithLicenseTokensEncode(request: DerivativeWorkflowsMintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest): EncodedTxData;
    /**
     * method multicall for contract DerivativeWorkflows
     *
     * @param request DerivativeWorkflowsMulticallRequest
     * @return Promise<WriteContractReturnType>
     */
    multicall(request: DerivativeWorkflowsMulticallRequest): Promise<WriteContractReturnType>;
    /**
     * method multicall for contract DerivativeWorkflows with only encode
     *
     * @param request DerivativeWorkflowsMulticallRequest
     * @return EncodedTxData
     */
    multicallEncode(request: DerivativeWorkflowsMulticallRequest): EncodedTxData;
    /**
     * method registerIpAndMakeDerivative for contract DerivativeWorkflows
     *
     * @param request DerivativeWorkflowsRegisterIpAndMakeDerivativeRequest
     * @return Promise<WriteContractReturnType>
     */
    registerIpAndMakeDerivative(request: DerivativeWorkflowsRegisterIpAndMakeDerivativeRequest): Promise<WriteContractReturnType>;
    /**
     * method registerIpAndMakeDerivative for contract DerivativeWorkflows with only encode
     *
     * @param request DerivativeWorkflowsRegisterIpAndMakeDerivativeRequest
     * @return EncodedTxData
     */
    registerIpAndMakeDerivativeEncode(request: DerivativeWorkflowsRegisterIpAndMakeDerivativeRequest): EncodedTxData;
    /**
     * method registerIpAndMakeDerivativeWithLicenseTokens for contract DerivativeWorkflows
     *
     * @param request DerivativeWorkflowsRegisterIpAndMakeDerivativeWithLicenseTokensRequest
     * @return Promise<WriteContractReturnType>
     */
    registerIpAndMakeDerivativeWithLicenseTokens(request: DerivativeWorkflowsRegisterIpAndMakeDerivativeWithLicenseTokensRequest): Promise<WriteContractReturnType>;
    /**
     * method registerIpAndMakeDerivativeWithLicenseTokens for contract DerivativeWorkflows with only encode
     *
     * @param request DerivativeWorkflowsRegisterIpAndMakeDerivativeWithLicenseTokensRequest
     * @return EncodedTxData
     */
    registerIpAndMakeDerivativeWithLicenseTokensEncode(request: DerivativeWorkflowsRegisterIpAndMakeDerivativeWithLicenseTokensRequest): EncodedTxData;
}
/**
 * DisputeModuleDisputeCancelledEvent
 *
 * @param disputeId uint256
 * @param data bytes
 */
export type DisputeModuleDisputeCancelledEvent = {
    disputeId: bigint;
    data: Hex;
};
/**
 * DisputeModuleDisputeRaisedEvent
 *
 * @param disputeId uint256
 * @param targetIpId address
 * @param disputeInitiator address
 * @param disputeTimestamp uint256
 * @param arbitrationPolicy address
 * @param disputeEvidenceHash bytes32
 * @param targetTag bytes32
 * @param data bytes
 */
export type DisputeModuleDisputeRaisedEvent = {
    disputeId: bigint;
    targetIpId: Address;
    disputeInitiator: Address;
    disputeTimestamp: bigint;
    arbitrationPolicy: Address;
    disputeEvidenceHash: Hex;
    targetTag: Hex;
    data: Hex;
};
/**
 * DisputeModuleDisputeResolvedEvent
 *
 * @param disputeId uint256
 * @param data bytes
 */
export type DisputeModuleDisputeResolvedEvent = {
    disputeId: bigint;
    data: Hex;
};
/**
 * DisputeModuleIsWhitelistedDisputeTagRequest
 *
 * @param tag bytes32
 */
export type DisputeModuleIsWhitelistedDisputeTagRequest = {
    tag: Hex;
};
/**
 * DisputeModuleIsWhitelistedDisputeTagResponse
 *
 * @param allowed bool
 */
export type DisputeModuleIsWhitelistedDisputeTagResponse = {
    allowed: boolean;
};
/**
 * DisputeModuleCancelDisputeRequest
 *
 * @param disputeId uint256
 * @param data bytes
 */
export type DisputeModuleCancelDisputeRequest = {
    disputeId: bigint;
    data: Hex;
};
/**
 * DisputeModuleRaiseDisputeRequest
 *
 * @param targetIpId address
 * @param disputeEvidenceHash bytes32
 * @param targetTag bytes32
 * @param data bytes
 */
export type DisputeModuleRaiseDisputeRequest = {
    targetIpId: Address;
    disputeEvidenceHash: Hex;
    targetTag: Hex;
    data: Hex;
};
/**
 * DisputeModuleResolveDisputeRequest
 *
 * @param disputeId uint256
 * @param data bytes
 */
export type DisputeModuleResolveDisputeRequest = {
    disputeId: bigint;
    data: Hex;
};
/**
 * contract DisputeModule event
 */
export declare class DisputeModuleEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event DisputeCancelled for contract DisputeModule
     */
    watchDisputeCancelledEvent(onLogs: (txHash: Hex, ev: Partial<DisputeModuleDisputeCancelledEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event DisputeCancelled for contract DisputeModule
     */
    parseTxDisputeCancelledEvent(txReceipt: TransactionReceipt): Array<DisputeModuleDisputeCancelledEvent>;
    /**
     * event DisputeRaised for contract DisputeModule
     */
    watchDisputeRaisedEvent(onLogs: (txHash: Hex, ev: Partial<DisputeModuleDisputeRaisedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event DisputeRaised for contract DisputeModule
     */
    parseTxDisputeRaisedEvent(txReceipt: TransactionReceipt): Array<DisputeModuleDisputeRaisedEvent>;
    /**
     * event DisputeResolved for contract DisputeModule
     */
    watchDisputeResolvedEvent(onLogs: (txHash: Hex, ev: Partial<DisputeModuleDisputeResolvedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event DisputeResolved for contract DisputeModule
     */
    parseTxDisputeResolvedEvent(txReceipt: TransactionReceipt): Array<DisputeModuleDisputeResolvedEvent>;
}
/**
 * contract DisputeModule readonly method
 */
export declare class DisputeModuleReadOnlyClient extends DisputeModuleEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method isWhitelistedDisputeTag for contract DisputeModule
     *
     * @param request DisputeModuleIsWhitelistedDisputeTagRequest
     * @return Promise<DisputeModuleIsWhitelistedDisputeTagResponse>
     */
    isWhitelistedDisputeTag(request: DisputeModuleIsWhitelistedDisputeTagRequest): Promise<DisputeModuleIsWhitelistedDisputeTagResponse>;
}
/**
 * contract DisputeModule write method
 */
export declare class DisputeModuleClient extends DisputeModuleReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method cancelDispute for contract DisputeModule
     *
     * @param request DisputeModuleCancelDisputeRequest
     * @return Promise<WriteContractReturnType>
     */
    cancelDispute(request: DisputeModuleCancelDisputeRequest): Promise<WriteContractReturnType>;
    /**
     * method cancelDispute for contract DisputeModule with only encode
     *
     * @param request DisputeModuleCancelDisputeRequest
     * @return EncodedTxData
     */
    cancelDisputeEncode(request: DisputeModuleCancelDisputeRequest): EncodedTxData;
    /**
     * method raiseDispute for contract DisputeModule
     *
     * @param request DisputeModuleRaiseDisputeRequest
     * @return Promise<WriteContractReturnType>
     */
    raiseDispute(request: DisputeModuleRaiseDisputeRequest): Promise<WriteContractReturnType>;
    /**
     * method raiseDispute for contract DisputeModule with only encode
     *
     * @param request DisputeModuleRaiseDisputeRequest
     * @return EncodedTxData
     */
    raiseDisputeEncode(request: DisputeModuleRaiseDisputeRequest): EncodedTxData;
    /**
     * method resolveDispute for contract DisputeModule
     *
     * @param request DisputeModuleResolveDisputeRequest
     * @return Promise<WriteContractReturnType>
     */
    resolveDispute(request: DisputeModuleResolveDisputeRequest): Promise<WriteContractReturnType>;
    /**
     * method resolveDispute for contract DisputeModule with only encode
     *
     * @param request DisputeModuleResolveDisputeRequest
     * @return EncodedTxData
     */
    resolveDisputeEncode(request: DisputeModuleResolveDisputeRequest): EncodedTxData;
}
/**
 * EvenSplitGroupPoolAuthorityUpdatedEvent
 *
 * @param authority address
 */
export type EvenSplitGroupPoolAuthorityUpdatedEvent = {
    authority: Address;
};
/**
 * EvenSplitGroupPoolInitializedEvent
 *
 * @param version uint64
 */
export type EvenSplitGroupPoolInitializedEvent = {
    version: bigint;
};
/**
 * EvenSplitGroupPoolPausedEvent
 *
 * @param account address
 */
export type EvenSplitGroupPoolPausedEvent = {
    account: Address;
};
/**
 * EvenSplitGroupPoolUnpausedEvent
 *
 * @param account address
 */
export type EvenSplitGroupPoolUnpausedEvent = {
    account: Address;
};
/**
 * EvenSplitGroupPoolUpgradedEvent
 *
 * @param implementation address
 */
export type EvenSplitGroupPoolUpgradedEvent = {
    implementation: Address;
};
export type EvenSplitGroupPoolGroupingModuleResponse = Address;
export type EvenSplitGroupPoolGroupIpAssetRegistryResponse = Address;
export type EvenSplitGroupPoolMaxGroupSizeResponse = number;
export type EvenSplitGroupPoolRoyaltyModuleResponse = Address;
export type EvenSplitGroupPoolUpgradeInterfaceVersionResponse = string;
export type EvenSplitGroupPoolAuthorityResponse = Address;
/**
 * EvenSplitGroupPoolGetAvailableRewardRequest
 *
 * @param groupId address
 * @param token address
 * @param ipIds address[]
 */
export type EvenSplitGroupPoolGetAvailableRewardRequest = {
    groupId: Address;
    token: Address;
    ipIds: readonly Address[];
};
export type EvenSplitGroupPoolGetAvailableRewardResponse = readonly bigint[];
/**
 * EvenSplitGroupPoolGetIpAddedTimeRequest
 *
 * @param groupId address
 * @param ipId address
 */
export type EvenSplitGroupPoolGetIpAddedTimeRequest = {
    groupId: Address;
    ipId: Address;
};
export type EvenSplitGroupPoolGetIpAddedTimeResponse = bigint;
/**
 * EvenSplitGroupPoolGetIpRewardDebtRequest
 *
 * @param groupId address
 * @param token address
 * @param ipId address
 */
export type EvenSplitGroupPoolGetIpRewardDebtRequest = {
    groupId: Address;
    token: Address;
    ipId: Address;
};
export type EvenSplitGroupPoolGetIpRewardDebtResponse = bigint;
/**
 * EvenSplitGroupPoolGetMinimumRewardShareRequest
 *
 * @param groupId address
 * @param ipId address
 */
export type EvenSplitGroupPoolGetMinimumRewardShareRequest = {
    groupId: Address;
    ipId: Address;
};
export type EvenSplitGroupPoolGetMinimumRewardShareResponse = bigint;
/**
 * EvenSplitGroupPoolGetTotalAllocatedRewardShareRequest
 *
 * @param groupId address
 */
export type EvenSplitGroupPoolGetTotalAllocatedRewardShareRequest = {
    groupId: Address;
};
export type EvenSplitGroupPoolGetTotalAllocatedRewardShareResponse = bigint;
/**
 * EvenSplitGroupPoolGetTotalIpsRequest
 *
 * @param groupId address
 */
export type EvenSplitGroupPoolGetTotalIpsRequest = {
    groupId: Address;
};
export type EvenSplitGroupPoolGetTotalIpsResponse = bigint;
export type EvenSplitGroupPoolIsConsumingScheduledOpResponse = Hex;
/**
 * EvenSplitGroupPoolIsIpAddedRequest
 *
 * @param groupId address
 * @param ipId address
 */
export type EvenSplitGroupPoolIsIpAddedRequest = {
    groupId: Address;
    ipId: Address;
};
export type EvenSplitGroupPoolIsIpAddedResponse = boolean;
export type EvenSplitGroupPoolPausedResponse = boolean;
export type EvenSplitGroupPoolProxiableUuidResponse = Hex;
/**
 * EvenSplitGroupPoolProtocolPausableInitRequest
 *
 * @param accessManager address
 */
export type EvenSplitGroupPoolProtocolPausableInitRequest = {
    accessManager: Address;
};
/**
 * EvenSplitGroupPoolAddIpRequest
 *
 * @param groupId address
 * @param ipId address
 * @param minimumGroupRewardShare uint256
 */
export type EvenSplitGroupPoolAddIpRequest = {
    groupId: Address;
    ipId: Address;
    minimumGroupRewardShare: bigint;
};
/**
 * EvenSplitGroupPoolDepositRewardRequest
 *
 * @param groupId address
 * @param token address
 * @param amount uint256
 */
export type EvenSplitGroupPoolDepositRewardRequest = {
    groupId: Address;
    token: Address;
    amount: bigint;
};
/**
 * EvenSplitGroupPoolDistributeRewardsRequest
 *
 * @param groupId address
 * @param token address
 * @param ipIds address[]
 */
export type EvenSplitGroupPoolDistributeRewardsRequest = {
    groupId: Address;
    token: Address;
    ipIds: readonly Address[];
};
/**
 * EvenSplitGroupPoolInitializeRequest
 *
 * @param accessManager address
 */
export type EvenSplitGroupPoolInitializeRequest = {
    accessManager: Address;
};
/**
 * EvenSplitGroupPoolRemoveIpRequest
 *
 * @param groupId address
 * @param ipId address
 */
export type EvenSplitGroupPoolRemoveIpRequest = {
    groupId: Address;
    ipId: Address;
};
/**
 * EvenSplitGroupPoolSetAuthorityRequest
 *
 * @param newAuthority address
 */
export type EvenSplitGroupPoolSetAuthorityRequest = {
    newAuthority: Address;
};
/**
 * EvenSplitGroupPoolUpgradeToAndCallRequest
 *
 * @param newImplementation address
 * @param data bytes
 */
export type EvenSplitGroupPoolUpgradeToAndCallRequest = {
    newImplementation: Address;
    data: Hex;
};
/**
 * contract EvenSplitGroupPool event
 */
export declare class EvenSplitGroupPoolEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event AuthorityUpdated for contract EvenSplitGroupPool
     */
    watchAuthorityUpdatedEvent(onLogs: (txHash: Hex, ev: Partial<EvenSplitGroupPoolAuthorityUpdatedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event AuthorityUpdated for contract EvenSplitGroupPool
     */
    parseTxAuthorityUpdatedEvent(txReceipt: TransactionReceipt): Array<EvenSplitGroupPoolAuthorityUpdatedEvent>;
    /**
     * event Initialized for contract EvenSplitGroupPool
     */
    watchInitializedEvent(onLogs: (txHash: Hex, ev: Partial<EvenSplitGroupPoolInitializedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Initialized for contract EvenSplitGroupPool
     */
    parseTxInitializedEvent(txReceipt: TransactionReceipt): Array<EvenSplitGroupPoolInitializedEvent>;
    /**
     * event Paused for contract EvenSplitGroupPool
     */
    watchPausedEvent(onLogs: (txHash: Hex, ev: Partial<EvenSplitGroupPoolPausedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Paused for contract EvenSplitGroupPool
     */
    parseTxPausedEvent(txReceipt: TransactionReceipt): Array<EvenSplitGroupPoolPausedEvent>;
    /**
     * event Unpaused for contract EvenSplitGroupPool
     */
    watchUnpausedEvent(onLogs: (txHash: Hex, ev: Partial<EvenSplitGroupPoolUnpausedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Unpaused for contract EvenSplitGroupPool
     */
    parseTxUnpausedEvent(txReceipt: TransactionReceipt): Array<EvenSplitGroupPoolUnpausedEvent>;
    /**
     * event Upgraded for contract EvenSplitGroupPool
     */
    watchUpgradedEvent(onLogs: (txHash: Hex, ev: Partial<EvenSplitGroupPoolUpgradedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Upgraded for contract EvenSplitGroupPool
     */
    parseTxUpgradedEvent(txReceipt: TransactionReceipt): Array<EvenSplitGroupPoolUpgradedEvent>;
}
/**
 * contract EvenSplitGroupPool readonly method
 */
export declare class EvenSplitGroupPoolReadOnlyClient extends EvenSplitGroupPoolEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method GROUPING_MODULE for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolGroupingModuleRequest
     * @return Promise<EvenSplitGroupPoolGroupingModuleResponse>
     */
    groupingModule(): Promise<EvenSplitGroupPoolGroupingModuleResponse>;
    /**
     * method GROUP_IP_ASSET_REGISTRY for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolGroupIpAssetRegistryRequest
     * @return Promise<EvenSplitGroupPoolGroupIpAssetRegistryResponse>
     */
    groupIpAssetRegistry(): Promise<EvenSplitGroupPoolGroupIpAssetRegistryResponse>;
    /**
     * method MAX_GROUP_SIZE for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolMaxGroupSizeRequest
     * @return Promise<EvenSplitGroupPoolMaxGroupSizeResponse>
     */
    maxGroupSize(): Promise<EvenSplitGroupPoolMaxGroupSizeResponse>;
    /**
     * method ROYALTY_MODULE for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolRoyaltyModuleRequest
     * @return Promise<EvenSplitGroupPoolRoyaltyModuleResponse>
     */
    royaltyModule(): Promise<EvenSplitGroupPoolRoyaltyModuleResponse>;
    /**
     * method UPGRADE_INTERFACE_VERSION for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolUpgradeInterfaceVersionRequest
     * @return Promise<EvenSplitGroupPoolUpgradeInterfaceVersionResponse>
     */
    upgradeInterfaceVersion(): Promise<EvenSplitGroupPoolUpgradeInterfaceVersionResponse>;
    /**
     * method authority for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolAuthorityRequest
     * @return Promise<EvenSplitGroupPoolAuthorityResponse>
     */
    authority(): Promise<EvenSplitGroupPoolAuthorityResponse>;
    /**
     * method getAvailableReward for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolGetAvailableRewardRequest
     * @return Promise<EvenSplitGroupPoolGetAvailableRewardResponse>
     */
    getAvailableReward(request: EvenSplitGroupPoolGetAvailableRewardRequest): Promise<EvenSplitGroupPoolGetAvailableRewardResponse>;
    /**
     * method getIpAddedTime for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolGetIpAddedTimeRequest
     * @return Promise<EvenSplitGroupPoolGetIpAddedTimeResponse>
     */
    getIpAddedTime(request: EvenSplitGroupPoolGetIpAddedTimeRequest): Promise<EvenSplitGroupPoolGetIpAddedTimeResponse>;
    /**
     * method getIpRewardDebt for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolGetIpRewardDebtRequest
     * @return Promise<EvenSplitGroupPoolGetIpRewardDebtResponse>
     */
    getIpRewardDebt(request: EvenSplitGroupPoolGetIpRewardDebtRequest): Promise<EvenSplitGroupPoolGetIpRewardDebtResponse>;
    /**
     * method getMinimumRewardShare for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolGetMinimumRewardShareRequest
     * @return Promise<EvenSplitGroupPoolGetMinimumRewardShareResponse>
     */
    getMinimumRewardShare(request: EvenSplitGroupPoolGetMinimumRewardShareRequest): Promise<EvenSplitGroupPoolGetMinimumRewardShareResponse>;
    /**
     * method getTotalAllocatedRewardShare for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolGetTotalAllocatedRewardShareRequest
     * @return Promise<EvenSplitGroupPoolGetTotalAllocatedRewardShareResponse>
     */
    getTotalAllocatedRewardShare(request: EvenSplitGroupPoolGetTotalAllocatedRewardShareRequest): Promise<EvenSplitGroupPoolGetTotalAllocatedRewardShareResponse>;
    /**
     * method getTotalIps for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolGetTotalIpsRequest
     * @return Promise<EvenSplitGroupPoolGetTotalIpsResponse>
     */
    getTotalIps(request: EvenSplitGroupPoolGetTotalIpsRequest): Promise<EvenSplitGroupPoolGetTotalIpsResponse>;
    /**
     * method isConsumingScheduledOp for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolIsConsumingScheduledOpRequest
     * @return Promise<EvenSplitGroupPoolIsConsumingScheduledOpResponse>
     */
    isConsumingScheduledOp(): Promise<EvenSplitGroupPoolIsConsumingScheduledOpResponse>;
    /**
     * method isIPAdded for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolIsIpAddedRequest
     * @return Promise<EvenSplitGroupPoolIsIpAddedResponse>
     */
    isIpAdded(request: EvenSplitGroupPoolIsIpAddedRequest): Promise<EvenSplitGroupPoolIsIpAddedResponse>;
    /**
     * method paused for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolPausedRequest
     * @return Promise<EvenSplitGroupPoolPausedResponse>
     */
    paused(): Promise<EvenSplitGroupPoolPausedResponse>;
    /**
     * method proxiableUUID for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolProxiableUuidRequest
     * @return Promise<EvenSplitGroupPoolProxiableUuidResponse>
     */
    proxiableUuid(): Promise<EvenSplitGroupPoolProxiableUuidResponse>;
}
/**
 * contract EvenSplitGroupPool write method
 */
export declare class EvenSplitGroupPoolClient extends EvenSplitGroupPoolReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method __ProtocolPausable_init for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolProtocolPausableInitRequest
     * @return Promise<WriteContractReturnType>
     */
    protocolPausableInit(request: EvenSplitGroupPoolProtocolPausableInitRequest): Promise<WriteContractReturnType>;
    /**
     * method __ProtocolPausable_init for contract EvenSplitGroupPool with only encode
     *
     * @param request EvenSplitGroupPoolProtocolPausableInitRequest
     * @return EncodedTxData
     */
    protocolPausableInitEncode(request: EvenSplitGroupPoolProtocolPausableInitRequest): EncodedTxData;
    /**
     * method addIp for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolAddIpRequest
     * @return Promise<WriteContractReturnType>
     */
    addIp(request: EvenSplitGroupPoolAddIpRequest): Promise<WriteContractReturnType>;
    /**
     * method addIp for contract EvenSplitGroupPool with only encode
     *
     * @param request EvenSplitGroupPoolAddIpRequest
     * @return EncodedTxData
     */
    addIpEncode(request: EvenSplitGroupPoolAddIpRequest): EncodedTxData;
    /**
     * method depositReward for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolDepositRewardRequest
     * @return Promise<WriteContractReturnType>
     */
    depositReward(request: EvenSplitGroupPoolDepositRewardRequest): Promise<WriteContractReturnType>;
    /**
     * method depositReward for contract EvenSplitGroupPool with only encode
     *
     * @param request EvenSplitGroupPoolDepositRewardRequest
     * @return EncodedTxData
     */
    depositRewardEncode(request: EvenSplitGroupPoolDepositRewardRequest): EncodedTxData;
    /**
     * method distributeRewards for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolDistributeRewardsRequest
     * @return Promise<WriteContractReturnType>
     */
    distributeRewards(request: EvenSplitGroupPoolDistributeRewardsRequest): Promise<WriteContractReturnType>;
    /**
     * method distributeRewards for contract EvenSplitGroupPool with only encode
     *
     * @param request EvenSplitGroupPoolDistributeRewardsRequest
     * @return EncodedTxData
     */
    distributeRewardsEncode(request: EvenSplitGroupPoolDistributeRewardsRequest): EncodedTxData;
    /**
     * method initialize for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolInitializeRequest
     * @return Promise<WriteContractReturnType>
     */
    initialize(request: EvenSplitGroupPoolInitializeRequest): Promise<WriteContractReturnType>;
    /**
     * method initialize for contract EvenSplitGroupPool with only encode
     *
     * @param request EvenSplitGroupPoolInitializeRequest
     * @return EncodedTxData
     */
    initializeEncode(request: EvenSplitGroupPoolInitializeRequest): EncodedTxData;
    /**
     * method pause for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolPauseRequest
     * @return Promise<WriteContractReturnType>
     */
    pause(): Promise<WriteContractReturnType>;
    /**
     * method pause for contract EvenSplitGroupPool with only encode
     *
     * @param request EvenSplitGroupPoolPauseRequest
     * @return EncodedTxData
     */
    pauseEncode(): EncodedTxData;
    /**
     * method removeIp for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolRemoveIpRequest
     * @return Promise<WriteContractReturnType>
     */
    removeIp(request: EvenSplitGroupPoolRemoveIpRequest): Promise<WriteContractReturnType>;
    /**
     * method removeIp for contract EvenSplitGroupPool with only encode
     *
     * @param request EvenSplitGroupPoolRemoveIpRequest
     * @return EncodedTxData
     */
    removeIpEncode(request: EvenSplitGroupPoolRemoveIpRequest): EncodedTxData;
    /**
     * method setAuthority for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolSetAuthorityRequest
     * @return Promise<WriteContractReturnType>
     */
    setAuthority(request: EvenSplitGroupPoolSetAuthorityRequest): Promise<WriteContractReturnType>;
    /**
     * method setAuthority for contract EvenSplitGroupPool with only encode
     *
     * @param request EvenSplitGroupPoolSetAuthorityRequest
     * @return EncodedTxData
     */
    setAuthorityEncode(request: EvenSplitGroupPoolSetAuthorityRequest): EncodedTxData;
    /**
     * method unpause for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolUnpauseRequest
     * @return Promise<WriteContractReturnType>
     */
    unpause(): Promise<WriteContractReturnType>;
    /**
     * method unpause for contract EvenSplitGroupPool with only encode
     *
     * @param request EvenSplitGroupPoolUnpauseRequest
     * @return EncodedTxData
     */
    unpauseEncode(): EncodedTxData;
    /**
     * method upgradeToAndCall for contract EvenSplitGroupPool
     *
     * @param request EvenSplitGroupPoolUpgradeToAndCallRequest
     * @return Promise<WriteContractReturnType>
     */
    upgradeToAndCall(request: EvenSplitGroupPoolUpgradeToAndCallRequest): Promise<WriteContractReturnType>;
    /**
     * method upgradeToAndCall for contract EvenSplitGroupPool with only encode
     *
     * @param request EvenSplitGroupPoolUpgradeToAndCallRequest
     * @return EncodedTxData
     */
    upgradeToAndCallEncode(request: EvenSplitGroupPoolUpgradeToAndCallRequest): EncodedTxData;
}
/**
 * GroupingModuleAddedIpToGroupEvent
 *
 * @param groupId address
 * @param ipIds address[]
 */
export type GroupingModuleAddedIpToGroupEvent = {
    groupId: Address;
    ipIds: readonly Address[];
};
/**
 * GroupingModuleAuthorityUpdatedEvent
 *
 * @param authority address
 */
export type GroupingModuleAuthorityUpdatedEvent = {
    authority: Address;
};
/**
 * GroupingModuleClaimedRewardEvent
 *
 * @param groupId address
 * @param token address
 * @param ipId address[]
 * @param amount uint256[]
 */
export type GroupingModuleClaimedRewardEvent = {
    groupId: Address;
    token: Address;
    ipId: readonly Address[];
    amount: readonly bigint[];
};
/**
 * GroupingModuleCollectedRoyaltiesToGroupPoolEvent
 *
 * @param groupId address
 * @param token address
 * @param pool address
 * @param amount uint256
 */
export type GroupingModuleCollectedRoyaltiesToGroupPoolEvent = {
    groupId: Address;
    token: Address;
    pool: Address;
    amount: bigint;
};
/**
 * GroupingModuleIpGroupRegisteredEvent
 *
 * @param groupId address
 * @param groupPool address
 */
export type GroupingModuleIpGroupRegisteredEvent = {
    groupId: Address;
    groupPool: Address;
};
/**
 * GroupingModuleInitializedEvent
 *
 * @param version uint64
 */
export type GroupingModuleInitializedEvent = {
    version: bigint;
};
/**
 * GroupingModulePausedEvent
 *
 * @param account address
 */
export type GroupingModulePausedEvent = {
    account: Address;
};
/**
 * GroupingModuleRemovedIpFromGroupEvent
 *
 * @param groupId address
 * @param ipIds address[]
 */
export type GroupingModuleRemovedIpFromGroupEvent = {
    groupId: Address;
    ipIds: readonly Address[];
};
/**
 * GroupingModuleUnpausedEvent
 *
 * @param account address
 */
export type GroupingModuleUnpausedEvent = {
    account: Address;
};
/**
 * GroupingModuleUpgradedEvent
 *
 * @param implementation address
 */
export type GroupingModuleUpgradedEvent = {
    implementation: Address;
};
export type GroupingModuleAccessControllerResponse = Address;
export type GroupingModuleDisputeModuleResponse = Address;
export type GroupingModuleGroupIpAssetRegistryResponse = Address;
export type GroupingModuleGroupNftResponse = Address;
export type GroupingModuleIpAssetRegistryResponse = Address;
export type GroupingModuleLicenseRegistryResponse = Address;
export type GroupingModuleLicenseTokenResponse = Address;
export type GroupingModuleRoyaltyModuleResponse = Address;
export type GroupingModuleUpgradeInterfaceVersionResponse = string;
export type GroupingModuleAuthorityResponse = Address;
/**
 * GroupingModuleGetClaimableRewardRequest
 *
 * @param groupId address
 * @param token address
 * @param ipIds address[]
 */
export type GroupingModuleGetClaimableRewardRequest = {
    groupId: Address;
    token: Address;
    ipIds: readonly Address[];
};
export type GroupingModuleGetClaimableRewardResponse = readonly bigint[];
export type GroupingModuleIsConsumingScheduledOpResponse = Hex;
export type GroupingModuleNameResponse = string;
export type GroupingModulePausedResponse = boolean;
export type GroupingModuleProxiableUuidResponse = Hex;
/**
 * GroupingModuleSupportsInterfaceRequest
 *
 * @param interfaceId bytes4
 */
export type GroupingModuleSupportsInterfaceRequest = {
    interfaceId: Hex;
};
export type GroupingModuleSupportsInterfaceResponse = boolean;
/**
 * GroupingModuleProtocolPausableInitRequest
 *
 * @param accessManager address
 */
export type GroupingModuleProtocolPausableInitRequest = {
    accessManager: Address;
};
/**
 * GroupingModuleAddIpRequest
 *
 * @param groupIpId address
 * @param ipIds address[]
 * @param maxAllowedRewardShare uint256
 */
export type GroupingModuleAddIpRequest = {
    groupIpId: Address;
    ipIds: readonly Address[];
    maxAllowedRewardShare: bigint;
};
/**
 * GroupingModuleClaimRewardRequest
 *
 * @param groupId address
 * @param token address
 * @param ipIds address[]
 */
export type GroupingModuleClaimRewardRequest = {
    groupId: Address;
    token: Address;
    ipIds: readonly Address[];
};
/**
 * GroupingModuleCollectRoyaltiesRequest
 *
 * @param groupId address
 * @param token address
 */
export type GroupingModuleCollectRoyaltiesRequest = {
    groupId: Address;
    token: Address;
};
/**
 * GroupingModuleInitializeRequest
 *
 * @param accessManager address
 */
export type GroupingModuleInitializeRequest = {
    accessManager: Address;
};
/**
 * GroupingModuleRegisterGroupRequest
 *
 * @param groupPool address
 */
export type GroupingModuleRegisterGroupRequest = {
    groupPool: Address;
};
/**
 * GroupingModuleRemoveIpRequest
 *
 * @param groupIpId address
 * @param ipIds address[]
 */
export type GroupingModuleRemoveIpRequest = {
    groupIpId: Address;
    ipIds: readonly Address[];
};
/**
 * GroupingModuleSetAuthorityRequest
 *
 * @param newAuthority address
 */
export type GroupingModuleSetAuthorityRequest = {
    newAuthority: Address;
};
/**
 * GroupingModuleUpgradeToAndCallRequest
 *
 * @param newImplementation address
 * @param data bytes
 */
export type GroupingModuleUpgradeToAndCallRequest = {
    newImplementation: Address;
    data: Hex;
};
/**
 * GroupingModuleWhitelistGroupRewardPoolRequest
 *
 * @param rewardPool address
 * @param allowed bool
 */
export type GroupingModuleWhitelistGroupRewardPoolRequest = {
    rewardPool: Address;
    allowed: boolean;
};
/**
 * contract GroupingModule event
 */
export declare class GroupingModuleEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event AddedIpToGroup for contract GroupingModule
     */
    watchAddedIpToGroupEvent(onLogs: (txHash: Hex, ev: Partial<GroupingModuleAddedIpToGroupEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event AddedIpToGroup for contract GroupingModule
     */
    parseTxAddedIpToGroupEvent(txReceipt: TransactionReceipt): Array<GroupingModuleAddedIpToGroupEvent>;
    /**
     * event AuthorityUpdated for contract GroupingModule
     */
    watchAuthorityUpdatedEvent(onLogs: (txHash: Hex, ev: Partial<GroupingModuleAuthorityUpdatedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event AuthorityUpdated for contract GroupingModule
     */
    parseTxAuthorityUpdatedEvent(txReceipt: TransactionReceipt): Array<GroupingModuleAuthorityUpdatedEvent>;
    /**
     * event ClaimedReward for contract GroupingModule
     */
    watchClaimedRewardEvent(onLogs: (txHash: Hex, ev: Partial<GroupingModuleClaimedRewardEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event ClaimedReward for contract GroupingModule
     */
    parseTxClaimedRewardEvent(txReceipt: TransactionReceipt): Array<GroupingModuleClaimedRewardEvent>;
    /**
     * event CollectedRoyaltiesToGroupPool for contract GroupingModule
     */
    watchCollectedRoyaltiesToGroupPoolEvent(onLogs: (txHash: Hex, ev: Partial<GroupingModuleCollectedRoyaltiesToGroupPoolEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event CollectedRoyaltiesToGroupPool for contract GroupingModule
     */
    parseTxCollectedRoyaltiesToGroupPoolEvent(txReceipt: TransactionReceipt): Array<GroupingModuleCollectedRoyaltiesToGroupPoolEvent>;
    /**
     * event IPGroupRegistered for contract GroupingModule
     */
    watchIpGroupRegisteredEvent(onLogs: (txHash: Hex, ev: Partial<GroupingModuleIpGroupRegisteredEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event IPGroupRegistered for contract GroupingModule
     */
    parseTxIpGroupRegisteredEvent(txReceipt: TransactionReceipt): Array<GroupingModuleIpGroupRegisteredEvent>;
    /**
     * event Initialized for contract GroupingModule
     */
    watchInitializedEvent(onLogs: (txHash: Hex, ev: Partial<GroupingModuleInitializedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Initialized for contract GroupingModule
     */
    parseTxInitializedEvent(txReceipt: TransactionReceipt): Array<GroupingModuleInitializedEvent>;
    /**
     * event Paused for contract GroupingModule
     */
    watchPausedEvent(onLogs: (txHash: Hex, ev: Partial<GroupingModulePausedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Paused for contract GroupingModule
     */
    parseTxPausedEvent(txReceipt: TransactionReceipt): Array<GroupingModulePausedEvent>;
    /**
     * event RemovedIpFromGroup for contract GroupingModule
     */
    watchRemovedIpFromGroupEvent(onLogs: (txHash: Hex, ev: Partial<GroupingModuleRemovedIpFromGroupEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event RemovedIpFromGroup for contract GroupingModule
     */
    parseTxRemovedIpFromGroupEvent(txReceipt: TransactionReceipt): Array<GroupingModuleRemovedIpFromGroupEvent>;
    /**
     * event Unpaused for contract GroupingModule
     */
    watchUnpausedEvent(onLogs: (txHash: Hex, ev: Partial<GroupingModuleUnpausedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Unpaused for contract GroupingModule
     */
    parseTxUnpausedEvent(txReceipt: TransactionReceipt): Array<GroupingModuleUnpausedEvent>;
    /**
     * event Upgraded for contract GroupingModule
     */
    watchUpgradedEvent(onLogs: (txHash: Hex, ev: Partial<GroupingModuleUpgradedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Upgraded for contract GroupingModule
     */
    parseTxUpgradedEvent(txReceipt: TransactionReceipt): Array<GroupingModuleUpgradedEvent>;
}
/**
 * contract GroupingModule readonly method
 */
export declare class GroupingModuleReadOnlyClient extends GroupingModuleEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method ACCESS_CONTROLLER for contract GroupingModule
     *
     * @param request GroupingModuleAccessControllerRequest
     * @return Promise<GroupingModuleAccessControllerResponse>
     */
    accessController(): Promise<GroupingModuleAccessControllerResponse>;
    /**
     * method DISPUTE_MODULE for contract GroupingModule
     *
     * @param request GroupingModuleDisputeModuleRequest
     * @return Promise<GroupingModuleDisputeModuleResponse>
     */
    disputeModule(): Promise<GroupingModuleDisputeModuleResponse>;
    /**
     * method GROUP_IP_ASSET_REGISTRY for contract GroupingModule
     *
     * @param request GroupingModuleGroupIpAssetRegistryRequest
     * @return Promise<GroupingModuleGroupIpAssetRegistryResponse>
     */
    groupIpAssetRegistry(): Promise<GroupingModuleGroupIpAssetRegistryResponse>;
    /**
     * method GROUP_NFT for contract GroupingModule
     *
     * @param request GroupingModuleGroupNftRequest
     * @return Promise<GroupingModuleGroupNftResponse>
     */
    groupNft(): Promise<GroupingModuleGroupNftResponse>;
    /**
     * method IP_ASSET_REGISTRY for contract GroupingModule
     *
     * @param request GroupingModuleIpAssetRegistryRequest
     * @return Promise<GroupingModuleIpAssetRegistryResponse>
     */
    ipAssetRegistry(): Promise<GroupingModuleIpAssetRegistryResponse>;
    /**
     * method LICENSE_REGISTRY for contract GroupingModule
     *
     * @param request GroupingModuleLicenseRegistryRequest
     * @return Promise<GroupingModuleLicenseRegistryResponse>
     */
    licenseRegistry(): Promise<GroupingModuleLicenseRegistryResponse>;
    /**
     * method LICENSE_TOKEN for contract GroupingModule
     *
     * @param request GroupingModuleLicenseTokenRequest
     * @return Promise<GroupingModuleLicenseTokenResponse>
     */
    licenseToken(): Promise<GroupingModuleLicenseTokenResponse>;
    /**
     * method ROYALTY_MODULE for contract GroupingModule
     *
     * @param request GroupingModuleRoyaltyModuleRequest
     * @return Promise<GroupingModuleRoyaltyModuleResponse>
     */
    royaltyModule(): Promise<GroupingModuleRoyaltyModuleResponse>;
    /**
     * method UPGRADE_INTERFACE_VERSION for contract GroupingModule
     *
     * @param request GroupingModuleUpgradeInterfaceVersionRequest
     * @return Promise<GroupingModuleUpgradeInterfaceVersionResponse>
     */
    upgradeInterfaceVersion(): Promise<GroupingModuleUpgradeInterfaceVersionResponse>;
    /**
     * method authority for contract GroupingModule
     *
     * @param request GroupingModuleAuthorityRequest
     * @return Promise<GroupingModuleAuthorityResponse>
     */
    authority(): Promise<GroupingModuleAuthorityResponse>;
    /**
     * method getClaimableReward for contract GroupingModule
     *
     * @param request GroupingModuleGetClaimableRewardRequest
     * @return Promise<GroupingModuleGetClaimableRewardResponse>
     */
    getClaimableReward(request: GroupingModuleGetClaimableRewardRequest): Promise<GroupingModuleGetClaimableRewardResponse>;
    /**
     * method isConsumingScheduledOp for contract GroupingModule
     *
     * @param request GroupingModuleIsConsumingScheduledOpRequest
     * @return Promise<GroupingModuleIsConsumingScheduledOpResponse>
     */
    isConsumingScheduledOp(): Promise<GroupingModuleIsConsumingScheduledOpResponse>;
    /**
     * method name for contract GroupingModule
     *
     * @param request GroupingModuleNameRequest
     * @return Promise<GroupingModuleNameResponse>
     */
    name(): Promise<GroupingModuleNameResponse>;
    /**
     * method paused for contract GroupingModule
     *
     * @param request GroupingModulePausedRequest
     * @return Promise<GroupingModulePausedResponse>
     */
    paused(): Promise<GroupingModulePausedResponse>;
    /**
     * method proxiableUUID for contract GroupingModule
     *
     * @param request GroupingModuleProxiableUuidRequest
     * @return Promise<GroupingModuleProxiableUuidResponse>
     */
    proxiableUuid(): Promise<GroupingModuleProxiableUuidResponse>;
    /**
     * method supportsInterface for contract GroupingModule
     *
     * @param request GroupingModuleSupportsInterfaceRequest
     * @return Promise<GroupingModuleSupportsInterfaceResponse>
     */
    supportsInterface(request: GroupingModuleSupportsInterfaceRequest): Promise<GroupingModuleSupportsInterfaceResponse>;
}
/**
 * contract GroupingModule write method
 */
export declare class GroupingModuleClient extends GroupingModuleReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method __ProtocolPausable_init for contract GroupingModule
     *
     * @param request GroupingModuleProtocolPausableInitRequest
     * @return Promise<WriteContractReturnType>
     */
    protocolPausableInit(request: GroupingModuleProtocolPausableInitRequest): Promise<WriteContractReturnType>;
    /**
     * method __ProtocolPausable_init for contract GroupingModule with only encode
     *
     * @param request GroupingModuleProtocolPausableInitRequest
     * @return EncodedTxData
     */
    protocolPausableInitEncode(request: GroupingModuleProtocolPausableInitRequest): EncodedTxData;
    /**
     * method addIp for contract GroupingModule
     *
     * @param request GroupingModuleAddIpRequest
     * @return Promise<WriteContractReturnType>
     */
    addIp(request: GroupingModuleAddIpRequest): Promise<WriteContractReturnType>;
    /**
     * method addIp for contract GroupingModule with only encode
     *
     * @param request GroupingModuleAddIpRequest
     * @return EncodedTxData
     */
    addIpEncode(request: GroupingModuleAddIpRequest): EncodedTxData;
    /**
     * method claimReward for contract GroupingModule
     *
     * @param request GroupingModuleClaimRewardRequest
     * @return Promise<WriteContractReturnType>
     */
    claimReward(request: GroupingModuleClaimRewardRequest): Promise<WriteContractReturnType>;
    /**
     * method claimReward for contract GroupingModule with only encode
     *
     * @param request GroupingModuleClaimRewardRequest
     * @return EncodedTxData
     */
    claimRewardEncode(request: GroupingModuleClaimRewardRequest): EncodedTxData;
    /**
     * method collectRoyalties for contract GroupingModule
     *
     * @param request GroupingModuleCollectRoyaltiesRequest
     * @return Promise<WriteContractReturnType>
     */
    collectRoyalties(request: GroupingModuleCollectRoyaltiesRequest): Promise<WriteContractReturnType>;
    /**
     * method collectRoyalties for contract GroupingModule with only encode
     *
     * @param request GroupingModuleCollectRoyaltiesRequest
     * @return EncodedTxData
     */
    collectRoyaltiesEncode(request: GroupingModuleCollectRoyaltiesRequest): EncodedTxData;
    /**
     * method initialize for contract GroupingModule
     *
     * @param request GroupingModuleInitializeRequest
     * @return Promise<WriteContractReturnType>
     */
    initialize(request: GroupingModuleInitializeRequest): Promise<WriteContractReturnType>;
    /**
     * method initialize for contract GroupingModule with only encode
     *
     * @param request GroupingModuleInitializeRequest
     * @return EncodedTxData
     */
    initializeEncode(request: GroupingModuleInitializeRequest): EncodedTxData;
    /**
     * method pause for contract GroupingModule
     *
     * @param request GroupingModulePauseRequest
     * @return Promise<WriteContractReturnType>
     */
    pause(): Promise<WriteContractReturnType>;
    /**
     * method pause for contract GroupingModule with only encode
     *
     * @param request GroupingModulePauseRequest
     * @return EncodedTxData
     */
    pauseEncode(): EncodedTxData;
    /**
     * method registerGroup for contract GroupingModule
     *
     * @param request GroupingModuleRegisterGroupRequest
     * @return Promise<WriteContractReturnType>
     */
    registerGroup(request: GroupingModuleRegisterGroupRequest): Promise<WriteContractReturnType>;
    /**
     * method registerGroup for contract GroupingModule with only encode
     *
     * @param request GroupingModuleRegisterGroupRequest
     * @return EncodedTxData
     */
    registerGroupEncode(request: GroupingModuleRegisterGroupRequest): EncodedTxData;
    /**
     * method removeIp for contract GroupingModule
     *
     * @param request GroupingModuleRemoveIpRequest
     * @return Promise<WriteContractReturnType>
     */
    removeIp(request: GroupingModuleRemoveIpRequest): Promise<WriteContractReturnType>;
    /**
     * method removeIp for contract GroupingModule with only encode
     *
     * @param request GroupingModuleRemoveIpRequest
     * @return EncodedTxData
     */
    removeIpEncode(request: GroupingModuleRemoveIpRequest): EncodedTxData;
    /**
     * method setAuthority for contract GroupingModule
     *
     * @param request GroupingModuleSetAuthorityRequest
     * @return Promise<WriteContractReturnType>
     */
    setAuthority(request: GroupingModuleSetAuthorityRequest): Promise<WriteContractReturnType>;
    /**
     * method setAuthority for contract GroupingModule with only encode
     *
     * @param request GroupingModuleSetAuthorityRequest
     * @return EncodedTxData
     */
    setAuthorityEncode(request: GroupingModuleSetAuthorityRequest): EncodedTxData;
    /**
     * method unpause for contract GroupingModule
     *
     * @param request GroupingModuleUnpauseRequest
     * @return Promise<WriteContractReturnType>
     */
    unpause(): Promise<WriteContractReturnType>;
    /**
     * method unpause for contract GroupingModule with only encode
     *
     * @param request GroupingModuleUnpauseRequest
     * @return EncodedTxData
     */
    unpauseEncode(): EncodedTxData;
    /**
     * method upgradeToAndCall for contract GroupingModule
     *
     * @param request GroupingModuleUpgradeToAndCallRequest
     * @return Promise<WriteContractReturnType>
     */
    upgradeToAndCall(request: GroupingModuleUpgradeToAndCallRequest): Promise<WriteContractReturnType>;
    /**
     * method upgradeToAndCall for contract GroupingModule with only encode
     *
     * @param request GroupingModuleUpgradeToAndCallRequest
     * @return EncodedTxData
     */
    upgradeToAndCallEncode(request: GroupingModuleUpgradeToAndCallRequest): EncodedTxData;
    /**
     * method whitelistGroupRewardPool for contract GroupingModule
     *
     * @param request GroupingModuleWhitelistGroupRewardPoolRequest
     * @return Promise<WriteContractReturnType>
     */
    whitelistGroupRewardPool(request: GroupingModuleWhitelistGroupRewardPoolRequest): Promise<WriteContractReturnType>;
    /**
     * method whitelistGroupRewardPool for contract GroupingModule with only encode
     *
     * @param request GroupingModuleWhitelistGroupRewardPoolRequest
     * @return EncodedTxData
     */
    whitelistGroupRewardPoolEncode(request: GroupingModuleWhitelistGroupRewardPoolRequest): EncodedTxData;
}
/**
 * GroupingWorkflowsMintAndRegisterIpAndAttachLicenseAndAddToGroupRequest
 *
 * @param spgNftContract address
 * @param groupId address
 * @param recipient address
 * @param maxAllowedRewardShare uint256
 * @param licensesData tuple[]
 * @param ipMetadata tuple
 * @param sigAddToGroup tuple
 * @param allowDuplicates bool
 */
export type GroupingWorkflowsMintAndRegisterIpAndAttachLicenseAndAddToGroupRequest = {
    spgNftContract: Address;
    groupId: Address;
    recipient: Address;
    maxAllowedRewardShare: bigint;
    licensesData: {
        licenseTemplate: Address;
        licenseTermsId: bigint;
        licensingConfig: {
            isSet: boolean;
            mintingFee: bigint;
            licensingHook: Address;
            hookData: Hex;
            commercialRevShare: number;
            disabled: boolean;
            expectMinimumGroupRewardShare: number;
            expectGroupRewardPool: Address;
        };
    }[];
    ipMetadata: {
        ipMetadataURI: string;
        ipMetadataHash: Hex;
        nftMetadataURI: string;
        nftMetadataHash: Hex;
    };
    sigAddToGroup: {
        signer: Address;
        deadline: bigint;
        signature: Hex;
    };
    allowDuplicates: boolean;
};
/**
 * GroupingWorkflowsRegisterGroupAndAttachLicenseRequest
 *
 * @param groupPool address
 * @param licenseData tuple
 */
export type GroupingWorkflowsRegisterGroupAndAttachLicenseRequest = {
    groupPool: Address;
    licenseData: {
        licenseTemplate: Address;
        licenseTermsId: bigint;
        licensingConfig: {
            isSet: boolean;
            mintingFee: bigint;
            licensingHook: Address;
            hookData: Hex;
            commercialRevShare: number;
            disabled: boolean;
            expectMinimumGroupRewardShare: number;
            expectGroupRewardPool: Address;
        };
    };
};
/**
 * GroupingWorkflowsRegisterGroupAndAttachLicenseAndAddIpsRequest
 *
 * @param groupPool address
 * @param ipIds address[]
 * @param maxAllowedRewardShare uint256
 * @param licenseData tuple
 */
export type GroupingWorkflowsRegisterGroupAndAttachLicenseAndAddIpsRequest = {
    groupPool: Address;
    ipIds: readonly Address[];
    maxAllowedRewardShare: bigint;
    licenseData: {
        licenseTemplate: Address;
        licenseTermsId: bigint;
        licensingConfig: {
            isSet: boolean;
            mintingFee: bigint;
            licensingHook: Address;
            hookData: Hex;
            commercialRevShare: number;
            disabled: boolean;
            expectMinimumGroupRewardShare: number;
            expectGroupRewardPool: Address;
        };
    };
};
/**
 * GroupingWorkflowsRegisterIpAndAttachLicenseAndAddToGroupRequest
 *
 * @param nftContract address
 * @param tokenId uint256
 * @param groupId address
 * @param maxAllowedRewardShare uint256
 * @param licensesData tuple[]
 * @param ipMetadata tuple
 * @param sigMetadataAndAttachAndConfig tuple
 * @param sigAddToGroup tuple
 */
export type GroupingWorkflowsRegisterIpAndAttachLicenseAndAddToGroupRequest = {
    nftContract: Address;
    tokenId: bigint;
    groupId: Address;
    maxAllowedRewardShare: bigint;
    licensesData: {
        licenseTemplate: Address;
        licenseTermsId: bigint;
        licensingConfig: {
            isSet: boolean;
            mintingFee: bigint;
            licensingHook: Address;
            hookData: Hex;
            commercialRevShare: number;
            disabled: boolean;
            expectMinimumGroupRewardShare: number;
            expectGroupRewardPool: Address;
        };
    }[];
    ipMetadata: {
        ipMetadataURI: string;
        ipMetadataHash: Hex;
        nftMetadataURI: string;
        nftMetadataHash: Hex;
    };
    sigMetadataAndAttachAndConfig: {
        signer: Address;
        deadline: bigint;
        signature: Hex;
    };
    sigAddToGroup: {
        signer: Address;
        deadline: bigint;
        signature: Hex;
    };
};
/**
 * contract GroupingWorkflows write method
 */
export declare class GroupingWorkflowsClient {
    protected readonly wallet: SimpleWalletClient;
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method mintAndRegisterIpAndAttachLicenseAndAddToGroup for contract GroupingWorkflows
     *
     * @param request GroupingWorkflowsMintAndRegisterIpAndAttachLicenseAndAddToGroupRequest
     * @return Promise<WriteContractReturnType>
     */
    mintAndRegisterIpAndAttachLicenseAndAddToGroup(request: GroupingWorkflowsMintAndRegisterIpAndAttachLicenseAndAddToGroupRequest): Promise<WriteContractReturnType>;
    /**
     * method mintAndRegisterIpAndAttachLicenseAndAddToGroup for contract GroupingWorkflows with only encode
     *
     * @param request GroupingWorkflowsMintAndRegisterIpAndAttachLicenseAndAddToGroupRequest
     * @return EncodedTxData
     */
    mintAndRegisterIpAndAttachLicenseAndAddToGroupEncode(request: GroupingWorkflowsMintAndRegisterIpAndAttachLicenseAndAddToGroupRequest): EncodedTxData;
    /**
     * method registerGroupAndAttachLicense for contract GroupingWorkflows
     *
     * @param request GroupingWorkflowsRegisterGroupAndAttachLicenseRequest
     * @return Promise<WriteContractReturnType>
     */
    registerGroupAndAttachLicense(request: GroupingWorkflowsRegisterGroupAndAttachLicenseRequest): Promise<WriteContractReturnType>;
    /**
     * method registerGroupAndAttachLicense for contract GroupingWorkflows with only encode
     *
     * @param request GroupingWorkflowsRegisterGroupAndAttachLicenseRequest
     * @return EncodedTxData
     */
    registerGroupAndAttachLicenseEncode(request: GroupingWorkflowsRegisterGroupAndAttachLicenseRequest): EncodedTxData;
    /**
     * method registerGroupAndAttachLicenseAndAddIps for contract GroupingWorkflows
     *
     * @param request GroupingWorkflowsRegisterGroupAndAttachLicenseAndAddIpsRequest
     * @return Promise<WriteContractReturnType>
     */
    registerGroupAndAttachLicenseAndAddIps(request: GroupingWorkflowsRegisterGroupAndAttachLicenseAndAddIpsRequest): Promise<WriteContractReturnType>;
    /**
     * method registerGroupAndAttachLicenseAndAddIps for contract GroupingWorkflows with only encode
     *
     * @param request GroupingWorkflowsRegisterGroupAndAttachLicenseAndAddIpsRequest
     * @return EncodedTxData
     */
    registerGroupAndAttachLicenseAndAddIpsEncode(request: GroupingWorkflowsRegisterGroupAndAttachLicenseAndAddIpsRequest): EncodedTxData;
    /**
     * method registerIpAndAttachLicenseAndAddToGroup for contract GroupingWorkflows
     *
     * @param request GroupingWorkflowsRegisterIpAndAttachLicenseAndAddToGroupRequest
     * @return Promise<WriteContractReturnType>
     */
    registerIpAndAttachLicenseAndAddToGroup(request: GroupingWorkflowsRegisterIpAndAttachLicenseAndAddToGroupRequest): Promise<WriteContractReturnType>;
    /**
     * method registerIpAndAttachLicenseAndAddToGroup for contract GroupingWorkflows with only encode
     *
     * @param request GroupingWorkflowsRegisterIpAndAttachLicenseAndAddToGroupRequest
     * @return EncodedTxData
     */
    registerIpAndAttachLicenseAndAddToGroupEncode(request: GroupingWorkflowsRegisterIpAndAttachLicenseAndAddToGroupRequest): EncodedTxData;
}
export type IpAccountImplOwnerResponse = Address;
/**
 * IpAccountImplStateResponse
 *
 * @param result bytes32
 */
export type IpAccountImplStateResponse = {
    result: Hex;
};
/**
 * IpAccountImplTokenResponse
 *
 * @param 0 uint256
 * @param 1 address
 * @param 2 uint256
 */
export type IpAccountImplTokenResponse = readonly [bigint, Address, bigint];
/**
 * IpAccountImplExecuteRequest
 *
 * @param to address
 * @param value uint256
 * @param data bytes
 * @param operation uint8
 */
export type IpAccountImplExecuteRequest = {
    to: Address;
    value: bigint;
    data: Hex;
    operation: number;
};
/**
 * IpAccountImplExecute2Request
 *
 * @param to address
 * @param value uint256
 * @param data bytes
 */
export type IpAccountImplExecute2Request = {
    to: Address;
    value: bigint;
    data: Hex;
};
/**
 * IpAccountImplExecuteWithSigRequest
 *
 * @param to address
 * @param value uint256
 * @param data bytes
 * @param signer address
 * @param deadline uint256
 * @param signature bytes
 */
export type IpAccountImplExecuteWithSigRequest = {
    to: Address;
    value: bigint;
    data: Hex;
    signer: Address;
    deadline: bigint;
    signature: Hex;
};
/**
 * contract IPAccountImpl readonly method
 */
export declare class IpAccountImplReadOnlyClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method owner for contract IPAccountImpl
     *
     * @param request IpAccountImplOwnerRequest
     * @return Promise<IpAccountImplOwnerResponse>
     */
    owner(): Promise<IpAccountImplOwnerResponse>;
    /**
     * method state for contract IPAccountImpl
     *
     * @param request IpAccountImplStateRequest
     * @return Promise<IpAccountImplStateResponse>
     */
    state(): Promise<IpAccountImplStateResponse>;
    /**
     * method token for contract IPAccountImpl
     *
     * @param request IpAccountImplTokenRequest
     * @return Promise<IpAccountImplTokenResponse>
     */
    token(): Promise<IpAccountImplTokenResponse>;
}
/**
 * contract IPAccountImpl write method
 */
export declare class IpAccountImplClient extends IpAccountImplReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method execute for contract IPAccountImpl
     *
     * @param request IpAccountImplExecuteRequest
     * @return Promise<WriteContractReturnType>
     */
    execute(request: IpAccountImplExecuteRequest): Promise<WriteContractReturnType>;
    /**
     * method execute for contract IPAccountImpl with only encode
     *
     * @param request IpAccountImplExecuteRequest
     * @return EncodedTxData
     */
    executeEncode(request: IpAccountImplExecuteRequest): EncodedTxData;
    /**
     * method execute for contract IPAccountImpl
     *
     * @param request IpAccountImplExecute2Request
     * @return Promise<WriteContractReturnType>
     */
    execute2(request: IpAccountImplExecute2Request): Promise<WriteContractReturnType>;
    /**
     * method execute for contract IPAccountImpl with only encode
     *
     * @param request IpAccountImplExecute2Request
     * @return EncodedTxData
     */
    execute2Encode(request: IpAccountImplExecute2Request): EncodedTxData;
    /**
     * method executeWithSig for contract IPAccountImpl
     *
     * @param request IpAccountImplExecuteWithSigRequest
     * @return Promise<WriteContractReturnType>
     */
    executeWithSig(request: IpAccountImplExecuteWithSigRequest): Promise<WriteContractReturnType>;
    /**
     * method executeWithSig for contract IPAccountImpl with only encode
     *
     * @param request IpAccountImplExecuteWithSigRequest
     * @return EncodedTxData
     */
    executeWithSigEncode(request: IpAccountImplExecuteWithSigRequest): EncodedTxData;
}
/**
 * IpAssetRegistryIpAccountRegisteredEvent
 *
 * @param account address
 * @param implementation address
 * @param chainId uint256
 * @param tokenContract address
 * @param tokenId uint256
 */
export type IpAssetRegistryIpAccountRegisteredEvent = {
    account: Address;
    implementation: Address;
    chainId: bigint;
    tokenContract: Address;
    tokenId: bigint;
};
/**
 * IpAssetRegistryIpRegisteredEvent
 *
 * @param ipId address
 * @param chainId uint256
 * @param tokenContract address
 * @param tokenId uint256
 * @param name string
 * @param uri string
 * @param registrationDate uint256
 */
export type IpAssetRegistryIpRegisteredEvent = {
    ipId: Address;
    chainId: bigint;
    tokenContract: Address;
    tokenId: bigint;
    name: string;
    uri: string;
    registrationDate: bigint;
};
/**
 * IpAssetRegistryIpIdRequest
 *
 * @param chainId uint256
 * @param tokenContract address
 * @param tokenId uint256
 */
export type IpAssetRegistryIpIdRequest = {
    chainId: bigint;
    tokenContract: Address;
    tokenId: bigint;
};
export type IpAssetRegistryIpIdResponse = Address;
/**
 * IpAssetRegistryIsRegisteredRequest
 *
 * @param id address
 */
export type IpAssetRegistryIsRegisteredRequest = {
    id: Address;
};
export type IpAssetRegistryIsRegisteredResponse = boolean;
/**
 * IpAssetRegistryRegisterRequest
 *
 * @param chainid uint256
 * @param tokenContract address
 * @param tokenId uint256
 */
export type IpAssetRegistryRegisterRequest = {
    chainid: bigint;
    tokenContract: Address;
    tokenId: bigint;
};
/**
 * contract IPAssetRegistry event
 */
export declare class IpAssetRegistryEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event IPAccountRegistered for contract IPAssetRegistry
     */
    watchIpAccountRegisteredEvent(onLogs: (txHash: Hex, ev: Partial<IpAssetRegistryIpAccountRegisteredEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event IPAccountRegistered for contract IPAssetRegistry
     */
    parseTxIpAccountRegisteredEvent(txReceipt: TransactionReceipt): Array<IpAssetRegistryIpAccountRegisteredEvent>;
    /**
     * event IPRegistered for contract IPAssetRegistry
     */
    watchIpRegisteredEvent(onLogs: (txHash: Hex, ev: Partial<IpAssetRegistryIpRegisteredEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event IPRegistered for contract IPAssetRegistry
     */
    parseTxIpRegisteredEvent(txReceipt: TransactionReceipt): Array<IpAssetRegistryIpRegisteredEvent>;
}
/**
 * contract IPAssetRegistry readonly method
 */
export declare class IpAssetRegistryReadOnlyClient extends IpAssetRegistryEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method ipId for contract IPAssetRegistry
     *
     * @param request IpAssetRegistryIpIdRequest
     * @return Promise<IpAssetRegistryIpIdResponse>
     */
    ipId(request: IpAssetRegistryIpIdRequest): Promise<IpAssetRegistryIpIdResponse>;
    /**
     * method isRegistered for contract IPAssetRegistry
     *
     * @param request IpAssetRegistryIsRegisteredRequest
     * @return Promise<IpAssetRegistryIsRegisteredResponse>
     */
    isRegistered(request: IpAssetRegistryIsRegisteredRequest): Promise<IpAssetRegistryIsRegisteredResponse>;
}
/**
 * contract IPAssetRegistry write method
 */
export declare class IpAssetRegistryClient extends IpAssetRegistryReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method register for contract IPAssetRegistry
     *
     * @param request IpAssetRegistryRegisterRequest
     * @return Promise<WriteContractReturnType>
     */
    register(request: IpAssetRegistryRegisterRequest): Promise<WriteContractReturnType>;
    /**
     * method register for contract IPAssetRegistry with only encode
     *
     * @param request IpAssetRegistryRegisterRequest
     * @return EncodedTxData
     */
    registerEncode(request: IpAssetRegistryRegisterRequest): EncodedTxData;
}
/**
 * IpRoyaltyVaultImplRevenueTokenClaimedEvent
 *
 * @param claimer address
 * @param token address
 * @param amount uint256
 */
export type IpRoyaltyVaultImplRevenueTokenClaimedEvent = {
    claimer: Address;
    token: Address;
    amount: bigint;
};
/**
 * IpRoyaltyVaultImplBalanceOfRequest
 *
 * @param account address
 */
export type IpRoyaltyVaultImplBalanceOfRequest = {
    account: Address;
};
export type IpRoyaltyVaultImplBalanceOfResponse = bigint;
/**
 * IpRoyaltyVaultImplClaimableRevenueRequest
 *
 * @param claimer address
 * @param token address
 */
export type IpRoyaltyVaultImplClaimableRevenueRequest = {
    claimer: Address;
    token: Address;
};
export type IpRoyaltyVaultImplClaimableRevenueResponse = bigint;
export type IpRoyaltyVaultImplIpIdResponse = Address;
/**
 * contract IpRoyaltyVaultImpl event
 */
export declare class IpRoyaltyVaultImplEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event RevenueTokenClaimed for contract IpRoyaltyVaultImpl
     */
    watchRevenueTokenClaimedEvent(onLogs: (txHash: Hex, ev: Partial<IpRoyaltyVaultImplRevenueTokenClaimedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event RevenueTokenClaimed for contract IpRoyaltyVaultImpl
     */
    parseTxRevenueTokenClaimedEvent(txReceipt: TransactionReceipt): Array<IpRoyaltyVaultImplRevenueTokenClaimedEvent>;
}
/**
 * contract IpRoyaltyVaultImpl readonly method
 */
export declare class IpRoyaltyVaultImplReadOnlyClient extends IpRoyaltyVaultImplEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method balanceOf for contract IpRoyaltyVaultImpl
     *
     * @param request IpRoyaltyVaultImplBalanceOfRequest
     * @return Promise<IpRoyaltyVaultImplBalanceOfResponse>
     */
    balanceOf(request: IpRoyaltyVaultImplBalanceOfRequest): Promise<IpRoyaltyVaultImplBalanceOfResponse>;
    /**
     * method claimableRevenue for contract IpRoyaltyVaultImpl
     *
     * @param request IpRoyaltyVaultImplClaimableRevenueRequest
     * @return Promise<IpRoyaltyVaultImplClaimableRevenueResponse>
     */
    claimableRevenue(request: IpRoyaltyVaultImplClaimableRevenueRequest): Promise<IpRoyaltyVaultImplClaimableRevenueResponse>;
    /**
     * method ipId for contract IpRoyaltyVaultImpl
     *
     * @param request IpRoyaltyVaultImplIpIdRequest
     * @return Promise<IpRoyaltyVaultImplIpIdResponse>
     */
    ipId(): Promise<IpRoyaltyVaultImplIpIdResponse>;
}
/**
 * LicenseAttachmentWorkflowsMintAndRegisterIpAndAttachPilTermsRequest
 *
 * @param spgNftContract address
 * @param recipient address
 * @param ipMetadata tuple
 * @param licenseTermsData tuple[]
 * @param allowDuplicates bool
 */
export type LicenseAttachmentWorkflowsMintAndRegisterIpAndAttachPilTermsRequest = {
    spgNftContract: Address;
    recipient: Address;
    ipMetadata: {
        ipMetadataURI: string;
        ipMetadataHash: Hex;
        nftMetadataURI: string;
        nftMetadataHash: Hex;
    };
    licenseTermsData: {
        terms: {
            transferable: boolean;
            royaltyPolicy: Address;
            defaultMintingFee: bigint;
            expiration: bigint;
            commercialUse: boolean;
            commercialAttribution: boolean;
            commercializerChecker: Address;
            commercializerCheckerData: Hex;
            commercialRevShare: number;
            commercialRevCeiling: bigint;
            derivativesAllowed: boolean;
            derivativesAttribution: boolean;
            derivativesApproval: boolean;
            derivativesReciprocal: boolean;
            derivativeRevCeiling: bigint;
            currency: Address;
            uri: string;
        };
        licensingConfig: {
            isSet: boolean;
            mintingFee: bigint;
            licensingHook: Address;
            hookData: Hex;
            commercialRevShare: number;
            disabled: boolean;
            expectMinimumGroupRewardShare: number;
            expectGroupRewardPool: Address;
        };
    }[];
    allowDuplicates: boolean;
};
/**
 * LicenseAttachmentWorkflowsMulticallRequest
 *
 * @param data bytes[]
 */
export type LicenseAttachmentWorkflowsMulticallRequest = {
    data: readonly Hex[];
};
/**
 * LicenseAttachmentWorkflowsRegisterIpAndAttachPilTermsRequest
 *
 * @param nftContract address
 * @param tokenId uint256
 * @param ipMetadata tuple
 * @param licenseTermsData tuple[]
 * @param sigMetadataAndAttachAndConfig tuple
 */
export type LicenseAttachmentWorkflowsRegisterIpAndAttachPilTermsRequest = {
    nftContract: Address;
    tokenId: bigint;
    ipMetadata: {
        ipMetadataURI: string;
        ipMetadataHash: Hex;
        nftMetadataURI: string;
        nftMetadataHash: Hex;
    };
    licenseTermsData: {
        terms: {
            transferable: boolean;
            royaltyPolicy: Address;
            defaultMintingFee: bigint;
            expiration: bigint;
            commercialUse: boolean;
            commercialAttribution: boolean;
            commercializerChecker: Address;
            commercializerCheckerData: Hex;
            commercialRevShare: number;
            commercialRevCeiling: bigint;
            derivativesAllowed: boolean;
            derivativesAttribution: boolean;
            derivativesApproval: boolean;
            derivativesReciprocal: boolean;
            derivativeRevCeiling: bigint;
            currency: Address;
            uri: string;
        };
        licensingConfig: {
            isSet: boolean;
            mintingFee: bigint;
            licensingHook: Address;
            hookData: Hex;
            commercialRevShare: number;
            disabled: boolean;
            expectMinimumGroupRewardShare: number;
            expectGroupRewardPool: Address;
        };
    }[];
    sigMetadataAndAttachAndConfig: {
        signer: Address;
        deadline: bigint;
        signature: Hex;
    };
};
/**
 * LicenseAttachmentWorkflowsRegisterPilTermsAndAttachRequest
 *
 * @param ipId address
 * @param licenseTermsData tuple[]
 * @param sigAttachAndConfig tuple
 */
export type LicenseAttachmentWorkflowsRegisterPilTermsAndAttachRequest = {
    ipId: Address;
    licenseTermsData: {
        terms: {
            transferable: boolean;
            royaltyPolicy: Address;
            defaultMintingFee: bigint;
            expiration: bigint;
            commercialUse: boolean;
            commercialAttribution: boolean;
            commercializerChecker: Address;
            commercializerCheckerData: Hex;
            commercialRevShare: number;
            commercialRevCeiling: bigint;
            derivativesAllowed: boolean;
            derivativesAttribution: boolean;
            derivativesApproval: boolean;
            derivativesReciprocal: boolean;
            derivativeRevCeiling: bigint;
            currency: Address;
            uri: string;
        };
        licensingConfig: {
            isSet: boolean;
            mintingFee: bigint;
            licensingHook: Address;
            hookData: Hex;
            commercialRevShare: number;
            disabled: boolean;
            expectMinimumGroupRewardShare: number;
            expectGroupRewardPool: Address;
        };
    }[];
    sigAttachAndConfig: {
        signer: Address;
        deadline: bigint;
        signature: Hex;
    };
};
/**
 * contract LicenseAttachmentWorkflows write method
 */
export declare class LicenseAttachmentWorkflowsClient {
    protected readonly wallet: SimpleWalletClient;
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method mintAndRegisterIpAndAttachPILTerms for contract LicenseAttachmentWorkflows
     *
     * @param request LicenseAttachmentWorkflowsMintAndRegisterIpAndAttachPilTermsRequest
     * @return Promise<WriteContractReturnType>
     */
    mintAndRegisterIpAndAttachPilTerms(request: LicenseAttachmentWorkflowsMintAndRegisterIpAndAttachPilTermsRequest): Promise<WriteContractReturnType>;
    /**
     * method mintAndRegisterIpAndAttachPILTerms for contract LicenseAttachmentWorkflows with only encode
     *
     * @param request LicenseAttachmentWorkflowsMintAndRegisterIpAndAttachPilTermsRequest
     * @return EncodedTxData
     */
    mintAndRegisterIpAndAttachPilTermsEncode(request: LicenseAttachmentWorkflowsMintAndRegisterIpAndAttachPilTermsRequest): EncodedTxData;
    /**
     * method multicall for contract LicenseAttachmentWorkflows
     *
     * @param request LicenseAttachmentWorkflowsMulticallRequest
     * @return Promise<WriteContractReturnType>
     */
    multicall(request: LicenseAttachmentWorkflowsMulticallRequest): Promise<WriteContractReturnType>;
    /**
     * method multicall for contract LicenseAttachmentWorkflows with only encode
     *
     * @param request LicenseAttachmentWorkflowsMulticallRequest
     * @return EncodedTxData
     */
    multicallEncode(request: LicenseAttachmentWorkflowsMulticallRequest): EncodedTxData;
    /**
     * method registerIpAndAttachPILTerms for contract LicenseAttachmentWorkflows
     *
     * @param request LicenseAttachmentWorkflowsRegisterIpAndAttachPilTermsRequest
     * @return Promise<WriteContractReturnType>
     */
    registerIpAndAttachPilTerms(request: LicenseAttachmentWorkflowsRegisterIpAndAttachPilTermsRequest): Promise<WriteContractReturnType>;
    /**
     * method registerIpAndAttachPILTerms for contract LicenseAttachmentWorkflows with only encode
     *
     * @param request LicenseAttachmentWorkflowsRegisterIpAndAttachPilTermsRequest
     * @return EncodedTxData
     */
    registerIpAndAttachPilTermsEncode(request: LicenseAttachmentWorkflowsRegisterIpAndAttachPilTermsRequest): EncodedTxData;
    /**
     * method registerPILTermsAndAttach for contract LicenseAttachmentWorkflows
     *
     * @param request LicenseAttachmentWorkflowsRegisterPilTermsAndAttachRequest
     * @return Promise<WriteContractReturnType>
     */
    registerPilTermsAndAttach(request: LicenseAttachmentWorkflowsRegisterPilTermsAndAttachRequest): Promise<WriteContractReturnType>;
    /**
     * method registerPILTermsAndAttach for contract LicenseAttachmentWorkflows with only encode
     *
     * @param request LicenseAttachmentWorkflowsRegisterPilTermsAndAttachRequest
     * @return EncodedTxData
     */
    registerPilTermsAndAttachEncode(request: LicenseAttachmentWorkflowsRegisterPilTermsAndAttachRequest): EncodedTxData;
}
/**
 * LicenseRegistryAuthorityUpdatedEvent
 *
 * @param authority address
 */
export type LicenseRegistryAuthorityUpdatedEvent = {
    authority: Address;
};
/**
 * LicenseRegistryDefaultLicenseTermsSetEvent
 *
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicenseRegistryDefaultLicenseTermsSetEvent = {
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
/**
 * LicenseRegistryExpirationTimeSetEvent
 *
 * @param ipId address
 * @param expireTime uint256
 */
export type LicenseRegistryExpirationTimeSetEvent = {
    ipId: Address;
    expireTime: bigint;
};
/**
 * LicenseRegistryInitializedEvent
 *
 * @param version uint64
 */
export type LicenseRegistryInitializedEvent = {
    version: bigint;
};
/**
 * LicenseRegistryLicenseTemplateRegisteredEvent
 *
 * @param licenseTemplate address
 */
export type LicenseRegistryLicenseTemplateRegisteredEvent = {
    licenseTemplate: Address;
};
/**
 * LicenseRegistryLicensingConfigSetForLicenseEvent
 *
 * @param ipId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 * @param licensingConfig tuple
 */
export type LicenseRegistryLicensingConfigSetForLicenseEvent = {
    ipId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
    licensingConfig: {
        isSet: boolean;
        mintingFee: bigint;
        licensingHook: Address;
        hookData: Hex;
        commercialRevShare: number;
        disabled: boolean;
        expectMinimumGroupRewardShare: number;
        expectGroupRewardPool: Address;
    };
};
/**
 * LicenseRegistryUpgradedEvent
 *
 * @param implementation address
 */
export type LicenseRegistryUpgradedEvent = {
    implementation: Address;
};
export type LicenseRegistryDisputeModuleResponse = Address;
export type LicenseRegistryExpirationTimeResponse = Hex;
export type LicenseRegistryGroupIpAssetRegistryResponse = Address;
export type LicenseRegistryIpGraphResponse = Address;
export type LicenseRegistryIpGraphAclResponse = Address;
export type LicenseRegistryLicensingModuleResponse = Address;
export type LicenseRegistryMaxAncestorsResponse = bigint;
export type LicenseRegistryMaxParentsResponse = bigint;
export type LicenseRegistryUpgradeInterfaceVersionResponse = string;
export type LicenseRegistryAuthorityResponse = Address;
/**
 * LicenseRegistryExistsRequest
 *
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicenseRegistryExistsRequest = {
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
export type LicenseRegistryExistsResponse = boolean;
/**
 * LicenseRegistryGetAttachedLicenseTermsRequest
 *
 * @param ipId address
 * @param index uint256
 */
export type LicenseRegistryGetAttachedLicenseTermsRequest = {
    ipId: Address;
    index: bigint;
};
/**
 * LicenseRegistryGetAttachedLicenseTermsResponse
 *
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicenseRegistryGetAttachedLicenseTermsResponse = {
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
/**
 * LicenseRegistryGetAttachedLicenseTermsCountRequest
 *
 * @param ipId address
 */
export type LicenseRegistryGetAttachedLicenseTermsCountRequest = {
    ipId: Address;
};
export type LicenseRegistryGetAttachedLicenseTermsCountResponse = bigint;
/**
 * LicenseRegistryGetDefaultLicenseTermsResponse
 *
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicenseRegistryGetDefaultLicenseTermsResponse = {
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
/**
 * LicenseRegistryGetDerivativeIpRequest
 *
 * @param parentIpId address
 * @param index uint256
 */
export type LicenseRegistryGetDerivativeIpRequest = {
    parentIpId: Address;
    index: bigint;
};
/**
 * LicenseRegistryGetDerivativeIpResponse
 *
 * @param childIpId address
 */
export type LicenseRegistryGetDerivativeIpResponse = {
    childIpId: Address;
};
/**
 * LicenseRegistryGetDerivativeIpCountRequest
 *
 * @param parentIpId address
 */
export type LicenseRegistryGetDerivativeIpCountRequest = {
    parentIpId: Address;
};
export type LicenseRegistryGetDerivativeIpCountResponse = bigint;
/**
 * LicenseRegistryGetExpireTimeRequest
 *
 * @param ipId address
 */
export type LicenseRegistryGetExpireTimeRequest = {
    ipId: Address;
};
export type LicenseRegistryGetExpireTimeResponse = bigint;
/**
 * LicenseRegistryGetLicensingConfigRequest
 *
 * @param ipId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicenseRegistryGetLicensingConfigRequest = {
    ipId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
export type LicenseRegistryGetLicensingConfigResponse = {
    isSet: boolean;
    mintingFee: bigint;
    licensingHook: Address;
    hookData: Hex;
    commercialRevShare: number;
    disabled: boolean;
    expectMinimumGroupRewardShare: number;
    expectGroupRewardPool: Address;
};
/**
 * LicenseRegistryGetParentIpRequest
 *
 * @param childIpId address
 * @param index uint256
 */
export type LicenseRegistryGetParentIpRequest = {
    childIpId: Address;
    index: bigint;
};
/**
 * LicenseRegistryGetParentIpResponse
 *
 * @param parentIpId address
 */
export type LicenseRegistryGetParentIpResponse = {
    parentIpId: Address;
};
/**
 * LicenseRegistryGetParentIpCountRequest
 *
 * @param childIpId address
 */
export type LicenseRegistryGetParentIpCountRequest = {
    childIpId: Address;
};
export type LicenseRegistryGetParentIpCountResponse = bigint;
/**
 * LicenseRegistryGetParentLicenseTermsRequest
 *
 * @param childIpId address
 * @param parentIpId address
 */
export type LicenseRegistryGetParentLicenseTermsRequest = {
    childIpId: Address;
    parentIpId: Address;
};
/**
 * LicenseRegistryGetParentLicenseTermsResponse
 *
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicenseRegistryGetParentLicenseTermsResponse = {
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
/**
 * LicenseRegistryGetRoyaltyPercentRequest
 *
 * @param ipId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicenseRegistryGetRoyaltyPercentRequest = {
    ipId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
/**
 * LicenseRegistryGetRoyaltyPercentResponse
 *
 * @param royaltyPercent uint32
 */
export type LicenseRegistryGetRoyaltyPercentResponse = {
    royaltyPercent: number;
};
/**
 * LicenseRegistryHasDerivativeIpsRequest
 *
 * @param parentIpId address
 */
export type LicenseRegistryHasDerivativeIpsRequest = {
    parentIpId: Address;
};
export type LicenseRegistryHasDerivativeIpsResponse = boolean;
/**
 * LicenseRegistryHasIpAttachedLicenseTermsRequest
 *
 * @param ipId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicenseRegistryHasIpAttachedLicenseTermsRequest = {
    ipId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
export type LicenseRegistryHasIpAttachedLicenseTermsResponse = boolean;
export type LicenseRegistryIsConsumingScheduledOpResponse = Hex;
/**
 * LicenseRegistryIsDefaultLicenseRequest
 *
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicenseRegistryIsDefaultLicenseRequest = {
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
export type LicenseRegistryIsDefaultLicenseResponse = boolean;
/**
 * LicenseRegistryIsDerivativeIpRequest
 *
 * @param childIpId address
 */
export type LicenseRegistryIsDerivativeIpRequest = {
    childIpId: Address;
};
export type LicenseRegistryIsDerivativeIpResponse = boolean;
/**
 * LicenseRegistryIsExpiredNowRequest
 *
 * @param ipId address
 */
export type LicenseRegistryIsExpiredNowRequest = {
    ipId: Address;
};
export type LicenseRegistryIsExpiredNowResponse = boolean;
/**
 * LicenseRegistryIsParentIpRequest
 *
 * @param parentIpId address
 * @param childIpId address
 */
export type LicenseRegistryIsParentIpRequest = {
    parentIpId: Address;
    childIpId: Address;
};
export type LicenseRegistryIsParentIpResponse = boolean;
/**
 * LicenseRegistryIsRegisteredLicenseTemplateRequest
 *
 * @param licenseTemplate address
 */
export type LicenseRegistryIsRegisteredLicenseTemplateRequest = {
    licenseTemplate: Address;
};
export type LicenseRegistryIsRegisteredLicenseTemplateResponse = boolean;
export type LicenseRegistryProxiableUuidResponse = Hex;
/**
 * LicenseRegistryVerifyGroupAddIpRequest
 *
 * @param groupId address
 * @param groupRewardPool address
 * @param ipId address
 * @param groupLicenseTemplate address
 * @param groupLicenseTermsId uint256
 */
export type LicenseRegistryVerifyGroupAddIpRequest = {
    groupId: Address;
    groupRewardPool: Address;
    ipId: Address;
    groupLicenseTemplate: Address;
    groupLicenseTermsId: bigint;
};
/**
 * LicenseRegistryVerifyGroupAddIpResponse
 *
 * @param ipLicensingConfig tuple
 */
export type LicenseRegistryVerifyGroupAddIpResponse = {
    ipLicensingConfig: {
        isSet: boolean;
        mintingFee: bigint;
        licensingHook: Address;
        hookData: Hex;
        commercialRevShare: number;
        disabled: boolean;
        expectMinimumGroupRewardShare: number;
        expectGroupRewardPool: Address;
    };
};
/**
 * LicenseRegistryVerifyMintLicenseTokenRequest
 *
 * @param licensorIpId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 * @param isMintedByIpOwner bool
 */
export type LicenseRegistryVerifyMintLicenseTokenRequest = {
    licensorIpId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
    isMintedByIpOwner: boolean;
};
export type LicenseRegistryVerifyMintLicenseTokenResponse = {
    isSet: boolean;
    mintingFee: bigint;
    licensingHook: Address;
    hookData: Hex;
    commercialRevShare: number;
    disabled: boolean;
    expectMinimumGroupRewardShare: number;
    expectGroupRewardPool: Address;
};
/**
 * LicenseRegistryAttachLicenseTermsToIpRequest
 *
 * @param ipId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicenseRegistryAttachLicenseTermsToIpRequest = {
    ipId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
/**
 * LicenseRegistryGetAncestorsCountRequest
 *
 * @param ipId address
 */
export type LicenseRegistryGetAncestorsCountRequest = {
    ipId: Address;
};
/**
 * LicenseRegistryInitializeRequest
 *
 * @param accessManager address
 */
export type LicenseRegistryInitializeRequest = {
    accessManager: Address;
};
/**
 * LicenseRegistryRegisterDerivativeIpRequest
 *
 * @param childIpId address
 * @param parentIpIds address[]
 * @param licenseTemplate address
 * @param licenseTermsIds uint256[]
 * @param isUsingLicenseToken bool
 */
export type LicenseRegistryRegisterDerivativeIpRequest = {
    childIpId: Address;
    parentIpIds: readonly Address[];
    licenseTemplate: Address;
    licenseTermsIds: readonly bigint[];
    isUsingLicenseToken: boolean;
};
/**
 * LicenseRegistryRegisterLicenseTemplateRequest
 *
 * @param licenseTemplate address
 */
export type LicenseRegistryRegisterLicenseTemplateRequest = {
    licenseTemplate: Address;
};
/**
 * LicenseRegistrySetAuthorityRequest
 *
 * @param newAuthority address
 */
export type LicenseRegistrySetAuthorityRequest = {
    newAuthority: Address;
};
/**
 * LicenseRegistrySetDefaultLicenseTermsRequest
 *
 * @param newLicenseTemplate address
 * @param newLicenseTermsId uint256
 */
export type LicenseRegistrySetDefaultLicenseTermsRequest = {
    newLicenseTemplate: Address;
    newLicenseTermsId: bigint;
};
/**
 * LicenseRegistrySetLicensingConfigForLicenseRequest
 *
 * @param ipId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 * @param licensingConfig tuple
 */
export type LicenseRegistrySetLicensingConfigForLicenseRequest = {
    ipId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
    licensingConfig: {
        isSet: boolean;
        mintingFee: bigint;
        licensingHook: Address;
        hookData: Hex;
        commercialRevShare: number;
        disabled: boolean;
        expectMinimumGroupRewardShare: number;
        expectGroupRewardPool: Address;
    };
};
/**
 * LicenseRegistryUpgradeToAndCallRequest
 *
 * @param newImplementation address
 * @param data bytes
 */
export type LicenseRegistryUpgradeToAndCallRequest = {
    newImplementation: Address;
    data: Hex;
};
/**
 * contract LicenseRegistry event
 */
export declare class LicenseRegistryEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event AuthorityUpdated for contract LicenseRegistry
     */
    watchAuthorityUpdatedEvent(onLogs: (txHash: Hex, ev: Partial<LicenseRegistryAuthorityUpdatedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event AuthorityUpdated for contract LicenseRegistry
     */
    parseTxAuthorityUpdatedEvent(txReceipt: TransactionReceipt): Array<LicenseRegistryAuthorityUpdatedEvent>;
    /**
     * event DefaultLicenseTermsSet for contract LicenseRegistry
     */
    watchDefaultLicenseTermsSetEvent(onLogs: (txHash: Hex, ev: Partial<LicenseRegistryDefaultLicenseTermsSetEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event DefaultLicenseTermsSet for contract LicenseRegistry
     */
    parseTxDefaultLicenseTermsSetEvent(txReceipt: TransactionReceipt): Array<LicenseRegistryDefaultLicenseTermsSetEvent>;
    /**
     * event ExpirationTimeSet for contract LicenseRegistry
     */
    watchExpirationTimeSetEvent(onLogs: (txHash: Hex, ev: Partial<LicenseRegistryExpirationTimeSetEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event ExpirationTimeSet for contract LicenseRegistry
     */
    parseTxExpirationTimeSetEvent(txReceipt: TransactionReceipt): Array<LicenseRegistryExpirationTimeSetEvent>;
    /**
     * event Initialized for contract LicenseRegistry
     */
    watchInitializedEvent(onLogs: (txHash: Hex, ev: Partial<LicenseRegistryInitializedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Initialized for contract LicenseRegistry
     */
    parseTxInitializedEvent(txReceipt: TransactionReceipt): Array<LicenseRegistryInitializedEvent>;
    /**
     * event LicenseTemplateRegistered for contract LicenseRegistry
     */
    watchLicenseTemplateRegisteredEvent(onLogs: (txHash: Hex, ev: Partial<LicenseRegistryLicenseTemplateRegisteredEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event LicenseTemplateRegistered for contract LicenseRegistry
     */
    parseTxLicenseTemplateRegisteredEvent(txReceipt: TransactionReceipt): Array<LicenseRegistryLicenseTemplateRegisteredEvent>;
    /**
     * event LicensingConfigSetForLicense for contract LicenseRegistry
     */
    watchLicensingConfigSetForLicenseEvent(onLogs: (txHash: Hex, ev: Partial<LicenseRegistryLicensingConfigSetForLicenseEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event LicensingConfigSetForLicense for contract LicenseRegistry
     */
    parseTxLicensingConfigSetForLicenseEvent(txReceipt: TransactionReceipt): Array<LicenseRegistryLicensingConfigSetForLicenseEvent>;
    /**
     * event Upgraded for contract LicenseRegistry
     */
    watchUpgradedEvent(onLogs: (txHash: Hex, ev: Partial<LicenseRegistryUpgradedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Upgraded for contract LicenseRegistry
     */
    parseTxUpgradedEvent(txReceipt: TransactionReceipt): Array<LicenseRegistryUpgradedEvent>;
}
/**
 * contract LicenseRegistry readonly method
 */
export declare class LicenseRegistryReadOnlyClient extends LicenseRegistryEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method DISPUTE_MODULE for contract LicenseRegistry
     *
     * @param request LicenseRegistryDisputeModuleRequest
     * @return Promise<LicenseRegistryDisputeModuleResponse>
     */
    disputeModule(): Promise<LicenseRegistryDisputeModuleResponse>;
    /**
     * method EXPIRATION_TIME for contract LicenseRegistry
     *
     * @param request LicenseRegistryExpirationTimeRequest
     * @return Promise<LicenseRegistryExpirationTimeResponse>
     */
    expirationTime(): Promise<LicenseRegistryExpirationTimeResponse>;
    /**
     * method GROUP_IP_ASSET_REGISTRY for contract LicenseRegistry
     *
     * @param request LicenseRegistryGroupIpAssetRegistryRequest
     * @return Promise<LicenseRegistryGroupIpAssetRegistryResponse>
     */
    groupIpAssetRegistry(): Promise<LicenseRegistryGroupIpAssetRegistryResponse>;
    /**
     * method IP_GRAPH for contract LicenseRegistry
     *
     * @param request LicenseRegistryIpGraphRequest
     * @return Promise<LicenseRegistryIpGraphResponse>
     */
    ipGraph(): Promise<LicenseRegistryIpGraphResponse>;
    /**
     * method IP_GRAPH_ACL for contract LicenseRegistry
     *
     * @param request LicenseRegistryIpGraphAclRequest
     * @return Promise<LicenseRegistryIpGraphAclResponse>
     */
    ipGraphAcl(): Promise<LicenseRegistryIpGraphAclResponse>;
    /**
     * method LICENSING_MODULE for contract LicenseRegistry
     *
     * @param request LicenseRegistryLicensingModuleRequest
     * @return Promise<LicenseRegistryLicensingModuleResponse>
     */
    licensingModule(): Promise<LicenseRegistryLicensingModuleResponse>;
    /**
     * method MAX_ANCESTORS for contract LicenseRegistry
     *
     * @param request LicenseRegistryMaxAncestorsRequest
     * @return Promise<LicenseRegistryMaxAncestorsResponse>
     */
    maxAncestors(): Promise<LicenseRegistryMaxAncestorsResponse>;
    /**
     * method MAX_PARENTS for contract LicenseRegistry
     *
     * @param request LicenseRegistryMaxParentsRequest
     * @return Promise<LicenseRegistryMaxParentsResponse>
     */
    maxParents(): Promise<LicenseRegistryMaxParentsResponse>;
    /**
     * method UPGRADE_INTERFACE_VERSION for contract LicenseRegistry
     *
     * @param request LicenseRegistryUpgradeInterfaceVersionRequest
     * @return Promise<LicenseRegistryUpgradeInterfaceVersionResponse>
     */
    upgradeInterfaceVersion(): Promise<LicenseRegistryUpgradeInterfaceVersionResponse>;
    /**
     * method authority for contract LicenseRegistry
     *
     * @param request LicenseRegistryAuthorityRequest
     * @return Promise<LicenseRegistryAuthorityResponse>
     */
    authority(): Promise<LicenseRegistryAuthorityResponse>;
    /**
     * method exists for contract LicenseRegistry
     *
     * @param request LicenseRegistryExistsRequest
     * @return Promise<LicenseRegistryExistsResponse>
     */
    exists(request: LicenseRegistryExistsRequest): Promise<LicenseRegistryExistsResponse>;
    /**
     * method getAttachedLicenseTerms for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetAttachedLicenseTermsRequest
     * @return Promise<LicenseRegistryGetAttachedLicenseTermsResponse>
     */
    getAttachedLicenseTerms(request: LicenseRegistryGetAttachedLicenseTermsRequest): Promise<LicenseRegistryGetAttachedLicenseTermsResponse>;
    /**
     * method getAttachedLicenseTermsCount for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetAttachedLicenseTermsCountRequest
     * @return Promise<LicenseRegistryGetAttachedLicenseTermsCountResponse>
     */
    getAttachedLicenseTermsCount(request: LicenseRegistryGetAttachedLicenseTermsCountRequest): Promise<LicenseRegistryGetAttachedLicenseTermsCountResponse>;
    /**
     * method getDefaultLicenseTerms for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetDefaultLicenseTermsRequest
     * @return Promise<LicenseRegistryGetDefaultLicenseTermsResponse>
     */
    getDefaultLicenseTerms(): Promise<LicenseRegistryGetDefaultLicenseTermsResponse>;
    /**
     * method getDerivativeIp for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetDerivativeIpRequest
     * @return Promise<LicenseRegistryGetDerivativeIpResponse>
     */
    getDerivativeIp(request: LicenseRegistryGetDerivativeIpRequest): Promise<LicenseRegistryGetDerivativeIpResponse>;
    /**
     * method getDerivativeIpCount for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetDerivativeIpCountRequest
     * @return Promise<LicenseRegistryGetDerivativeIpCountResponse>
     */
    getDerivativeIpCount(request: LicenseRegistryGetDerivativeIpCountRequest): Promise<LicenseRegistryGetDerivativeIpCountResponse>;
    /**
     * method getExpireTime for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetExpireTimeRequest
     * @return Promise<LicenseRegistryGetExpireTimeResponse>
     */
    getExpireTime(request: LicenseRegistryGetExpireTimeRequest): Promise<LicenseRegistryGetExpireTimeResponse>;
    /**
     * method getLicensingConfig for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetLicensingConfigRequest
     * @return Promise<LicenseRegistryGetLicensingConfigResponse>
     */
    getLicensingConfig(request: LicenseRegistryGetLicensingConfigRequest): Promise<LicenseRegistryGetLicensingConfigResponse>;
    /**
     * method getParentIp for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetParentIpRequest
     * @return Promise<LicenseRegistryGetParentIpResponse>
     */
    getParentIp(request: LicenseRegistryGetParentIpRequest): Promise<LicenseRegistryGetParentIpResponse>;
    /**
     * method getParentIpCount for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetParentIpCountRequest
     * @return Promise<LicenseRegistryGetParentIpCountResponse>
     */
    getParentIpCount(request: LicenseRegistryGetParentIpCountRequest): Promise<LicenseRegistryGetParentIpCountResponse>;
    /**
     * method getParentLicenseTerms for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetParentLicenseTermsRequest
     * @return Promise<LicenseRegistryGetParentLicenseTermsResponse>
     */
    getParentLicenseTerms(request: LicenseRegistryGetParentLicenseTermsRequest): Promise<LicenseRegistryGetParentLicenseTermsResponse>;
    /**
     * method getRoyaltyPercent for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetRoyaltyPercentRequest
     * @return Promise<LicenseRegistryGetRoyaltyPercentResponse>
     */
    getRoyaltyPercent(request: LicenseRegistryGetRoyaltyPercentRequest): Promise<LicenseRegistryGetRoyaltyPercentResponse>;
    /**
     * method hasDerivativeIps for contract LicenseRegistry
     *
     * @param request LicenseRegistryHasDerivativeIpsRequest
     * @return Promise<LicenseRegistryHasDerivativeIpsResponse>
     */
    hasDerivativeIps(request: LicenseRegistryHasDerivativeIpsRequest): Promise<LicenseRegistryHasDerivativeIpsResponse>;
    /**
     * method hasIpAttachedLicenseTerms for contract LicenseRegistry
     *
     * @param request LicenseRegistryHasIpAttachedLicenseTermsRequest
     * @return Promise<LicenseRegistryHasIpAttachedLicenseTermsResponse>
     */
    hasIpAttachedLicenseTerms(request: LicenseRegistryHasIpAttachedLicenseTermsRequest): Promise<LicenseRegistryHasIpAttachedLicenseTermsResponse>;
    /**
     * method isConsumingScheduledOp for contract LicenseRegistry
     *
     * @param request LicenseRegistryIsConsumingScheduledOpRequest
     * @return Promise<LicenseRegistryIsConsumingScheduledOpResponse>
     */
    isConsumingScheduledOp(): Promise<LicenseRegistryIsConsumingScheduledOpResponse>;
    /**
     * method isDefaultLicense for contract LicenseRegistry
     *
     * @param request LicenseRegistryIsDefaultLicenseRequest
     * @return Promise<LicenseRegistryIsDefaultLicenseResponse>
     */
    isDefaultLicense(request: LicenseRegistryIsDefaultLicenseRequest): Promise<LicenseRegistryIsDefaultLicenseResponse>;
    /**
     * method isDerivativeIp for contract LicenseRegistry
     *
     * @param request LicenseRegistryIsDerivativeIpRequest
     * @return Promise<LicenseRegistryIsDerivativeIpResponse>
     */
    isDerivativeIp(request: LicenseRegistryIsDerivativeIpRequest): Promise<LicenseRegistryIsDerivativeIpResponse>;
    /**
     * method isExpiredNow for contract LicenseRegistry
     *
     * @param request LicenseRegistryIsExpiredNowRequest
     * @return Promise<LicenseRegistryIsExpiredNowResponse>
     */
    isExpiredNow(request: LicenseRegistryIsExpiredNowRequest): Promise<LicenseRegistryIsExpiredNowResponse>;
    /**
     * method isParentIp for contract LicenseRegistry
     *
     * @param request LicenseRegistryIsParentIpRequest
     * @return Promise<LicenseRegistryIsParentIpResponse>
     */
    isParentIp(request: LicenseRegistryIsParentIpRequest): Promise<LicenseRegistryIsParentIpResponse>;
    /**
     * method isRegisteredLicenseTemplate for contract LicenseRegistry
     *
     * @param request LicenseRegistryIsRegisteredLicenseTemplateRequest
     * @return Promise<LicenseRegistryIsRegisteredLicenseTemplateResponse>
     */
    isRegisteredLicenseTemplate(request: LicenseRegistryIsRegisteredLicenseTemplateRequest): Promise<LicenseRegistryIsRegisteredLicenseTemplateResponse>;
    /**
     * method proxiableUUID for contract LicenseRegistry
     *
     * @param request LicenseRegistryProxiableUuidRequest
     * @return Promise<LicenseRegistryProxiableUuidResponse>
     */
    proxiableUuid(): Promise<LicenseRegistryProxiableUuidResponse>;
    /**
     * method verifyGroupAddIp for contract LicenseRegistry
     *
     * @param request LicenseRegistryVerifyGroupAddIpRequest
     * @return Promise<LicenseRegistryVerifyGroupAddIpResponse>
     */
    verifyGroupAddIp(request: LicenseRegistryVerifyGroupAddIpRequest): Promise<LicenseRegistryVerifyGroupAddIpResponse>;
    /**
     * method verifyMintLicenseToken for contract LicenseRegistry
     *
     * @param request LicenseRegistryVerifyMintLicenseTokenRequest
     * @return Promise<LicenseRegistryVerifyMintLicenseTokenResponse>
     */
    verifyMintLicenseToken(request: LicenseRegistryVerifyMintLicenseTokenRequest): Promise<LicenseRegistryVerifyMintLicenseTokenResponse>;
}
/**
 * contract LicenseRegistry write method
 */
export declare class LicenseRegistryClient extends LicenseRegistryReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method attachLicenseTermsToIp for contract LicenseRegistry
     *
     * @param request LicenseRegistryAttachLicenseTermsToIpRequest
     * @return Promise<WriteContractReturnType>
     */
    attachLicenseTermsToIp(request: LicenseRegistryAttachLicenseTermsToIpRequest): Promise<WriteContractReturnType>;
    /**
     * method attachLicenseTermsToIp for contract LicenseRegistry with only encode
     *
     * @param request LicenseRegistryAttachLicenseTermsToIpRequest
     * @return EncodedTxData
     */
    attachLicenseTermsToIpEncode(request: LicenseRegistryAttachLicenseTermsToIpRequest): EncodedTxData;
    /**
     * method getAncestorsCount for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetAncestorsCountRequest
     * @return Promise<WriteContractReturnType>
     */
    getAncestorsCount(request: LicenseRegistryGetAncestorsCountRequest): Promise<WriteContractReturnType>;
    /**
     * method getAncestorsCount for contract LicenseRegistry with only encode
     *
     * @param request LicenseRegistryGetAncestorsCountRequest
     * @return EncodedTxData
     */
    getAncestorsCountEncode(request: LicenseRegistryGetAncestorsCountRequest): EncodedTxData;
    /**
     * method initialize for contract LicenseRegistry
     *
     * @param request LicenseRegistryInitializeRequest
     * @return Promise<WriteContractReturnType>
     */
    initialize(request: LicenseRegistryInitializeRequest): Promise<WriteContractReturnType>;
    /**
     * method initialize for contract LicenseRegistry with only encode
     *
     * @param request LicenseRegistryInitializeRequest
     * @return EncodedTxData
     */
    initializeEncode(request: LicenseRegistryInitializeRequest): EncodedTxData;
    /**
     * method registerDerivativeIp for contract LicenseRegistry
     *
     * @param request LicenseRegistryRegisterDerivativeIpRequest
     * @return Promise<WriteContractReturnType>
     */
    registerDerivativeIp(request: LicenseRegistryRegisterDerivativeIpRequest): Promise<WriteContractReturnType>;
    /**
     * method registerDerivativeIp for contract LicenseRegistry with only encode
     *
     * @param request LicenseRegistryRegisterDerivativeIpRequest
     * @return EncodedTxData
     */
    registerDerivativeIpEncode(request: LicenseRegistryRegisterDerivativeIpRequest): EncodedTxData;
    /**
     * method registerLicenseTemplate for contract LicenseRegistry
     *
     * @param request LicenseRegistryRegisterLicenseTemplateRequest
     * @return Promise<WriteContractReturnType>
     */
    registerLicenseTemplate(request: LicenseRegistryRegisterLicenseTemplateRequest): Promise<WriteContractReturnType>;
    /**
     * method registerLicenseTemplate for contract LicenseRegistry with only encode
     *
     * @param request LicenseRegistryRegisterLicenseTemplateRequest
     * @return EncodedTxData
     */
    registerLicenseTemplateEncode(request: LicenseRegistryRegisterLicenseTemplateRequest): EncodedTxData;
    /**
     * method setAuthority for contract LicenseRegistry
     *
     * @param request LicenseRegistrySetAuthorityRequest
     * @return Promise<WriteContractReturnType>
     */
    setAuthority(request: LicenseRegistrySetAuthorityRequest): Promise<WriteContractReturnType>;
    /**
     * method setAuthority for contract LicenseRegistry with only encode
     *
     * @param request LicenseRegistrySetAuthorityRequest
     * @return EncodedTxData
     */
    setAuthorityEncode(request: LicenseRegistrySetAuthorityRequest): EncodedTxData;
    /**
     * method setDefaultLicenseTerms for contract LicenseRegistry
     *
     * @param request LicenseRegistrySetDefaultLicenseTermsRequest
     * @return Promise<WriteContractReturnType>
     */
    setDefaultLicenseTerms(request: LicenseRegistrySetDefaultLicenseTermsRequest): Promise<WriteContractReturnType>;
    /**
     * method setDefaultLicenseTerms for contract LicenseRegistry with only encode
     *
     * @param request LicenseRegistrySetDefaultLicenseTermsRequest
     * @return EncodedTxData
     */
    setDefaultLicenseTermsEncode(request: LicenseRegistrySetDefaultLicenseTermsRequest): EncodedTxData;
    /**
     * method setLicensingConfigForLicense for contract LicenseRegistry
     *
     * @param request LicenseRegistrySetLicensingConfigForLicenseRequest
     * @return Promise<WriteContractReturnType>
     */
    setLicensingConfigForLicense(request: LicenseRegistrySetLicensingConfigForLicenseRequest): Promise<WriteContractReturnType>;
    /**
     * method setLicensingConfigForLicense for contract LicenseRegistry with only encode
     *
     * @param request LicenseRegistrySetLicensingConfigForLicenseRequest
     * @return EncodedTxData
     */
    setLicensingConfigForLicenseEncode(request: LicenseRegistrySetLicensingConfigForLicenseRequest): EncodedTxData;
    /**
     * method upgradeToAndCall for contract LicenseRegistry
     *
     * @param request LicenseRegistryUpgradeToAndCallRequest
     * @return Promise<WriteContractReturnType>
     */
    upgradeToAndCall(request: LicenseRegistryUpgradeToAndCallRequest): Promise<WriteContractReturnType>;
    /**
     * method upgradeToAndCall for contract LicenseRegistry with only encode
     *
     * @param request LicenseRegistryUpgradeToAndCallRequest
     * @return EncodedTxData
     */
    upgradeToAndCallEncode(request: LicenseRegistryUpgradeToAndCallRequest): EncodedTxData;
}
/**
 * LicenseTokenOwnerOfRequest
 *
 * @param tokenId uint256
 */
export type LicenseTokenOwnerOfRequest = {
    tokenId: bigint;
};
export type LicenseTokenOwnerOfResponse = Address;
/**
 * contract LicenseToken readonly method
 */
export declare class LicenseTokenReadOnlyClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method ownerOf for contract LicenseToken
     *
     * @param request LicenseTokenOwnerOfRequest
     * @return Promise<LicenseTokenOwnerOfResponse>
     */
    ownerOf(request: LicenseTokenOwnerOfRequest): Promise<LicenseTokenOwnerOfResponse>;
}
/**
 * LicensingModuleLicenseTermsAttachedEvent
 *
 * @param caller address
 * @param ipId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicensingModuleLicenseTermsAttachedEvent = {
    caller: Address;
    ipId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
/**
 * LicensingModuleLicenseTokensMintedEvent
 *
 * @param caller address
 * @param licensorIpId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 * @param amount uint256
 * @param receiver address
 * @param startLicenseTokenId uint256
 */
export type LicensingModuleLicenseTokensMintedEvent = {
    caller: Address;
    licensorIpId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
    amount: bigint;
    receiver: Address;
    startLicenseTokenId: bigint;
};
/**
 * LicensingModulePredictMintingLicenseFeeRequest
 *
 * @param licensorIpId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 * @param amount uint256
 * @param receiver address
 * @param royaltyContext bytes
 */
export type LicensingModulePredictMintingLicenseFeeRequest = {
    licensorIpId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
    amount: bigint;
    receiver: Address;
    royaltyContext: Hex;
};
/**
 * LicensingModulePredictMintingLicenseFeeResponse
 *
 * @param currencyToken address
 * @param tokenAmount uint256
 */
export type LicensingModulePredictMintingLicenseFeeResponse = {
    currencyToken: Address;
    tokenAmount: bigint;
};
/**
 * LicensingModuleAttachLicenseTermsRequest
 *
 * @param ipId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicensingModuleAttachLicenseTermsRequest = {
    ipId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
/**
 * LicensingModuleMintLicenseTokensRequest
 *
 * @param licensorIpId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 * @param amount uint256
 * @param receiver address
 * @param royaltyContext bytes
 * @param maxMintingFee uint256
 * @param maxRevenueShare uint32
 */
export type LicensingModuleMintLicenseTokensRequest = {
    licensorIpId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
    amount: bigint;
    receiver: Address;
    royaltyContext: Hex;
    maxMintingFee: bigint;
    maxRevenueShare: number;
};
/**
 * LicensingModuleRegisterDerivativeRequest
 *
 * @param childIpId address
 * @param parentIpIds address[]
 * @param licenseTermsIds uint256[]
 * @param licenseTemplate address
 * @param royaltyContext bytes
 * @param maxMintingFee uint256
 * @param maxRts uint32
 * @param maxRevenueShare uint32
 */
export type LicensingModuleRegisterDerivativeRequest = {
    childIpId: Address;
    parentIpIds: readonly Address[];
    licenseTermsIds: readonly bigint[];
    licenseTemplate: Address;
    royaltyContext: Hex;
    maxMintingFee: bigint;
    maxRts: number;
    maxRevenueShare: number;
};
/**
 * LicensingModuleRegisterDerivativeWithLicenseTokensRequest
 *
 * @param childIpId address
 * @param licenseTokenIds uint256[]
 * @param royaltyContext bytes
 * @param maxRts uint32
 */
export type LicensingModuleRegisterDerivativeWithLicenseTokensRequest = {
    childIpId: Address;
    licenseTokenIds: readonly bigint[];
    royaltyContext: Hex;
    maxRts: number;
};
/**
 * LicensingModuleSetLicensingConfigRequest
 *
 * @param ipId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 * @param licensingConfig tuple
 */
export type LicensingModuleSetLicensingConfigRequest = {
    ipId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
    licensingConfig: {
        isSet: boolean;
        mintingFee: bigint;
        licensingHook: Address;
        hookData: Hex;
        commercialRevShare: number;
        disabled: boolean;
        expectMinimumGroupRewardShare: number;
        expectGroupRewardPool: Address;
    };
};
/**
 * contract LicensingModule event
 */
export declare class LicensingModuleEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event LicenseTermsAttached for contract LicensingModule
     */
    watchLicenseTermsAttachedEvent(onLogs: (txHash: Hex, ev: Partial<LicensingModuleLicenseTermsAttachedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event LicenseTermsAttached for contract LicensingModule
     */
    parseTxLicenseTermsAttachedEvent(txReceipt: TransactionReceipt): Array<LicensingModuleLicenseTermsAttachedEvent>;
    /**
     * event LicenseTokensMinted for contract LicensingModule
     */
    watchLicenseTokensMintedEvent(onLogs: (txHash: Hex, ev: Partial<LicensingModuleLicenseTokensMintedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event LicenseTokensMinted for contract LicensingModule
     */
    parseTxLicenseTokensMintedEvent(txReceipt: TransactionReceipt): Array<LicensingModuleLicenseTokensMintedEvent>;
}
/**
 * contract LicensingModule readonly method
 */
export declare class LicensingModuleReadOnlyClient extends LicensingModuleEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method predictMintingLicenseFee for contract LicensingModule
     *
     * @param request LicensingModulePredictMintingLicenseFeeRequest
     * @return Promise<LicensingModulePredictMintingLicenseFeeResponse>
     */
    predictMintingLicenseFee(request: LicensingModulePredictMintingLicenseFeeRequest): Promise<LicensingModulePredictMintingLicenseFeeResponse>;
}
/**
 * contract LicensingModule write method
 */
export declare class LicensingModuleClient extends LicensingModuleReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method attachLicenseTerms for contract LicensingModule
     *
     * @param request LicensingModuleAttachLicenseTermsRequest
     * @return Promise<WriteContractReturnType>
     */
    attachLicenseTerms(request: LicensingModuleAttachLicenseTermsRequest): Promise<WriteContractReturnType>;
    /**
     * method attachLicenseTerms for contract LicensingModule with only encode
     *
     * @param request LicensingModuleAttachLicenseTermsRequest
     * @return EncodedTxData
     */
    attachLicenseTermsEncode(request: LicensingModuleAttachLicenseTermsRequest): EncodedTxData;
    /**
     * method mintLicenseTokens for contract LicensingModule
     *
     * @param request LicensingModuleMintLicenseTokensRequest
     * @return Promise<WriteContractReturnType>
     */
    mintLicenseTokens(request: LicensingModuleMintLicenseTokensRequest): Promise<WriteContractReturnType>;
    /**
     * method mintLicenseTokens for contract LicensingModule with only encode
     *
     * @param request LicensingModuleMintLicenseTokensRequest
     * @return EncodedTxData
     */
    mintLicenseTokensEncode(request: LicensingModuleMintLicenseTokensRequest): EncodedTxData;
    /**
     * method registerDerivative for contract LicensingModule
     *
     * @param request LicensingModuleRegisterDerivativeRequest
     * @return Promise<WriteContractReturnType>
     */
    registerDerivative(request: LicensingModuleRegisterDerivativeRequest): Promise<WriteContractReturnType>;
    /**
     * method registerDerivative for contract LicensingModule with only encode
     *
     * @param request LicensingModuleRegisterDerivativeRequest
     * @return EncodedTxData
     */
    registerDerivativeEncode(request: LicensingModuleRegisterDerivativeRequest): EncodedTxData;
    /**
     * method registerDerivativeWithLicenseTokens for contract LicensingModule
     *
     * @param request LicensingModuleRegisterDerivativeWithLicenseTokensRequest
     * @return Promise<WriteContractReturnType>
     */
    registerDerivativeWithLicenseTokens(request: LicensingModuleRegisterDerivativeWithLicenseTokensRequest): Promise<WriteContractReturnType>;
    /**
     * method registerDerivativeWithLicenseTokens for contract LicensingModule with only encode
     *
     * @param request LicensingModuleRegisterDerivativeWithLicenseTokensRequest
     * @return EncodedTxData
     */
    registerDerivativeWithLicenseTokensEncode(request: LicensingModuleRegisterDerivativeWithLicenseTokensRequest): EncodedTxData;
    /**
     * method setLicensingConfig for contract LicensingModule
     *
     * @param request LicensingModuleSetLicensingConfigRequest
     * @return Promise<WriteContractReturnType>
     */
    setLicensingConfig(request: LicensingModuleSetLicensingConfigRequest): Promise<WriteContractReturnType>;
    /**
     * method setLicensingConfig for contract LicensingModule with only encode
     *
     * @param request LicensingModuleSetLicensingConfigRequest
     * @return EncodedTxData
     */
    setLicensingConfigEncode(request: LicensingModuleSetLicensingConfigRequest): EncodedTxData;
}
/**
 * MockErc20ApprovalEvent
 *
 * @param owner address
 * @param spender address
 * @param value uint256
 */
export type MockErc20ApprovalEvent = {
    owner: Address;
    spender: Address;
    value: bigint;
};
/**
 * MockErc20TransferEvent
 *
 * @param from address
 * @param to address
 * @param value uint256
 */
export type MockErc20TransferEvent = {
    from: Address;
    to: Address;
    value: bigint;
};
/**
 * MockErc20AllowanceRequest
 *
 * @param owner address
 * @param spender address
 */
export type MockErc20AllowanceRequest = {
    owner: Address;
    spender: Address;
};
export type MockErc20AllowanceResponse = bigint;
/**
 * MockErc20BalanceOfRequest
 *
 * @param account address
 */
export type MockErc20BalanceOfRequest = {
    account: Address;
};
export type MockErc20BalanceOfResponse = bigint;
export type MockErc20DecimalsResponse = number;
export type MockErc20NameResponse = string;
export type MockErc20SymbolResponse = string;
export type MockErc20TotalSupplyResponse = bigint;
/**
 * MockErc20ApproveRequest
 *
 * @param spender address
 * @param value uint256
 */
export type MockErc20ApproveRequest = {
    spender: Address;
    value: bigint;
};
/**
 * MockErc20BurnRequest
 *
 * @param from address
 * @param amount uint256
 */
export type MockErc20BurnRequest = {
    from: Address;
    amount: bigint;
};
/**
 * MockErc20MintRequest
 *
 * @param to address
 * @param amount uint256
 */
export type MockErc20MintRequest = {
    to: Address;
    amount: bigint;
};
/**
 * MockErc20TransferRequest
 *
 * @param to address
 * @param value uint256
 */
export type MockErc20TransferRequest = {
    to: Address;
    value: bigint;
};
/**
 * MockErc20TransferFromRequest
 *
 * @param from address
 * @param to address
 * @param value uint256
 */
export type MockErc20TransferFromRequest = {
    from: Address;
    to: Address;
    value: bigint;
};
/**
 * contract MockERC20 event
 */
export declare class MockErc20EventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event Approval for contract MockERC20
     */
    watchApprovalEvent(onLogs: (txHash: Hex, ev: Partial<MockErc20ApprovalEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Approval for contract MockERC20
     */
    parseTxApprovalEvent(txReceipt: TransactionReceipt): Array<MockErc20ApprovalEvent>;
    /**
     * event Transfer for contract MockERC20
     */
    watchTransferEvent(onLogs: (txHash: Hex, ev: Partial<MockErc20TransferEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Transfer for contract MockERC20
     */
    parseTxTransferEvent(txReceipt: TransactionReceipt): Array<MockErc20TransferEvent>;
}
/**
 * contract MockERC20 readonly method
 */
export declare class MockErc20ReadOnlyClient extends MockErc20EventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method allowance for contract MockERC20
     *
     * @param request MockErc20AllowanceRequest
     * @return Promise<MockErc20AllowanceResponse>
     */
    allowance(request: MockErc20AllowanceRequest): Promise<MockErc20AllowanceResponse>;
    /**
     * method balanceOf for contract MockERC20
     *
     * @param request MockErc20BalanceOfRequest
     * @return Promise<MockErc20BalanceOfResponse>
     */
    balanceOf(request: MockErc20BalanceOfRequest): Promise<MockErc20BalanceOfResponse>;
    /**
     * method decimals for contract MockERC20
     *
     * @param request MockErc20DecimalsRequest
     * @return Promise<MockErc20DecimalsResponse>
     */
    decimals(): Promise<MockErc20DecimalsResponse>;
    /**
     * method name for contract MockERC20
     *
     * @param request MockErc20NameRequest
     * @return Promise<MockErc20NameResponse>
     */
    name(): Promise<MockErc20NameResponse>;
    /**
     * method symbol for contract MockERC20
     *
     * @param request MockErc20SymbolRequest
     * @return Promise<MockErc20SymbolResponse>
     */
    symbol(): Promise<MockErc20SymbolResponse>;
    /**
     * method totalSupply for contract MockERC20
     *
     * @param request MockErc20TotalSupplyRequest
     * @return Promise<MockErc20TotalSupplyResponse>
     */
    totalSupply(): Promise<MockErc20TotalSupplyResponse>;
}
/**
 * contract MockERC20 write method
 */
export declare class MockErc20Client extends MockErc20ReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method approve for contract MockERC20
     *
     * @param request MockErc20ApproveRequest
     * @return Promise<WriteContractReturnType>
     */
    approve(request: MockErc20ApproveRequest): Promise<WriteContractReturnType>;
    /**
     * method approve for contract MockERC20 with only encode
     *
     * @param request MockErc20ApproveRequest
     * @return EncodedTxData
     */
    approveEncode(request: MockErc20ApproveRequest): EncodedTxData;
    /**
     * method burn for contract MockERC20
     *
     * @param request MockErc20BurnRequest
     * @return Promise<WriteContractReturnType>
     */
    burn(request: MockErc20BurnRequest): Promise<WriteContractReturnType>;
    /**
     * method burn for contract MockERC20 with only encode
     *
     * @param request MockErc20BurnRequest
     * @return EncodedTxData
     */
    burnEncode(request: MockErc20BurnRequest): EncodedTxData;
    /**
     * method mint for contract MockERC20
     *
     * @param request MockErc20MintRequest
     * @return Promise<WriteContractReturnType>
     */
    mint(request: MockErc20MintRequest): Promise<WriteContractReturnType>;
    /**
     * method mint for contract MockERC20 with only encode
     *
     * @param request MockErc20MintRequest
     * @return EncodedTxData
     */
    mintEncode(request: MockErc20MintRequest): EncodedTxData;
    /**
     * method transfer for contract MockERC20
     *
     * @param request MockErc20TransferRequest
     * @return Promise<WriteContractReturnType>
     */
    transfer(request: MockErc20TransferRequest): Promise<WriteContractReturnType>;
    /**
     * method transfer for contract MockERC20 with only encode
     *
     * @param request MockErc20TransferRequest
     * @return EncodedTxData
     */
    transferEncode(request: MockErc20TransferRequest): EncodedTxData;
    /**
     * method transferFrom for contract MockERC20
     *
     * @param request MockErc20TransferFromRequest
     * @return Promise<WriteContractReturnType>
     */
    transferFrom(request: MockErc20TransferFromRequest): Promise<WriteContractReturnType>;
    /**
     * method transferFrom for contract MockERC20 with only encode
     *
     * @param request MockErc20TransferFromRequest
     * @return EncodedTxData
     */
    transferFromEncode(request: MockErc20TransferFromRequest): EncodedTxData;
}
/**
 * ModuleRegistryIsRegisteredRequest
 *
 * @param moduleAddress address
 */
export type ModuleRegistryIsRegisteredRequest = {
    moduleAddress: Address;
};
export type ModuleRegistryIsRegisteredResponse = boolean;
/**
 * contract ModuleRegistry readonly method
 */
export declare class ModuleRegistryReadOnlyClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method isRegistered for contract ModuleRegistry
     *
     * @param request ModuleRegistryIsRegisteredRequest
     * @return Promise<ModuleRegistryIsRegisteredResponse>
     */
    isRegistered(request: ModuleRegistryIsRegisteredRequest): Promise<ModuleRegistryIsRegisteredResponse>;
}
/**
 * Multicall3Aggregate3Request
 *
 * @param calls tuple[]
 */
export type Multicall3Aggregate3Request = {
    calls: {
        target: Address;
        allowFailure: boolean;
        callData: Hex;
    }[];
};
/**
 * contract Multicall3 write method
 */
export declare class Multicall3Client {
    protected readonly wallet: SimpleWalletClient;
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method aggregate3 for contract Multicall3
     *
     * @param request Multicall3Aggregate3Request
     * @return Promise<WriteContractReturnType>
     */
    aggregate3(request: Multicall3Aggregate3Request): Promise<WriteContractReturnType>;
    /**
     * method aggregate3 for contract Multicall3 with only encode
     *
     * @param request Multicall3Aggregate3Request
     * @return EncodedTxData
     */
    aggregate3Encode(request: Multicall3Aggregate3Request): EncodedTxData;
}
/**
 * PiLicenseTemplateAuthorityUpdatedEvent
 *
 * @param authority address
 */
export type PiLicenseTemplateAuthorityUpdatedEvent = {
    authority: Address;
};
/**
 * PiLicenseTemplateDerivativeApprovedEvent
 *
 * @param licenseTermsId uint256
 * @param ipId address
 * @param caller address
 * @param approved bool
 */
export type PiLicenseTemplateDerivativeApprovedEvent = {
    licenseTermsId: bigint;
    ipId: Address;
    caller: Address;
    approved: boolean;
};
/**
 * PiLicenseTemplateInitializedEvent
 *
 * @param version uint64
 */
export type PiLicenseTemplateInitializedEvent = {
    version: bigint;
};
/**
 * PiLicenseTemplateLicenseTermsRegisteredEvent
 *
 * @param licenseTermsId uint256
 * @param licenseTemplate address
 * @param licenseTerms bytes
 */
export type PiLicenseTemplateLicenseTermsRegisteredEvent = {
    licenseTermsId: bigint;
    licenseTemplate: Address;
    licenseTerms: Hex;
};
/**
 * PiLicenseTemplateUpgradedEvent
 *
 * @param implementation address
 */
export type PiLicenseTemplateUpgradedEvent = {
    implementation: Address;
};
export type PiLicenseTemplateAccessControllerResponse = Address;
export type PiLicenseTemplateIpAssetRegistryResponse = Address;
export type PiLicenseTemplateLicenseRegistryResponse = Address;
export type PiLicenseTemplateModuleRegistryResponse = Address;
export type PiLicenseTemplateRoyaltyModuleResponse = Address;
export type PiLicenseTemplateTermsRendererResponse = Address;
export type PiLicenseTemplateUpgradeInterfaceVersionResponse = string;
/**
 * PiLicenseTemplateAllowDerivativeRegistrationRequest
 *
 * @param licenseTermsId uint256
 */
export type PiLicenseTemplateAllowDerivativeRegistrationRequest = {
    licenseTermsId: bigint;
};
export type PiLicenseTemplateAllowDerivativeRegistrationResponse = boolean;
export type PiLicenseTemplateAuthorityResponse = Address;
/**
 * PiLicenseTemplateCanAttachToGroupIpRequest
 *
 * @param licenseTermsId uint256
 */
export type PiLicenseTemplateCanAttachToGroupIpRequest = {
    licenseTermsId: bigint;
};
export type PiLicenseTemplateCanAttachToGroupIpResponse = boolean;
/**
 * PiLicenseTemplateCanOverrideRoyaltyPercentRequest
 *
 * @param licenseTermsId uint256
 * @param newRoyaltyPercent uint32
 */
export type PiLicenseTemplateCanOverrideRoyaltyPercentRequest = {
    licenseTermsId: bigint;
    newRoyaltyPercent: number;
};
export type PiLicenseTemplateCanOverrideRoyaltyPercentResponse = boolean;
/**
 * PiLicenseTemplateExistsRequest
 *
 * @param licenseTermsId uint256
 */
export type PiLicenseTemplateExistsRequest = {
    licenseTermsId: bigint;
};
export type PiLicenseTemplateExistsResponse = boolean;
/**
 * PiLicenseTemplateGetEarlierExpireTimeRequest
 *
 * @param licenseTermsIds uint256[]
 * @param start uint256
 */
export type PiLicenseTemplateGetEarlierExpireTimeRequest = {
    licenseTermsIds: readonly bigint[];
    start: bigint;
};
export type PiLicenseTemplateGetEarlierExpireTimeResponse = bigint;
/**
 * PiLicenseTemplateGetExpireTimeRequest
 *
 * @param licenseTermsId uint256
 * @param start uint256
 */
export type PiLicenseTemplateGetExpireTimeRequest = {
    licenseTermsId: bigint;
    start: bigint;
};
export type PiLicenseTemplateGetExpireTimeResponse = bigint;
/**
 * PiLicenseTemplateGetLicenseTermsRequest
 *
 * @param selectedLicenseTermsId uint256
 */
export type PiLicenseTemplateGetLicenseTermsRequest = {
    selectedLicenseTermsId: bigint;
};
/**
 * PiLicenseTemplateGetLicenseTermsResponse
 *
 * @param terms tuple
 */
export type PiLicenseTemplateGetLicenseTermsResponse = {
    terms: {
        transferable: boolean;
        royaltyPolicy: Address;
        defaultMintingFee: bigint;
        expiration: bigint;
        commercialUse: boolean;
        commercialAttribution: boolean;
        commercializerChecker: Address;
        commercializerCheckerData: Hex;
        commercialRevShare: number;
        commercialRevCeiling: bigint;
        derivativesAllowed: boolean;
        derivativesAttribution: boolean;
        derivativesApproval: boolean;
        derivativesReciprocal: boolean;
        derivativeRevCeiling: bigint;
        currency: Address;
        uri: string;
    };
};
/**
 * PiLicenseTemplateGetLicenseTermsIdRequest
 *
 * @param terms tuple
 */
export type PiLicenseTemplateGetLicenseTermsIdRequest = {
    terms: {
        transferable: boolean;
        royaltyPolicy: Address;
        defaultMintingFee: bigint;
        expiration: bigint;
        commercialUse: boolean;
        commercialAttribution: boolean;
        commercializerChecker: Address;
        commercializerCheckerData: Hex;
        commercialRevShare: number;
        commercialRevCeiling: bigint;
        derivativesAllowed: boolean;
        derivativesAttribution: boolean;
        derivativesApproval: boolean;
        derivativesReciprocal: boolean;
        derivativeRevCeiling: bigint;
        currency: Address;
        uri: string;
    };
};
/**
 * PiLicenseTemplateGetLicenseTermsIdResponse
 *
 * @param selectedLicenseTermsId uint256
 */
export type PiLicenseTemplateGetLicenseTermsIdResponse = {
    selectedLicenseTermsId: bigint;
};
/**
 * PiLicenseTemplateGetLicenseTermsUriRequest
 *
 * @param licenseTermsId uint256
 */
export type PiLicenseTemplateGetLicenseTermsUriRequest = {
    licenseTermsId: bigint;
};
export type PiLicenseTemplateGetLicenseTermsUriResponse = string;
export type PiLicenseTemplateGetMetadataUriResponse = string;
/**
 * PiLicenseTemplateGetRoyaltyPolicyRequest
 *
 * @param licenseTermsId uint256
 */
export type PiLicenseTemplateGetRoyaltyPolicyRequest = {
    licenseTermsId: bigint;
};
/**
 * PiLicenseTemplateGetRoyaltyPolicyResponse
 *
 * @param royaltyPolicy address
 * @param royaltyPercent uint32
 * @param mintingFee uint256
 * @param currency address
 */
export type PiLicenseTemplateGetRoyaltyPolicyResponse = {
    royaltyPolicy: Address;
    royaltyPercent: number;
    mintingFee: bigint;
    currency: Address;
};
export type PiLicenseTemplateIsConsumingScheduledOpResponse = Hex;
/**
 * PiLicenseTemplateIsDerivativeApprovedRequest
 *
 * @param parentIpId address
 * @param licenseTermsId uint256
 * @param childIpId address
 */
export type PiLicenseTemplateIsDerivativeApprovedRequest = {
    parentIpId: Address;
    licenseTermsId: bigint;
    childIpId: Address;
};
export type PiLicenseTemplateIsDerivativeApprovedResponse = boolean;
/**
 * PiLicenseTemplateIsLicenseTransferableRequest
 *
 * @param licenseTermsId uint256
 */
export type PiLicenseTemplateIsLicenseTransferableRequest = {
    licenseTermsId: bigint;
};
export type PiLicenseTemplateIsLicenseTransferableResponse = boolean;
export type PiLicenseTemplateNameResponse = string;
export type PiLicenseTemplateProxiableUuidResponse = Hex;
/**
 * PiLicenseTemplateSupportsInterfaceRequest
 *
 * @param interfaceId bytes4
 */
export type PiLicenseTemplateSupportsInterfaceRequest = {
    interfaceId: Hex;
};
export type PiLicenseTemplateSupportsInterfaceResponse = boolean;
/**
 * PiLicenseTemplateToJsonRequest
 *
 * @param licenseTermsId uint256
 */
export type PiLicenseTemplateToJsonRequest = {
    licenseTermsId: bigint;
};
export type PiLicenseTemplateToJsonResponse = string;
export type PiLicenseTemplateTotalRegisteredLicenseTermsResponse = bigint;
/**
 * PiLicenseTemplateVerifyCompatibleLicensesRequest
 *
 * @param licenseTermsIds uint256[]
 */
export type PiLicenseTemplateVerifyCompatibleLicensesRequest = {
    licenseTermsIds: readonly bigint[];
};
export type PiLicenseTemplateVerifyCompatibleLicensesResponse = boolean;
/**
 * PiLicenseTemplateInitializeRequest
 *
 * @param accessManager address
 * @param name string
 * @param metadataURI string
 */
export type PiLicenseTemplateInitializeRequest = {
    accessManager: Address;
    name: string;
    metadataURI: string;
};
/**
 * PiLicenseTemplateRegisterLicenseTermsRequest
 *
 * @param terms tuple
 */
export type PiLicenseTemplateRegisterLicenseTermsRequest = {
    terms: {
        transferable: boolean;
        royaltyPolicy: Address;
        defaultMintingFee: bigint;
        expiration: bigint;
        commercialUse: boolean;
        commercialAttribution: boolean;
        commercializerChecker: Address;
        commercializerCheckerData: Hex;
        commercialRevShare: number;
        commercialRevCeiling: bigint;
        derivativesAllowed: boolean;
        derivativesAttribution: boolean;
        derivativesApproval: boolean;
        derivativesReciprocal: boolean;
        derivativeRevCeiling: bigint;
        currency: Address;
        uri: string;
    };
};
/**
 * PiLicenseTemplateSetApprovalRequest
 *
 * @param parentIpId address
 * @param licenseTermsId uint256
 * @param childIpId address
 * @param approved bool
 */
export type PiLicenseTemplateSetApprovalRequest = {
    parentIpId: Address;
    licenseTermsId: bigint;
    childIpId: Address;
    approved: boolean;
};
/**
 * PiLicenseTemplateSetAuthorityRequest
 *
 * @param newAuthority address
 */
export type PiLicenseTemplateSetAuthorityRequest = {
    newAuthority: Address;
};
/**
 * PiLicenseTemplateUpgradeToAndCallRequest
 *
 * @param newImplementation address
 * @param data bytes
 */
export type PiLicenseTemplateUpgradeToAndCallRequest = {
    newImplementation: Address;
    data: Hex;
};
/**
 * PiLicenseTemplateVerifyMintLicenseTokenRequest
 *
 * @param 0 uint256
 * @param 1 address
 * @param 2 address
 * @param 3 uint256
 */
export type PiLicenseTemplateVerifyMintLicenseTokenRequest = readonly [
    bigint,
    Address,
    Address,
    bigint
];
/**
 * PiLicenseTemplateVerifyRegisterDerivativeRequest
 *
 * @param childIpId address
 * @param parentIpId address
 * @param licenseTermsId uint256
 * @param licensee address
 */
export type PiLicenseTemplateVerifyRegisterDerivativeRequest = {
    childIpId: Address;
    parentIpId: Address;
    licenseTermsId: bigint;
    licensee: Address;
};
/**
 * PiLicenseTemplateVerifyRegisterDerivativeForAllParentsRequest
 *
 * @param childIpId address
 * @param parentIpIds address[]
 * @param licenseTermsIds uint256[]
 * @param caller address
 */
export type PiLicenseTemplateVerifyRegisterDerivativeForAllParentsRequest = {
    childIpId: Address;
    parentIpIds: readonly Address[];
    licenseTermsIds: readonly bigint[];
    caller: Address;
};
/**
 * contract PILicenseTemplate event
 */
export declare class PiLicenseTemplateEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event AuthorityUpdated for contract PILicenseTemplate
     */
    watchAuthorityUpdatedEvent(onLogs: (txHash: Hex, ev: Partial<PiLicenseTemplateAuthorityUpdatedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event AuthorityUpdated for contract PILicenseTemplate
     */
    parseTxAuthorityUpdatedEvent(txReceipt: TransactionReceipt): Array<PiLicenseTemplateAuthorityUpdatedEvent>;
    /**
     * event DerivativeApproved for contract PILicenseTemplate
     */
    watchDerivativeApprovedEvent(onLogs: (txHash: Hex, ev: Partial<PiLicenseTemplateDerivativeApprovedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event DerivativeApproved for contract PILicenseTemplate
     */
    parseTxDerivativeApprovedEvent(txReceipt: TransactionReceipt): Array<PiLicenseTemplateDerivativeApprovedEvent>;
    /**
     * event Initialized for contract PILicenseTemplate
     */
    watchInitializedEvent(onLogs: (txHash: Hex, ev: Partial<PiLicenseTemplateInitializedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Initialized for contract PILicenseTemplate
     */
    parseTxInitializedEvent(txReceipt: TransactionReceipt): Array<PiLicenseTemplateInitializedEvent>;
    /**
     * event LicenseTermsRegistered for contract PILicenseTemplate
     */
    watchLicenseTermsRegisteredEvent(onLogs: (txHash: Hex, ev: Partial<PiLicenseTemplateLicenseTermsRegisteredEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event LicenseTermsRegistered for contract PILicenseTemplate
     */
    parseTxLicenseTermsRegisteredEvent(txReceipt: TransactionReceipt): Array<PiLicenseTemplateLicenseTermsRegisteredEvent>;
    /**
     * event Upgraded for contract PILicenseTemplate
     */
    watchUpgradedEvent(onLogs: (txHash: Hex, ev: Partial<PiLicenseTemplateUpgradedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Upgraded for contract PILicenseTemplate
     */
    parseTxUpgradedEvent(txReceipt: TransactionReceipt): Array<PiLicenseTemplateUpgradedEvent>;
}
/**
 * contract PILicenseTemplate readonly method
 */
export declare class PiLicenseTemplateReadOnlyClient extends PiLicenseTemplateEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method ACCESS_CONTROLLER for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateAccessControllerRequest
     * @return Promise<PiLicenseTemplateAccessControllerResponse>
     */
    accessController(): Promise<PiLicenseTemplateAccessControllerResponse>;
    /**
     * method IP_ASSET_REGISTRY for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateIpAssetRegistryRequest
     * @return Promise<PiLicenseTemplateIpAssetRegistryResponse>
     */
    ipAssetRegistry(): Promise<PiLicenseTemplateIpAssetRegistryResponse>;
    /**
     * method LICENSE_REGISTRY for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateLicenseRegistryRequest
     * @return Promise<PiLicenseTemplateLicenseRegistryResponse>
     */
    licenseRegistry(): Promise<PiLicenseTemplateLicenseRegistryResponse>;
    /**
     * method MODULE_REGISTRY for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateModuleRegistryRequest
     * @return Promise<PiLicenseTemplateModuleRegistryResponse>
     */
    moduleRegistry(): Promise<PiLicenseTemplateModuleRegistryResponse>;
    /**
     * method ROYALTY_MODULE for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateRoyaltyModuleRequest
     * @return Promise<PiLicenseTemplateRoyaltyModuleResponse>
     */
    royaltyModule(): Promise<PiLicenseTemplateRoyaltyModuleResponse>;
    /**
     * method TERMS_RENDERER for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateTermsRendererRequest
     * @return Promise<PiLicenseTemplateTermsRendererResponse>
     */
    termsRenderer(): Promise<PiLicenseTemplateTermsRendererResponse>;
    /**
     * method UPGRADE_INTERFACE_VERSION for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateUpgradeInterfaceVersionRequest
     * @return Promise<PiLicenseTemplateUpgradeInterfaceVersionResponse>
     */
    upgradeInterfaceVersion(): Promise<PiLicenseTemplateUpgradeInterfaceVersionResponse>;
    /**
     * method allowDerivativeRegistration for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateAllowDerivativeRegistrationRequest
     * @return Promise<PiLicenseTemplateAllowDerivativeRegistrationResponse>
     */
    allowDerivativeRegistration(request: PiLicenseTemplateAllowDerivativeRegistrationRequest): Promise<PiLicenseTemplateAllowDerivativeRegistrationResponse>;
    /**
     * method authority for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateAuthorityRequest
     * @return Promise<PiLicenseTemplateAuthorityResponse>
     */
    authority(): Promise<PiLicenseTemplateAuthorityResponse>;
    /**
     * method canAttachToGroupIp for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateCanAttachToGroupIpRequest
     * @return Promise<PiLicenseTemplateCanAttachToGroupIpResponse>
     */
    canAttachToGroupIp(request: PiLicenseTemplateCanAttachToGroupIpRequest): Promise<PiLicenseTemplateCanAttachToGroupIpResponse>;
    /**
     * method canOverrideRoyaltyPercent for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateCanOverrideRoyaltyPercentRequest
     * @return Promise<PiLicenseTemplateCanOverrideRoyaltyPercentResponse>
     */
    canOverrideRoyaltyPercent(request: PiLicenseTemplateCanOverrideRoyaltyPercentRequest): Promise<PiLicenseTemplateCanOverrideRoyaltyPercentResponse>;
    /**
     * method exists for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateExistsRequest
     * @return Promise<PiLicenseTemplateExistsResponse>
     */
    exists(request: PiLicenseTemplateExistsRequest): Promise<PiLicenseTemplateExistsResponse>;
    /**
     * method getEarlierExpireTime for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateGetEarlierExpireTimeRequest
     * @return Promise<PiLicenseTemplateGetEarlierExpireTimeResponse>
     */
    getEarlierExpireTime(request: PiLicenseTemplateGetEarlierExpireTimeRequest): Promise<PiLicenseTemplateGetEarlierExpireTimeResponse>;
    /**
     * method getExpireTime for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateGetExpireTimeRequest
     * @return Promise<PiLicenseTemplateGetExpireTimeResponse>
     */
    getExpireTime(request: PiLicenseTemplateGetExpireTimeRequest): Promise<PiLicenseTemplateGetExpireTimeResponse>;
    /**
     * method getLicenseTerms for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateGetLicenseTermsRequest
     * @return Promise<PiLicenseTemplateGetLicenseTermsResponse>
     */
    getLicenseTerms(request: PiLicenseTemplateGetLicenseTermsRequest): Promise<PiLicenseTemplateGetLicenseTermsResponse>;
    /**
     * method getLicenseTermsId for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateGetLicenseTermsIdRequest
     * @return Promise<PiLicenseTemplateGetLicenseTermsIdResponse>
     */
    getLicenseTermsId(request: PiLicenseTemplateGetLicenseTermsIdRequest): Promise<PiLicenseTemplateGetLicenseTermsIdResponse>;
    /**
     * method getLicenseTermsURI for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateGetLicenseTermsUriRequest
     * @return Promise<PiLicenseTemplateGetLicenseTermsUriResponse>
     */
    getLicenseTermsUri(request: PiLicenseTemplateGetLicenseTermsUriRequest): Promise<PiLicenseTemplateGetLicenseTermsUriResponse>;
    /**
     * method getMetadataURI for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateGetMetadataUriRequest
     * @return Promise<PiLicenseTemplateGetMetadataUriResponse>
     */
    getMetadataUri(): Promise<PiLicenseTemplateGetMetadataUriResponse>;
    /**
     * method getRoyaltyPolicy for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateGetRoyaltyPolicyRequest
     * @return Promise<PiLicenseTemplateGetRoyaltyPolicyResponse>
     */
    getRoyaltyPolicy(request: PiLicenseTemplateGetRoyaltyPolicyRequest): Promise<PiLicenseTemplateGetRoyaltyPolicyResponse>;
    /**
     * method isConsumingScheduledOp for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateIsConsumingScheduledOpRequest
     * @return Promise<PiLicenseTemplateIsConsumingScheduledOpResponse>
     */
    isConsumingScheduledOp(): Promise<PiLicenseTemplateIsConsumingScheduledOpResponse>;
    /**
     * method isDerivativeApproved for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateIsDerivativeApprovedRequest
     * @return Promise<PiLicenseTemplateIsDerivativeApprovedResponse>
     */
    isDerivativeApproved(request: PiLicenseTemplateIsDerivativeApprovedRequest): Promise<PiLicenseTemplateIsDerivativeApprovedResponse>;
    /**
     * method isLicenseTransferable for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateIsLicenseTransferableRequest
     * @return Promise<PiLicenseTemplateIsLicenseTransferableResponse>
     */
    isLicenseTransferable(request: PiLicenseTemplateIsLicenseTransferableRequest): Promise<PiLicenseTemplateIsLicenseTransferableResponse>;
    /**
     * method name for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateNameRequest
     * @return Promise<PiLicenseTemplateNameResponse>
     */
    name(): Promise<PiLicenseTemplateNameResponse>;
    /**
     * method proxiableUUID for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateProxiableUuidRequest
     * @return Promise<PiLicenseTemplateProxiableUuidResponse>
     */
    proxiableUuid(): Promise<PiLicenseTemplateProxiableUuidResponse>;
    /**
     * method supportsInterface for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateSupportsInterfaceRequest
     * @return Promise<PiLicenseTemplateSupportsInterfaceResponse>
     */
    supportsInterface(request: PiLicenseTemplateSupportsInterfaceRequest): Promise<PiLicenseTemplateSupportsInterfaceResponse>;
    /**
     * method toJson for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateToJsonRequest
     * @return Promise<PiLicenseTemplateToJsonResponse>
     */
    toJson(request: PiLicenseTemplateToJsonRequest): Promise<PiLicenseTemplateToJsonResponse>;
    /**
     * method totalRegisteredLicenseTerms for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateTotalRegisteredLicenseTermsRequest
     * @return Promise<PiLicenseTemplateTotalRegisteredLicenseTermsResponse>
     */
    totalRegisteredLicenseTerms(): Promise<PiLicenseTemplateTotalRegisteredLicenseTermsResponse>;
    /**
     * method verifyCompatibleLicenses for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateVerifyCompatibleLicensesRequest
     * @return Promise<PiLicenseTemplateVerifyCompatibleLicensesResponse>
     */
    verifyCompatibleLicenses(request: PiLicenseTemplateVerifyCompatibleLicensesRequest): Promise<PiLicenseTemplateVerifyCompatibleLicensesResponse>;
}
/**
 * contract PILicenseTemplate write method
 */
export declare class PiLicenseTemplateClient extends PiLicenseTemplateReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method initialize for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateInitializeRequest
     * @return Promise<WriteContractReturnType>
     */
    initialize(request: PiLicenseTemplateInitializeRequest): Promise<WriteContractReturnType>;
    /**
     * method initialize for contract PILicenseTemplate with only encode
     *
     * @param request PiLicenseTemplateInitializeRequest
     * @return EncodedTxData
     */
    initializeEncode(request: PiLicenseTemplateInitializeRequest): EncodedTxData;
    /**
     * method registerLicenseTerms for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateRegisterLicenseTermsRequest
     * @return Promise<WriteContractReturnType>
     */
    registerLicenseTerms(request: PiLicenseTemplateRegisterLicenseTermsRequest): Promise<WriteContractReturnType>;
    /**
     * method registerLicenseTerms for contract PILicenseTemplate with only encode
     *
     * @param request PiLicenseTemplateRegisterLicenseTermsRequest
     * @return EncodedTxData
     */
    registerLicenseTermsEncode(request: PiLicenseTemplateRegisterLicenseTermsRequest): EncodedTxData;
    /**
     * method setApproval for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateSetApprovalRequest
     * @return Promise<WriteContractReturnType>
     */
    setApproval(request: PiLicenseTemplateSetApprovalRequest): Promise<WriteContractReturnType>;
    /**
     * method setApproval for contract PILicenseTemplate with only encode
     *
     * @param request PiLicenseTemplateSetApprovalRequest
     * @return EncodedTxData
     */
    setApprovalEncode(request: PiLicenseTemplateSetApprovalRequest): EncodedTxData;
    /**
     * method setAuthority for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateSetAuthorityRequest
     * @return Promise<WriteContractReturnType>
     */
    setAuthority(request: PiLicenseTemplateSetAuthorityRequest): Promise<WriteContractReturnType>;
    /**
     * method setAuthority for contract PILicenseTemplate with only encode
     *
     * @param request PiLicenseTemplateSetAuthorityRequest
     * @return EncodedTxData
     */
    setAuthorityEncode(request: PiLicenseTemplateSetAuthorityRequest): EncodedTxData;
    /**
     * method upgradeToAndCall for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateUpgradeToAndCallRequest
     * @return Promise<WriteContractReturnType>
     */
    upgradeToAndCall(request: PiLicenseTemplateUpgradeToAndCallRequest): Promise<WriteContractReturnType>;
    /**
     * method upgradeToAndCall for contract PILicenseTemplate with only encode
     *
     * @param request PiLicenseTemplateUpgradeToAndCallRequest
     * @return EncodedTxData
     */
    upgradeToAndCallEncode(request: PiLicenseTemplateUpgradeToAndCallRequest): EncodedTxData;
    /**
     * method verifyMintLicenseToken for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateVerifyMintLicenseTokenRequest
     * @return Promise<WriteContractReturnType>
     */
    verifyMintLicenseToken(request: PiLicenseTemplateVerifyMintLicenseTokenRequest): Promise<WriteContractReturnType>;
    /**
     * method verifyMintLicenseToken for contract PILicenseTemplate with only encode
     *
     * @param request PiLicenseTemplateVerifyMintLicenseTokenRequest
     * @return EncodedTxData
     */
    verifyMintLicenseTokenEncode(request: PiLicenseTemplateVerifyMintLicenseTokenRequest): EncodedTxData;
    /**
     * method verifyRegisterDerivative for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateVerifyRegisterDerivativeRequest
     * @return Promise<WriteContractReturnType>
     */
    verifyRegisterDerivative(request: PiLicenseTemplateVerifyRegisterDerivativeRequest): Promise<WriteContractReturnType>;
    /**
     * method verifyRegisterDerivative for contract PILicenseTemplate with only encode
     *
     * @param request PiLicenseTemplateVerifyRegisterDerivativeRequest
     * @return EncodedTxData
     */
    verifyRegisterDerivativeEncode(request: PiLicenseTemplateVerifyRegisterDerivativeRequest): EncodedTxData;
    /**
     * method verifyRegisterDerivativeForAllParents for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateVerifyRegisterDerivativeForAllParentsRequest
     * @return Promise<WriteContractReturnType>
     */
    verifyRegisterDerivativeForAllParents(request: PiLicenseTemplateVerifyRegisterDerivativeForAllParentsRequest): Promise<WriteContractReturnType>;
    /**
     * method verifyRegisterDerivativeForAllParents for contract PILicenseTemplate with only encode
     *
     * @param request PiLicenseTemplateVerifyRegisterDerivativeForAllParentsRequest
     * @return EncodedTxData
     */
    verifyRegisterDerivativeForAllParentsEncode(request: PiLicenseTemplateVerifyRegisterDerivativeForAllParentsRequest): EncodedTxData;
}
/**
 * RegistrationWorkflowsCollectionCreatedEvent
 *
 * @param spgNftContract address
 */
export type RegistrationWorkflowsCollectionCreatedEvent = {
    spgNftContract: Address;
};
/**
 * RegistrationWorkflowsCreateCollectionRequest
 *
 * @param spgNftInitParams tuple
 */
export type RegistrationWorkflowsCreateCollectionRequest = {
    spgNftInitParams: {
        name: string;
        symbol: string;
        baseURI: string;
        contractURI: string;
        maxSupply: number;
        mintFee: bigint;
        mintFeeToken: Address;
        mintFeeRecipient: Address;
        owner: Address;
        mintOpen: boolean;
        isPublicMinting: boolean;
    };
};
/**
 * RegistrationWorkflowsMintAndRegisterIpRequest
 *
 * @param spgNftContract address
 * @param recipient address
 * @param ipMetadata tuple
 * @param allowDuplicates bool
 */
export type RegistrationWorkflowsMintAndRegisterIpRequest = {
    spgNftContract: Address;
    recipient: Address;
    ipMetadata: {
        ipMetadataURI: string;
        ipMetadataHash: Hex;
        nftMetadataURI: string;
        nftMetadataHash: Hex;
    };
    allowDuplicates: boolean;
};
/**
 * RegistrationWorkflowsMulticallRequest
 *
 * @param data bytes[]
 */
export type RegistrationWorkflowsMulticallRequest = {
    data: readonly Hex[];
};
/**
 * RegistrationWorkflowsRegisterIpRequest
 *
 * @param nftContract address
 * @param tokenId uint256
 * @param ipMetadata tuple
 * @param sigMetadata tuple
 */
export type RegistrationWorkflowsRegisterIpRequest = {
    nftContract: Address;
    tokenId: bigint;
    ipMetadata: {
        ipMetadataURI: string;
        ipMetadataHash: Hex;
        nftMetadataURI: string;
        nftMetadataHash: Hex;
    };
    sigMetadata: {
        signer: Address;
        deadline: bigint;
        signature: Hex;
    };
};
/**
 * contract RegistrationWorkflows event
 */
export declare class RegistrationWorkflowsEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event CollectionCreated for contract RegistrationWorkflows
     */
    watchCollectionCreatedEvent(onLogs: (txHash: Hex, ev: Partial<RegistrationWorkflowsCollectionCreatedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event CollectionCreated for contract RegistrationWorkflows
     */
    parseTxCollectionCreatedEvent(txReceipt: TransactionReceipt): Array<RegistrationWorkflowsCollectionCreatedEvent>;
}
/**
 * contract RegistrationWorkflows write method
 */
export declare class RegistrationWorkflowsClient extends RegistrationWorkflowsEventClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method createCollection for contract RegistrationWorkflows
     *
     * @param request RegistrationWorkflowsCreateCollectionRequest
     * @return Promise<WriteContractReturnType>
     */
    createCollection(request: RegistrationWorkflowsCreateCollectionRequest): Promise<WriteContractReturnType>;
    /**
     * method createCollection for contract RegistrationWorkflows with only encode
     *
     * @param request RegistrationWorkflowsCreateCollectionRequest
     * @return EncodedTxData
     */
    createCollectionEncode(request: RegistrationWorkflowsCreateCollectionRequest): EncodedTxData;
    /**
     * method mintAndRegisterIp for contract RegistrationWorkflows
     *
     * @param request RegistrationWorkflowsMintAndRegisterIpRequest
     * @return Promise<WriteContractReturnType>
     */
    mintAndRegisterIp(request: RegistrationWorkflowsMintAndRegisterIpRequest): Promise<WriteContractReturnType>;
    /**
     * method mintAndRegisterIp for contract RegistrationWorkflows with only encode
     *
     * @param request RegistrationWorkflowsMintAndRegisterIpRequest
     * @return EncodedTxData
     */
    mintAndRegisterIpEncode(request: RegistrationWorkflowsMintAndRegisterIpRequest): EncodedTxData;
    /**
     * method multicall for contract RegistrationWorkflows
     *
     * @param request RegistrationWorkflowsMulticallRequest
     * @return Promise<WriteContractReturnType>
     */
    multicall(request: RegistrationWorkflowsMulticallRequest): Promise<WriteContractReturnType>;
    /**
     * method multicall for contract RegistrationWorkflows with only encode
     *
     * @param request RegistrationWorkflowsMulticallRequest
     * @return EncodedTxData
     */
    multicallEncode(request: RegistrationWorkflowsMulticallRequest): EncodedTxData;
    /**
     * method registerIp for contract RegistrationWorkflows
     *
     * @param request RegistrationWorkflowsRegisterIpRequest
     * @return Promise<WriteContractReturnType>
     */
    registerIp(request: RegistrationWorkflowsRegisterIpRequest): Promise<WriteContractReturnType>;
    /**
     * method registerIp for contract RegistrationWorkflows with only encode
     *
     * @param request RegistrationWorkflowsRegisterIpRequest
     * @return EncodedTxData
     */
    registerIpEncode(request: RegistrationWorkflowsRegisterIpRequest): EncodedTxData;
}
/**
 * RoyaltyModuleIpRoyaltyVaultDeployedEvent
 *
 * @param ipId address
 * @param ipRoyaltyVault address
 */
export type RoyaltyModuleIpRoyaltyVaultDeployedEvent = {
    ipId: Address;
    ipRoyaltyVault: Address;
};
/**
 * RoyaltyModuleIpRoyaltyVaultsRequest
 *
 * @param ipId address
 */
export type RoyaltyModuleIpRoyaltyVaultsRequest = {
    ipId: Address;
};
export type RoyaltyModuleIpRoyaltyVaultsResponse = Address;
/**
 * RoyaltyModuleIsWhitelistedRoyaltyPolicyRequest
 *
 * @param royaltyPolicy address
 */
export type RoyaltyModuleIsWhitelistedRoyaltyPolicyRequest = {
    royaltyPolicy: Address;
};
export type RoyaltyModuleIsWhitelistedRoyaltyPolicyResponse = boolean;
/**
 * RoyaltyModuleIsWhitelistedRoyaltyTokenRequest
 *
 * @param token address
 */
export type RoyaltyModuleIsWhitelistedRoyaltyTokenRequest = {
    token: Address;
};
export type RoyaltyModuleIsWhitelistedRoyaltyTokenResponse = boolean;
/**
 * RoyaltyModulePayRoyaltyOnBehalfRequest
 *
 * @param receiverIpId address
 * @param payerIpId address
 * @param token address
 * @param amount uint256
 */
export type RoyaltyModulePayRoyaltyOnBehalfRequest = {
    receiverIpId: Address;
    payerIpId: Address;
    token: Address;
    amount: bigint;
};
/**
 * contract RoyaltyModule event
 */
export declare class RoyaltyModuleEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event IpRoyaltyVaultDeployed for contract RoyaltyModule
     */
    watchIpRoyaltyVaultDeployedEvent(onLogs: (txHash: Hex, ev: Partial<RoyaltyModuleIpRoyaltyVaultDeployedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event IpRoyaltyVaultDeployed for contract RoyaltyModule
     */
    parseTxIpRoyaltyVaultDeployedEvent(txReceipt: TransactionReceipt): Array<RoyaltyModuleIpRoyaltyVaultDeployedEvent>;
}
/**
 * contract RoyaltyModule readonly method
 */
export declare class RoyaltyModuleReadOnlyClient extends RoyaltyModuleEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method ipRoyaltyVaults for contract RoyaltyModule
     *
     * @param request RoyaltyModuleIpRoyaltyVaultsRequest
     * @return Promise<RoyaltyModuleIpRoyaltyVaultsResponse>
     */
    ipRoyaltyVaults(request: RoyaltyModuleIpRoyaltyVaultsRequest): Promise<RoyaltyModuleIpRoyaltyVaultsResponse>;
    /**
     * method isWhitelistedRoyaltyPolicy for contract RoyaltyModule
     *
     * @param request RoyaltyModuleIsWhitelistedRoyaltyPolicyRequest
     * @return Promise<RoyaltyModuleIsWhitelistedRoyaltyPolicyResponse>
     */
    isWhitelistedRoyaltyPolicy(request: RoyaltyModuleIsWhitelistedRoyaltyPolicyRequest): Promise<RoyaltyModuleIsWhitelistedRoyaltyPolicyResponse>;
    /**
     * method isWhitelistedRoyaltyToken for contract RoyaltyModule
     *
     * @param request RoyaltyModuleIsWhitelistedRoyaltyTokenRequest
     * @return Promise<RoyaltyModuleIsWhitelistedRoyaltyTokenResponse>
     */
    isWhitelistedRoyaltyToken(request: RoyaltyModuleIsWhitelistedRoyaltyTokenRequest): Promise<RoyaltyModuleIsWhitelistedRoyaltyTokenResponse>;
}
/**
 * contract RoyaltyModule write method
 */
export declare class RoyaltyModuleClient extends RoyaltyModuleReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method payRoyaltyOnBehalf for contract RoyaltyModule
     *
     * @param request RoyaltyModulePayRoyaltyOnBehalfRequest
     * @return Promise<WriteContractReturnType>
     */
    payRoyaltyOnBehalf(request: RoyaltyModulePayRoyaltyOnBehalfRequest): Promise<WriteContractReturnType>;
    /**
     * method payRoyaltyOnBehalf for contract RoyaltyModule with only encode
     *
     * @param request RoyaltyModulePayRoyaltyOnBehalfRequest
     * @return EncodedTxData
     */
    payRoyaltyOnBehalfEncode(request: RoyaltyModulePayRoyaltyOnBehalfRequest): EncodedTxData;
}
/**
 * RoyaltyPolicyLrpAuthorityUpdatedEvent
 *
 * @param authority address
 */
export type RoyaltyPolicyLrpAuthorityUpdatedEvent = {
    authority: Address;
};
/**
 * RoyaltyPolicyLrpInitializedEvent
 *
 * @param version uint64
 */
export type RoyaltyPolicyLrpInitializedEvent = {
    version: bigint;
};
/**
 * RoyaltyPolicyLrpPausedEvent
 *
 * @param account address
 */
export type RoyaltyPolicyLrpPausedEvent = {
    account: Address;
};
/**
 * RoyaltyPolicyLrpRevenueTransferredToVaultEvent
 *
 * @param ipId address
 * @param ancestorIpId address
 * @param token address
 * @param amount uint256
 */
export type RoyaltyPolicyLrpRevenueTransferredToVaultEvent = {
    ipId: Address;
    ancestorIpId: Address;
    token: Address;
    amount: bigint;
};
/**
 * RoyaltyPolicyLrpUnpausedEvent
 *
 * @param account address
 */
export type RoyaltyPolicyLrpUnpausedEvent = {
    account: Address;
};
/**
 * RoyaltyPolicyLrpUpgradedEvent
 *
 * @param implementation address
 */
export type RoyaltyPolicyLrpUpgradedEvent = {
    implementation: Address;
};
export type RoyaltyPolicyLrpIpGraphResponse = Address;
export type RoyaltyPolicyLrpIpGraphAclResponse = Address;
export type RoyaltyPolicyLrpRoyaltyModuleResponse = Address;
export type RoyaltyPolicyLrpRoyaltyPolicyLapResponse = Address;
export type RoyaltyPolicyLrpUpgradeInterfaceVersionResponse = string;
export type RoyaltyPolicyLrpAuthorityResponse = Address;
/**
 * RoyaltyPolicyLrpGetPolicyRoyaltyStackRequest
 *
 * @param ipId address
 */
export type RoyaltyPolicyLrpGetPolicyRoyaltyStackRequest = {
    ipId: Address;
};
export type RoyaltyPolicyLrpGetPolicyRoyaltyStackResponse = number;
/**
 * RoyaltyPolicyLrpGetPolicyRtsRequiredToLinkRequest
 *
 * @param ipId address
 * @param licensePercent uint32
 */
export type RoyaltyPolicyLrpGetPolicyRtsRequiredToLinkRequest = {
    ipId: Address;
    licensePercent: number;
};
export type RoyaltyPolicyLrpGetPolicyRtsRequiredToLinkResponse = number;
/**
 * RoyaltyPolicyLrpGetTransferredTokensRequest
 *
 * @param ipId address
 * @param ancestorIpId address
 * @param token address
 */
export type RoyaltyPolicyLrpGetTransferredTokensRequest = {
    ipId: Address;
    ancestorIpId: Address;
    token: Address;
};
export type RoyaltyPolicyLrpGetTransferredTokensResponse = bigint;
export type RoyaltyPolicyLrpIsConsumingScheduledOpResponse = Hex;
export type RoyaltyPolicyLrpIsSupportGroupResponse = boolean;
export type RoyaltyPolicyLrpPausedResponse = boolean;
export type RoyaltyPolicyLrpProxiableUuidResponse = Hex;
/**
 * RoyaltyPolicyLrpProtocolPausableInitRequest
 *
 * @param accessManager address
 */
export type RoyaltyPolicyLrpProtocolPausableInitRequest = {
    accessManager: Address;
};
/**
 * RoyaltyPolicyLrpGetPolicyRoyaltyRequest
 *
 * @param ipId address
 * @param ancestorIpId address
 */
export type RoyaltyPolicyLrpGetPolicyRoyaltyRequest = {
    ipId: Address;
    ancestorIpId: Address;
};
/**
 * RoyaltyPolicyLrpInitializeRequest
 *
 * @param accessManager address
 */
export type RoyaltyPolicyLrpInitializeRequest = {
    accessManager: Address;
};
/**
 * RoyaltyPolicyLrpOnLicenseMintingRequest
 *
 * @param 0 address
 * @param 1 uint32
 * @param 2 bytes
 */
export type RoyaltyPolicyLrpOnLicenseMintingRequest = readonly [Address, number, Hex];
/**
 * RoyaltyPolicyLrpOnLinkToParentsRequest
 *
 * @param 0 address
 * @param 1 address[]
 * @param 2 address[]
 * @param 3 uint32[]
 * @param 4 bytes
 */
export type RoyaltyPolicyLrpOnLinkToParentsRequest = readonly [
    Address,
    readonly Address[],
    readonly Address[],
    readonly number[],
    Hex
];
/**
 * RoyaltyPolicyLrpSetAuthorityRequest
 *
 * @param newAuthority address
 */
export type RoyaltyPolicyLrpSetAuthorityRequest = {
    newAuthority: Address;
};
/**
 * RoyaltyPolicyLrpTransferToVaultRequest
 *
 * @param ipId address
 * @param ancestorIpId address
 * @param token address
 */
export type RoyaltyPolicyLrpTransferToVaultRequest = {
    ipId: Address;
    ancestorIpId: Address;
    token: Address;
};
/**
 * RoyaltyPolicyLrpUpgradeToAndCallRequest
 *
 * @param newImplementation address
 * @param data bytes
 */
export type RoyaltyPolicyLrpUpgradeToAndCallRequest = {
    newImplementation: Address;
    data: Hex;
};
/**
 * contract RoyaltyPolicyLRP event
 */
export declare class RoyaltyPolicyLrpEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event AuthorityUpdated for contract RoyaltyPolicyLRP
     */
    watchAuthorityUpdatedEvent(onLogs: (txHash: Hex, ev: Partial<RoyaltyPolicyLrpAuthorityUpdatedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event AuthorityUpdated for contract RoyaltyPolicyLRP
     */
    parseTxAuthorityUpdatedEvent(txReceipt: TransactionReceipt): Array<RoyaltyPolicyLrpAuthorityUpdatedEvent>;
    /**
     * event Initialized for contract RoyaltyPolicyLRP
     */
    watchInitializedEvent(onLogs: (txHash: Hex, ev: Partial<RoyaltyPolicyLrpInitializedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Initialized for contract RoyaltyPolicyLRP
     */
    parseTxInitializedEvent(txReceipt: TransactionReceipt): Array<RoyaltyPolicyLrpInitializedEvent>;
    /**
     * event Paused for contract RoyaltyPolicyLRP
     */
    watchPausedEvent(onLogs: (txHash: Hex, ev: Partial<RoyaltyPolicyLrpPausedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Paused for contract RoyaltyPolicyLRP
     */
    parseTxPausedEvent(txReceipt: TransactionReceipt): Array<RoyaltyPolicyLrpPausedEvent>;
    /**
     * event RevenueTransferredToVault for contract RoyaltyPolicyLRP
     */
    watchRevenueTransferredToVaultEvent(onLogs: (txHash: Hex, ev: Partial<RoyaltyPolicyLrpRevenueTransferredToVaultEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event RevenueTransferredToVault for contract RoyaltyPolicyLRP
     */
    parseTxRevenueTransferredToVaultEvent(txReceipt: TransactionReceipt): Array<RoyaltyPolicyLrpRevenueTransferredToVaultEvent>;
    /**
     * event Unpaused for contract RoyaltyPolicyLRP
     */
    watchUnpausedEvent(onLogs: (txHash: Hex, ev: Partial<RoyaltyPolicyLrpUnpausedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Unpaused for contract RoyaltyPolicyLRP
     */
    parseTxUnpausedEvent(txReceipt: TransactionReceipt): Array<RoyaltyPolicyLrpUnpausedEvent>;
    /**
     * event Upgraded for contract RoyaltyPolicyLRP
     */
    watchUpgradedEvent(onLogs: (txHash: Hex, ev: Partial<RoyaltyPolicyLrpUpgradedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Upgraded for contract RoyaltyPolicyLRP
     */
    parseTxUpgradedEvent(txReceipt: TransactionReceipt): Array<RoyaltyPolicyLrpUpgradedEvent>;
}
/**
 * contract RoyaltyPolicyLRP readonly method
 */
export declare class RoyaltyPolicyLrpReadOnlyClient extends RoyaltyPolicyLrpEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method IP_GRAPH for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpIpGraphRequest
     * @return Promise<RoyaltyPolicyLrpIpGraphResponse>
     */
    ipGraph(): Promise<RoyaltyPolicyLrpIpGraphResponse>;
    /**
     * method IP_GRAPH_ACL for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpIpGraphAclRequest
     * @return Promise<RoyaltyPolicyLrpIpGraphAclResponse>
     */
    ipGraphAcl(): Promise<RoyaltyPolicyLrpIpGraphAclResponse>;
    /**
     * method ROYALTY_MODULE for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpRoyaltyModuleRequest
     * @return Promise<RoyaltyPolicyLrpRoyaltyModuleResponse>
     */
    royaltyModule(): Promise<RoyaltyPolicyLrpRoyaltyModuleResponse>;
    /**
     * method ROYALTY_POLICY_LAP for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpRoyaltyPolicyLapRequest
     * @return Promise<RoyaltyPolicyLrpRoyaltyPolicyLapResponse>
     */
    royaltyPolicyLap(): Promise<RoyaltyPolicyLrpRoyaltyPolicyLapResponse>;
    /**
     * method UPGRADE_INTERFACE_VERSION for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpUpgradeInterfaceVersionRequest
     * @return Promise<RoyaltyPolicyLrpUpgradeInterfaceVersionResponse>
     */
    upgradeInterfaceVersion(): Promise<RoyaltyPolicyLrpUpgradeInterfaceVersionResponse>;
    /**
     * method authority for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpAuthorityRequest
     * @return Promise<RoyaltyPolicyLrpAuthorityResponse>
     */
    authority(): Promise<RoyaltyPolicyLrpAuthorityResponse>;
    /**
     * method getPolicyRoyaltyStack for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpGetPolicyRoyaltyStackRequest
     * @return Promise<RoyaltyPolicyLrpGetPolicyRoyaltyStackResponse>
     */
    getPolicyRoyaltyStack(request: RoyaltyPolicyLrpGetPolicyRoyaltyStackRequest): Promise<RoyaltyPolicyLrpGetPolicyRoyaltyStackResponse>;
    /**
     * method getPolicyRtsRequiredToLink for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpGetPolicyRtsRequiredToLinkRequest
     * @return Promise<RoyaltyPolicyLrpGetPolicyRtsRequiredToLinkResponse>
     */
    getPolicyRtsRequiredToLink(request: RoyaltyPolicyLrpGetPolicyRtsRequiredToLinkRequest): Promise<RoyaltyPolicyLrpGetPolicyRtsRequiredToLinkResponse>;
    /**
     * method getTransferredTokens for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpGetTransferredTokensRequest
     * @return Promise<RoyaltyPolicyLrpGetTransferredTokensResponse>
     */
    getTransferredTokens(request: RoyaltyPolicyLrpGetTransferredTokensRequest): Promise<RoyaltyPolicyLrpGetTransferredTokensResponse>;
    /**
     * method isConsumingScheduledOp for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpIsConsumingScheduledOpRequest
     * @return Promise<RoyaltyPolicyLrpIsConsumingScheduledOpResponse>
     */
    isConsumingScheduledOp(): Promise<RoyaltyPolicyLrpIsConsumingScheduledOpResponse>;
    /**
     * method isSupportGroup for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpIsSupportGroupRequest
     * @return Promise<RoyaltyPolicyLrpIsSupportGroupResponse>
     */
    isSupportGroup(): Promise<RoyaltyPolicyLrpIsSupportGroupResponse>;
    /**
     * method paused for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpPausedRequest
     * @return Promise<RoyaltyPolicyLrpPausedResponse>
     */
    paused(): Promise<RoyaltyPolicyLrpPausedResponse>;
    /**
     * method proxiableUUID for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpProxiableUuidRequest
     * @return Promise<RoyaltyPolicyLrpProxiableUuidResponse>
     */
    proxiableUuid(): Promise<RoyaltyPolicyLrpProxiableUuidResponse>;
}
/**
 * contract RoyaltyPolicyLRP write method
 */
export declare class RoyaltyPolicyLrpClient extends RoyaltyPolicyLrpReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method __ProtocolPausable_init for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpProtocolPausableInitRequest
     * @return Promise<WriteContractReturnType>
     */
    protocolPausableInit(request: RoyaltyPolicyLrpProtocolPausableInitRequest): Promise<WriteContractReturnType>;
    /**
     * method __ProtocolPausable_init for contract RoyaltyPolicyLRP with only encode
     *
     * @param request RoyaltyPolicyLrpProtocolPausableInitRequest
     * @return EncodedTxData
     */
    protocolPausableInitEncode(request: RoyaltyPolicyLrpProtocolPausableInitRequest): EncodedTxData;
    /**
     * method getPolicyRoyalty for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpGetPolicyRoyaltyRequest
     * @return Promise<WriteContractReturnType>
     */
    getPolicyRoyalty(request: RoyaltyPolicyLrpGetPolicyRoyaltyRequest): Promise<WriteContractReturnType>;
    /**
     * method getPolicyRoyalty for contract RoyaltyPolicyLRP with only encode
     *
     * @param request RoyaltyPolicyLrpGetPolicyRoyaltyRequest
     * @return EncodedTxData
     */
    getPolicyRoyaltyEncode(request: RoyaltyPolicyLrpGetPolicyRoyaltyRequest): EncodedTxData;
    /**
     * method initialize for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpInitializeRequest
     * @return Promise<WriteContractReturnType>
     */
    initialize(request: RoyaltyPolicyLrpInitializeRequest): Promise<WriteContractReturnType>;
    /**
     * method initialize for contract RoyaltyPolicyLRP with only encode
     *
     * @param request RoyaltyPolicyLrpInitializeRequest
     * @return EncodedTxData
     */
    initializeEncode(request: RoyaltyPolicyLrpInitializeRequest): EncodedTxData;
    /**
     * method onLicenseMinting for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpOnLicenseMintingRequest
     * @return Promise<WriteContractReturnType>
     */
    onLicenseMinting(request: RoyaltyPolicyLrpOnLicenseMintingRequest): Promise<WriteContractReturnType>;
    /**
     * method onLicenseMinting for contract RoyaltyPolicyLRP with only encode
     *
     * @param request RoyaltyPolicyLrpOnLicenseMintingRequest
     * @return EncodedTxData
     */
    onLicenseMintingEncode(request: RoyaltyPolicyLrpOnLicenseMintingRequest): EncodedTxData;
    /**
     * method onLinkToParents for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpOnLinkToParentsRequest
     * @return Promise<WriteContractReturnType>
     */
    onLinkToParents(request: RoyaltyPolicyLrpOnLinkToParentsRequest): Promise<WriteContractReturnType>;
    /**
     * method onLinkToParents for contract RoyaltyPolicyLRP with only encode
     *
     * @param request RoyaltyPolicyLrpOnLinkToParentsRequest
     * @return EncodedTxData
     */
    onLinkToParentsEncode(request: RoyaltyPolicyLrpOnLinkToParentsRequest): EncodedTxData;
    /**
     * method pause for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpPauseRequest
     * @return Promise<WriteContractReturnType>
     */
    pause(): Promise<WriteContractReturnType>;
    /**
     * method pause for contract RoyaltyPolicyLRP with only encode
     *
     * @param request RoyaltyPolicyLrpPauseRequest
     * @return EncodedTxData
     */
    pauseEncode(): EncodedTxData;
    /**
     * method setAuthority for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpSetAuthorityRequest
     * @return Promise<WriteContractReturnType>
     */
    setAuthority(request: RoyaltyPolicyLrpSetAuthorityRequest): Promise<WriteContractReturnType>;
    /**
     * method setAuthority for contract RoyaltyPolicyLRP with only encode
     *
     * @param request RoyaltyPolicyLrpSetAuthorityRequest
     * @return EncodedTxData
     */
    setAuthorityEncode(request: RoyaltyPolicyLrpSetAuthorityRequest): EncodedTxData;
    /**
     * method transferToVault for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpTransferToVaultRequest
     * @return Promise<WriteContractReturnType>
     */
    transferToVault(request: RoyaltyPolicyLrpTransferToVaultRequest): Promise<WriteContractReturnType>;
    /**
     * method transferToVault for contract RoyaltyPolicyLRP with only encode
     *
     * @param request RoyaltyPolicyLrpTransferToVaultRequest
     * @return EncodedTxData
     */
    transferToVaultEncode(request: RoyaltyPolicyLrpTransferToVaultRequest): EncodedTxData;
    /**
     * method unpause for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpUnpauseRequest
     * @return Promise<WriteContractReturnType>
     */
    unpause(): Promise<WriteContractReturnType>;
    /**
     * method unpause for contract RoyaltyPolicyLRP with only encode
     *
     * @param request RoyaltyPolicyLrpUnpauseRequest
     * @return EncodedTxData
     */
    unpauseEncode(): EncodedTxData;
    /**
     * method upgradeToAndCall for contract RoyaltyPolicyLRP
     *
     * @param request RoyaltyPolicyLrpUpgradeToAndCallRequest
     * @return Promise<WriteContractReturnType>
     */
    upgradeToAndCall(request: RoyaltyPolicyLrpUpgradeToAndCallRequest): Promise<WriteContractReturnType>;
    /**
     * method upgradeToAndCall for contract RoyaltyPolicyLRP with only encode
     *
     * @param request RoyaltyPolicyLrpUpgradeToAndCallRequest
     * @return EncodedTxData
     */
    upgradeToAndCallEncode(request: RoyaltyPolicyLrpUpgradeToAndCallRequest): EncodedTxData;
}
/**
 * RoyaltyTokenDistributionWorkflowsDistributeRoyaltyTokensRequest
 *
 * @param ipId address
 * @param royaltyShares tuple[]
 * @param sigApproveRoyaltyTokens tuple
 */
export type RoyaltyTokenDistributionWorkflowsDistributeRoyaltyTokensRequest = {
    ipId: Address;
    royaltyShares: {
        recipient: Address;
        percentage: number;
    }[];
    sigApproveRoyaltyTokens: {
        signer: Address;
        deadline: bigint;
        signature: Hex;
    };
};
/**
 * RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensRequest
 *
 * @param spgNftContract address
 * @param recipient address
 * @param ipMetadata tuple
 * @param licenseTermsData tuple[]
 * @param royaltyShares tuple[]
 * @param allowDuplicates bool
 */
export type RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensRequest = {
    spgNftContract: Address;
    recipient: Address;
    ipMetadata: {
        ipMetadataURI: string;
        ipMetadataHash: Hex;
        nftMetadataURI: string;
        nftMetadataHash: Hex;
    };
    licenseTermsData: {
        terms: {
            transferable: boolean;
            royaltyPolicy: Address;
            defaultMintingFee: bigint;
            expiration: bigint;
            commercialUse: boolean;
            commercialAttribution: boolean;
            commercializerChecker: Address;
            commercializerCheckerData: Hex;
            commercialRevShare: number;
            commercialRevCeiling: bigint;
            derivativesAllowed: boolean;
            derivativesAttribution: boolean;
            derivativesApproval: boolean;
            derivativesReciprocal: boolean;
            derivativeRevCeiling: bigint;
            currency: Address;
            uri: string;
        };
        licensingConfig: {
            isSet: boolean;
            mintingFee: bigint;
            licensingHook: Address;
            hookData: Hex;
            commercialRevShare: number;
            disabled: boolean;
            expectMinimumGroupRewardShare: number;
            expectGroupRewardPool: Address;
        };
    }[];
    royaltyShares: {
        recipient: Address;
        percentage: number;
    }[];
    allowDuplicates: boolean;
};
/**
 * RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest
 *
 * @param spgNftContract address
 * @param recipient address
 * @param ipMetadata tuple
 * @param derivData tuple
 * @param royaltyShares tuple[]
 * @param allowDuplicates bool
 */
export type RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest = {
    spgNftContract: Address;
    recipient: Address;
    ipMetadata: {
        ipMetadataURI: string;
        ipMetadataHash: Hex;
        nftMetadataURI: string;
        nftMetadataHash: Hex;
    };
    derivData: {
        parentIpIds: readonly Address[];
        licenseTemplate: Address;
        licenseTermsIds: readonly bigint[];
        royaltyContext: Hex;
        maxMintingFee: bigint;
        maxRts: number;
        maxRevenueShare: number;
    };
    royaltyShares: {
        recipient: Address;
        percentage: number;
    }[];
    allowDuplicates: boolean;
};
/**
 * RoyaltyTokenDistributionWorkflowsRegisterIpAndAttachPilTermsAndDeployRoyaltyVaultRequest
 *
 * @param nftContract address
 * @param tokenId uint256
 * @param ipMetadata tuple
 * @param licenseTermsData tuple[]
 * @param sigMetadataAndAttachAndConfig tuple
 */
export type RoyaltyTokenDistributionWorkflowsRegisterIpAndAttachPilTermsAndDeployRoyaltyVaultRequest = {
    nftContract: Address;
    tokenId: bigint;
    ipMetadata: {
        ipMetadataURI: string;
        ipMetadataHash: Hex;
        nftMetadataURI: string;
        nftMetadataHash: Hex;
    };
    licenseTermsData: {
        terms: {
            transferable: boolean;
            royaltyPolicy: Address;
            defaultMintingFee: bigint;
            expiration: bigint;
            commercialUse: boolean;
            commercialAttribution: boolean;
            commercializerChecker: Address;
            commercializerCheckerData: Hex;
            commercialRevShare: number;
            commercialRevCeiling: bigint;
            derivativesAllowed: boolean;
            derivativesAttribution: boolean;
            derivativesApproval: boolean;
            derivativesReciprocal: boolean;
            derivativeRevCeiling: bigint;
            currency: Address;
            uri: string;
        };
        licensingConfig: {
            isSet: boolean;
            mintingFee: bigint;
            licensingHook: Address;
            hookData: Hex;
            commercialRevShare: number;
            disabled: boolean;
            expectMinimumGroupRewardShare: number;
            expectGroupRewardPool: Address;
        };
    }[];
    sigMetadataAndAttachAndConfig: {
        signer: Address;
        deadline: bigint;
        signature: Hex;
    };
};
/**
 * RoyaltyTokenDistributionWorkflowsRegisterIpAndMakeDerivativeAndDeployRoyaltyVaultRequest
 *
 * @param nftContract address
 * @param tokenId uint256
 * @param ipMetadata tuple
 * @param derivData tuple
 * @param sigMetadataAndRegister tuple
 */
export type RoyaltyTokenDistributionWorkflowsRegisterIpAndMakeDerivativeAndDeployRoyaltyVaultRequest = {
    nftContract: Address;
    tokenId: bigint;
    ipMetadata: {
        ipMetadataURI: string;
        ipMetadataHash: Hex;
        nftMetadataURI: string;
        nftMetadataHash: Hex;
    };
    derivData: {
        parentIpIds: readonly Address[];
        licenseTemplate: Address;
        licenseTermsIds: readonly bigint[];
        royaltyContext: Hex;
        maxMintingFee: bigint;
        maxRts: number;
        maxRevenueShare: number;
    };
    sigMetadataAndRegister: {
        signer: Address;
        deadline: bigint;
        signature: Hex;
    };
};
/**
 * contract RoyaltyTokenDistributionWorkflows write method
 */
export declare class RoyaltyTokenDistributionWorkflowsClient {
    protected readonly wallet: SimpleWalletClient;
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method distributeRoyaltyTokens for contract RoyaltyTokenDistributionWorkflows
     *
     * @param request RoyaltyTokenDistributionWorkflowsDistributeRoyaltyTokensRequest
     * @return Promise<WriteContractReturnType>
     */
    distributeRoyaltyTokens(request: RoyaltyTokenDistributionWorkflowsDistributeRoyaltyTokensRequest): Promise<WriteContractReturnType>;
    /**
     * method distributeRoyaltyTokens for contract RoyaltyTokenDistributionWorkflows with only encode
     *
     * @param request RoyaltyTokenDistributionWorkflowsDistributeRoyaltyTokensRequest
     * @return EncodedTxData
     */
    distributeRoyaltyTokensEncode(request: RoyaltyTokenDistributionWorkflowsDistributeRoyaltyTokensRequest): EncodedTxData;
    /**
     * method mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens for contract RoyaltyTokenDistributionWorkflows
     *
     * @param request RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensRequest
     * @return Promise<WriteContractReturnType>
     */
    mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens(request: RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensRequest): Promise<WriteContractReturnType>;
    /**
     * method mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens for contract RoyaltyTokenDistributionWorkflows with only encode
     *
     * @param request RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensRequest
     * @return EncodedTxData
     */
    mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensEncode(request: RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokensRequest): EncodedTxData;
    /**
     * method mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens for contract RoyaltyTokenDistributionWorkflows
     *
     * @param request RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest
     * @return Promise<WriteContractReturnType>
     */
    mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens(request: RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest): Promise<WriteContractReturnType>;
    /**
     * method mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens for contract RoyaltyTokenDistributionWorkflows with only encode
     *
     * @param request RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest
     * @return EncodedTxData
     */
    mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensEncode(request: RoyaltyTokenDistributionWorkflowsMintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokensRequest): EncodedTxData;
    /**
     * method registerIpAndAttachPILTermsAndDeployRoyaltyVault for contract RoyaltyTokenDistributionWorkflows
     *
     * @param request RoyaltyTokenDistributionWorkflowsRegisterIpAndAttachPilTermsAndDeployRoyaltyVaultRequest
     * @return Promise<WriteContractReturnType>
     */
    registerIpAndAttachPilTermsAndDeployRoyaltyVault(request: RoyaltyTokenDistributionWorkflowsRegisterIpAndAttachPilTermsAndDeployRoyaltyVaultRequest): Promise<WriteContractReturnType>;
    /**
     * method registerIpAndAttachPILTermsAndDeployRoyaltyVault for contract RoyaltyTokenDistributionWorkflows with only encode
     *
     * @param request RoyaltyTokenDistributionWorkflowsRegisterIpAndAttachPilTermsAndDeployRoyaltyVaultRequest
     * @return EncodedTxData
     */
    registerIpAndAttachPilTermsAndDeployRoyaltyVaultEncode(request: RoyaltyTokenDistributionWorkflowsRegisterIpAndAttachPilTermsAndDeployRoyaltyVaultRequest): EncodedTxData;
    /**
     * method registerIpAndMakeDerivativeAndDeployRoyaltyVault for contract RoyaltyTokenDistributionWorkflows
     *
     * @param request RoyaltyTokenDistributionWorkflowsRegisterIpAndMakeDerivativeAndDeployRoyaltyVaultRequest
     * @return Promise<WriteContractReturnType>
     */
    registerIpAndMakeDerivativeAndDeployRoyaltyVault(request: RoyaltyTokenDistributionWorkflowsRegisterIpAndMakeDerivativeAndDeployRoyaltyVaultRequest): Promise<WriteContractReturnType>;
    /**
     * method registerIpAndMakeDerivativeAndDeployRoyaltyVault for contract RoyaltyTokenDistributionWorkflows with only encode
     *
     * @param request RoyaltyTokenDistributionWorkflowsRegisterIpAndMakeDerivativeAndDeployRoyaltyVaultRequest
     * @return EncodedTxData
     */
    registerIpAndMakeDerivativeAndDeployRoyaltyVaultEncode(request: RoyaltyTokenDistributionWorkflowsRegisterIpAndMakeDerivativeAndDeployRoyaltyVaultRequest): EncodedTxData;
}
/**
 * RoyaltyWorkflowsClaimAllRevenueRequest
 *
 * @param ancestorIpId address
 * @param claimer address
 * @param childIpIds address[]
 * @param royaltyPolicies address[]
 * @param currencyTokens address[]
 */
export type RoyaltyWorkflowsClaimAllRevenueRequest = {
    ancestorIpId: Address;
    claimer: Address;
    childIpIds: readonly Address[];
    royaltyPolicies: readonly Address[];
    currencyTokens: readonly Address[];
};
/**
 * contract RoyaltyWorkflows write method
 */
export declare class RoyaltyWorkflowsClient {
    protected readonly wallet: SimpleWalletClient;
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method claimAllRevenue for contract RoyaltyWorkflows
     *
     * @param request RoyaltyWorkflowsClaimAllRevenueRequest
     * @return Promise<WriteContractReturnType>
     */
    claimAllRevenue(request: RoyaltyWorkflowsClaimAllRevenueRequest): Promise<WriteContractReturnType>;
    /**
     * method claimAllRevenue for contract RoyaltyWorkflows with only encode
     *
     * @param request RoyaltyWorkflowsClaimAllRevenueRequest
     * @return EncodedTxData
     */
    claimAllRevenueEncode(request: RoyaltyWorkflowsClaimAllRevenueRequest): EncodedTxData;
}
/**
 * SpgnftBeaconOwnershipTransferredEvent
 *
 * @param previousOwner address
 * @param newOwner address
 */
export type SpgnftBeaconOwnershipTransferredEvent = {
    previousOwner: Address;
    newOwner: Address;
};
/**
 * SpgnftBeaconUpgradedEvent
 *
 * @param implementation address
 */
export type SpgnftBeaconUpgradedEvent = {
    implementation: Address;
};
export type SpgnftBeaconImplementationResponse = Address;
export type SpgnftBeaconOwnerResponse = Address;
/**
 * SpgnftBeaconTransferOwnershipRequest
 *
 * @param newOwner address
 */
export type SpgnftBeaconTransferOwnershipRequest = {
    newOwner: Address;
};
/**
 * SpgnftBeaconUpgradeToRequest
 *
 * @param newImplementation address
 */
export type SpgnftBeaconUpgradeToRequest = {
    newImplementation: Address;
};
/**
 * contract SPGNFTBeacon event
 */
export declare class SpgnftBeaconEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event OwnershipTransferred for contract SPGNFTBeacon
     */
    watchOwnershipTransferredEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftBeaconOwnershipTransferredEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event OwnershipTransferred for contract SPGNFTBeacon
     */
    parseTxOwnershipTransferredEvent(txReceipt: TransactionReceipt): Array<SpgnftBeaconOwnershipTransferredEvent>;
    /**
     * event Upgraded for contract SPGNFTBeacon
     */
    watchUpgradedEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftBeaconUpgradedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Upgraded for contract SPGNFTBeacon
     */
    parseTxUpgradedEvent(txReceipt: TransactionReceipt): Array<SpgnftBeaconUpgradedEvent>;
}
/**
 * contract SPGNFTBeacon readonly method
 */
export declare class SpgnftBeaconReadOnlyClient extends SpgnftBeaconEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method implementation for contract SPGNFTBeacon
     *
     * @param request SpgnftBeaconImplementationRequest
     * @return Promise<SpgnftBeaconImplementationResponse>
     */
    implementation(): Promise<SpgnftBeaconImplementationResponse>;
    /**
     * method owner for contract SPGNFTBeacon
     *
     * @param request SpgnftBeaconOwnerRequest
     * @return Promise<SpgnftBeaconOwnerResponse>
     */
    owner(): Promise<SpgnftBeaconOwnerResponse>;
}
/**
 * contract SPGNFTBeacon write method
 */
export declare class SpgnftBeaconClient extends SpgnftBeaconReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method renounceOwnership for contract SPGNFTBeacon
     *
     * @param request SpgnftBeaconRenounceOwnershipRequest
     * @return Promise<WriteContractReturnType>
     */
    renounceOwnership(): Promise<WriteContractReturnType>;
    /**
     * method renounceOwnership for contract SPGNFTBeacon with only encode
     *
     * @param request SpgnftBeaconRenounceOwnershipRequest
     * @return EncodedTxData
     */
    renounceOwnershipEncode(): EncodedTxData;
    /**
     * method transferOwnership for contract SPGNFTBeacon
     *
     * @param request SpgnftBeaconTransferOwnershipRequest
     * @return Promise<WriteContractReturnType>
     */
    transferOwnership(request: SpgnftBeaconTransferOwnershipRequest): Promise<WriteContractReturnType>;
    /**
     * method transferOwnership for contract SPGNFTBeacon with only encode
     *
     * @param request SpgnftBeaconTransferOwnershipRequest
     * @return EncodedTxData
     */
    transferOwnershipEncode(request: SpgnftBeaconTransferOwnershipRequest): EncodedTxData;
    /**
     * method upgradeTo for contract SPGNFTBeacon
     *
     * @param request SpgnftBeaconUpgradeToRequest
     * @return Promise<WriteContractReturnType>
     */
    upgradeTo(request: SpgnftBeaconUpgradeToRequest): Promise<WriteContractReturnType>;
    /**
     * method upgradeTo for contract SPGNFTBeacon with only encode
     *
     * @param request SpgnftBeaconUpgradeToRequest
     * @return EncodedTxData
     */
    upgradeToEncode(request: SpgnftBeaconUpgradeToRequest): EncodedTxData;
}
/**
 * SpgnftImplApprovalEvent
 *
 * @param owner address
 * @param approved address
 * @param tokenId uint256
 */
export type SpgnftImplApprovalEvent = {
    owner: Address;
    approved: Address;
    tokenId: bigint;
};
/**
 * SpgnftImplApprovalForAllEvent
 *
 * @param owner address
 * @param operator address
 * @param approved bool
 */
export type SpgnftImplApprovalForAllEvent = {
    owner: Address;
    operator: Address;
    approved: boolean;
};
/**
 * SpgnftImplBatchMetadataUpdateEvent
 *
 * @param _fromTokenId uint256
 * @param _toTokenId uint256
 */
export type SpgnftImplBatchMetadataUpdateEvent = {
    _fromTokenId: bigint;
    _toTokenId: bigint;
};
/**
 * SpgnftImplInitializedEvent
 *
 * @param version uint64
 */
export type SpgnftImplInitializedEvent = {
    version: bigint;
};
/**
 * SpgnftImplMetadataUpdateEvent
 *
 * @param _tokenId uint256
 */
export type SpgnftImplMetadataUpdateEvent = {
    _tokenId: bigint;
};
/**
 * SpgnftImplRoleAdminChangedEvent
 *
 * @param role bytes32
 * @param previousAdminRole bytes32
 * @param newAdminRole bytes32
 */
export type SpgnftImplRoleAdminChangedEvent = {
    role: Hex;
    previousAdminRole: Hex;
    newAdminRole: Hex;
};
/**
 * SpgnftImplRoleGrantedEvent
 *
 * @param role bytes32
 * @param account address
 * @param sender address
 */
export type SpgnftImplRoleGrantedEvent = {
    role: Hex;
    account: Address;
    sender: Address;
};
/**
 * SpgnftImplRoleRevokedEvent
 *
 * @param role bytes32
 * @param account address
 * @param sender address
 */
export type SpgnftImplRoleRevokedEvent = {
    role: Hex;
    account: Address;
    sender: Address;
};
/**
 * SpgnftImplTransferEvent
 *
 * @param from address
 * @param to address
 * @param tokenId uint256
 */
export type SpgnftImplTransferEvent = {
    from: Address;
    to: Address;
    tokenId: bigint;
};
export type SpgnftImplDefaultAdminRoleResponse = Hex;
export type SpgnftImplDerivativeWorkflowsAddressResponse = Address;
export type SpgnftImplGroupingWorkflowsAddressResponse = Address;
export type SpgnftImplLicenseAttachmentWorkflowsAddressResponse = Address;
export type SpgnftImplRegistrationWorkflowsAddressResponse = Address;
export type SpgnftImplRoyaltyTokenDistributionWorkflowsAddressResponse = Address;
/**
 * SpgnftImplBalanceOfRequest
 *
 * @param owner address
 */
export type SpgnftImplBalanceOfRequest = {
    owner: Address;
};
export type SpgnftImplBalanceOfResponse = bigint;
export type SpgnftImplBaseUriResponse = string;
export type SpgnftImplContractUriResponse = string;
/**
 * SpgnftImplGetApprovedRequest
 *
 * @param tokenId uint256
 */
export type SpgnftImplGetApprovedRequest = {
    tokenId: bigint;
};
export type SpgnftImplGetApprovedResponse = Address;
/**
 * SpgnftImplGetRoleAdminRequest
 *
 * @param role bytes32
 */
export type SpgnftImplGetRoleAdminRequest = {
    role: Hex;
};
export type SpgnftImplGetRoleAdminResponse = Hex;
/**
 * SpgnftImplGetTokenIdByMetadataHashRequest
 *
 * @param nftMetadataHash bytes32
 */
export type SpgnftImplGetTokenIdByMetadataHashRequest = {
    nftMetadataHash: Hex;
};
export type SpgnftImplGetTokenIdByMetadataHashResponse = bigint;
/**
 * SpgnftImplHasRoleRequest
 *
 * @param role bytes32
 * @param account address
 */
export type SpgnftImplHasRoleRequest = {
    role: Hex;
    account: Address;
};
export type SpgnftImplHasRoleResponse = boolean;
/**
 * SpgnftImplIsApprovedForAllRequest
 *
 * @param owner address
 * @param operator address
 */
export type SpgnftImplIsApprovedForAllRequest = {
    owner: Address;
    operator: Address;
};
export type SpgnftImplIsApprovedForAllResponse = boolean;
export type SpgnftImplMintFeeResponse = bigint;
export type SpgnftImplMintFeeRecipientResponse = Address;
export type SpgnftImplMintFeeTokenResponse = Address;
export type SpgnftImplMintOpenResponse = boolean;
export type SpgnftImplNameResponse = string;
/**
 * SpgnftImplOwnerOfRequest
 *
 * @param tokenId uint256
 */
export type SpgnftImplOwnerOfRequest = {
    tokenId: bigint;
};
export type SpgnftImplOwnerOfResponse = Address;
export type SpgnftImplPublicMintingResponse = boolean;
/**
 * SpgnftImplSupportsInterfaceRequest
 *
 * @param interfaceId bytes4
 */
export type SpgnftImplSupportsInterfaceRequest = {
    interfaceId: Hex;
};
export type SpgnftImplSupportsInterfaceResponse = boolean;
export type SpgnftImplSymbolResponse = string;
/**
 * SpgnftImplTokenUriRequest
 *
 * @param tokenId uint256
 */
export type SpgnftImplTokenUriRequest = {
    tokenId: bigint;
};
export type SpgnftImplTokenUriResponse = string;
export type SpgnftImplTotalSupplyResponse = bigint;
/**
 * SpgnftImplApproveRequest
 *
 * @param to address
 * @param tokenId uint256
 */
export type SpgnftImplApproveRequest = {
    to: Address;
    tokenId: bigint;
};
/**
 * SpgnftImplGrantRoleRequest
 *
 * @param role bytes32
 * @param account address
 */
export type SpgnftImplGrantRoleRequest = {
    role: Hex;
    account: Address;
};
/**
 * SpgnftImplInitializeRequest
 *
 * @param initParams tuple
 */
export type SpgnftImplInitializeRequest = {
    initParams: {
        name: string;
        symbol: string;
        baseURI: string;
        contractURI: string;
        maxSupply: number;
        mintFee: bigint;
        mintFeeToken: Address;
        mintFeeRecipient: Address;
        owner: Address;
        mintOpen: boolean;
        isPublicMinting: boolean;
    };
};
/**
 * SpgnftImplMintRequest
 *
 * @param to address
 * @param nftMetadataURI string
 * @param nftMetadataHash bytes32
 * @param allowDuplicates bool
 */
export type SpgnftImplMintRequest = {
    to: Address;
    nftMetadataURI: string;
    nftMetadataHash: Hex;
    allowDuplicates: boolean;
};
/**
 * SpgnftImplMintByPeripheryRequest
 *
 * @param to address
 * @param payer address
 * @param nftMetadataURI string
 * @param nftMetadataHash bytes32
 * @param allowDuplicates bool
 */
export type SpgnftImplMintByPeripheryRequest = {
    to: Address;
    payer: Address;
    nftMetadataURI: string;
    nftMetadataHash: Hex;
    allowDuplicates: boolean;
};
/**
 * SpgnftImplRenounceRoleRequest
 *
 * @param role bytes32
 * @param callerConfirmation address
 */
export type SpgnftImplRenounceRoleRequest = {
    role: Hex;
    callerConfirmation: Address;
};
/**
 * SpgnftImplRevokeRoleRequest
 *
 * @param role bytes32
 * @param account address
 */
export type SpgnftImplRevokeRoleRequest = {
    role: Hex;
    account: Address;
};
/**
 * SpgnftImplSafeTransferFromRequest
 *
 * @param from address
 * @param to address
 * @param tokenId uint256
 */
export type SpgnftImplSafeTransferFromRequest = {
    from: Address;
    to: Address;
    tokenId: bigint;
};
/**
 * SpgnftImplSafeTransferFrom2Request
 *
 * @param from address
 * @param to address
 * @param tokenId uint256
 * @param data bytes
 */
export type SpgnftImplSafeTransferFrom2Request = {
    from: Address;
    to: Address;
    tokenId: bigint;
    data: Hex;
};
/**
 * SpgnftImplSetApprovalForAllRequest
 *
 * @param operator address
 * @param approved bool
 */
export type SpgnftImplSetApprovalForAllRequest = {
    operator: Address;
    approved: boolean;
};
/**
 * SpgnftImplSetBaseUriRequest
 *
 * @param baseURI string
 */
export type SpgnftImplSetBaseUriRequest = {
    baseURI: string;
};
/**
 * SpgnftImplSetContractUriRequest
 *
 * @param contractURI string
 */
export type SpgnftImplSetContractUriRequest = {
    contractURI: string;
};
/**
 * SpgnftImplSetMintFeeRequest
 *
 * @param fee uint256
 */
export type SpgnftImplSetMintFeeRequest = {
    fee: bigint;
};
/**
 * SpgnftImplSetMintFeeRecipientRequest
 *
 * @param newFeeRecipient address
 */
export type SpgnftImplSetMintFeeRecipientRequest = {
    newFeeRecipient: Address;
};
/**
 * SpgnftImplSetMintFeeTokenRequest
 *
 * @param token address
 */
export type SpgnftImplSetMintFeeTokenRequest = {
    token: Address;
};
/**
 * SpgnftImplSetMintOpenRequest
 *
 * @param mintOpen bool
 */
export type SpgnftImplSetMintOpenRequest = {
    mintOpen: boolean;
};
/**
 * SpgnftImplSetPublicMintingRequest
 *
 * @param isPublicMinting bool
 */
export type SpgnftImplSetPublicMintingRequest = {
    isPublicMinting: boolean;
};
/**
 * SpgnftImplTransferFromRequest
 *
 * @param from address
 * @param to address
 * @param tokenId uint256
 */
export type SpgnftImplTransferFromRequest = {
    from: Address;
    to: Address;
    tokenId: bigint;
};
/**
 * SpgnftImplWithdrawTokenRequest
 *
 * @param token address
 */
export type SpgnftImplWithdrawTokenRequest = {
    token: Address;
};
/**
 * contract SPGNFTImpl event
 */
export declare class SpgnftImplEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event Approval for contract SPGNFTImpl
     */
    watchApprovalEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftImplApprovalEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Approval for contract SPGNFTImpl
     */
    parseTxApprovalEvent(txReceipt: TransactionReceipt): Array<SpgnftImplApprovalEvent>;
    /**
     * event ApprovalForAll for contract SPGNFTImpl
     */
    watchApprovalForAllEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftImplApprovalForAllEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event ApprovalForAll for contract SPGNFTImpl
     */
    parseTxApprovalForAllEvent(txReceipt: TransactionReceipt): Array<SpgnftImplApprovalForAllEvent>;
    /**
     * event BatchMetadataUpdate for contract SPGNFTImpl
     */
    watchBatchMetadataUpdateEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftImplBatchMetadataUpdateEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event BatchMetadataUpdate for contract SPGNFTImpl
     */
    parseTxBatchMetadataUpdateEvent(txReceipt: TransactionReceipt): Array<SpgnftImplBatchMetadataUpdateEvent>;
    /**
     * event Initialized for contract SPGNFTImpl
     */
    watchInitializedEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftImplInitializedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Initialized for contract SPGNFTImpl
     */
    parseTxInitializedEvent(txReceipt: TransactionReceipt): Array<SpgnftImplInitializedEvent>;
    /**
     * event MetadataUpdate for contract SPGNFTImpl
     */
    watchMetadataUpdateEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftImplMetadataUpdateEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event MetadataUpdate for contract SPGNFTImpl
     */
    parseTxMetadataUpdateEvent(txReceipt: TransactionReceipt): Array<SpgnftImplMetadataUpdateEvent>;
    /**
     * event RoleAdminChanged for contract SPGNFTImpl
     */
    watchRoleAdminChangedEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftImplRoleAdminChangedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event RoleAdminChanged for contract SPGNFTImpl
     */
    parseTxRoleAdminChangedEvent(txReceipt: TransactionReceipt): Array<SpgnftImplRoleAdminChangedEvent>;
    /**
     * event RoleGranted for contract SPGNFTImpl
     */
    watchRoleGrantedEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftImplRoleGrantedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event RoleGranted for contract SPGNFTImpl
     */
    parseTxRoleGrantedEvent(txReceipt: TransactionReceipt): Array<SpgnftImplRoleGrantedEvent>;
    /**
     * event RoleRevoked for contract SPGNFTImpl
     */
    watchRoleRevokedEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftImplRoleRevokedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event RoleRevoked for contract SPGNFTImpl
     */
    parseTxRoleRevokedEvent(txReceipt: TransactionReceipt): Array<SpgnftImplRoleRevokedEvent>;
    /**
     * event Transfer for contract SPGNFTImpl
     */
    watchTransferEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftImplTransferEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Transfer for contract SPGNFTImpl
     */
    parseTxTransferEvent(txReceipt: TransactionReceipt): Array<SpgnftImplTransferEvent>;
}
/**
 * contract SPGNFTImpl readonly method
 */
export declare class SpgnftImplReadOnlyClient extends SpgnftImplEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method DEFAULT_ADMIN_ROLE for contract SPGNFTImpl
     *
     * @param request SpgnftImplDefaultAdminRoleRequest
     * @return Promise<SpgnftImplDefaultAdminRoleResponse>
     */
    defaultAdminRole(): Promise<SpgnftImplDefaultAdminRoleResponse>;
    /**
     * method DERIVATIVE_WORKFLOWS_ADDRESS for contract SPGNFTImpl
     *
     * @param request SpgnftImplDerivativeWorkflowsAddressRequest
     * @return Promise<SpgnftImplDerivativeWorkflowsAddressResponse>
     */
    derivativeWorkflowsAddress(): Promise<SpgnftImplDerivativeWorkflowsAddressResponse>;
    /**
     * method GROUPING_WORKFLOWS_ADDRESS for contract SPGNFTImpl
     *
     * @param request SpgnftImplGroupingWorkflowsAddressRequest
     * @return Promise<SpgnftImplGroupingWorkflowsAddressResponse>
     */
    groupingWorkflowsAddress(): Promise<SpgnftImplGroupingWorkflowsAddressResponse>;
    /**
     * method LICENSE_ATTACHMENT_WORKFLOWS_ADDRESS for contract SPGNFTImpl
     *
     * @param request SpgnftImplLicenseAttachmentWorkflowsAddressRequest
     * @return Promise<SpgnftImplLicenseAttachmentWorkflowsAddressResponse>
     */
    licenseAttachmentWorkflowsAddress(): Promise<SpgnftImplLicenseAttachmentWorkflowsAddressResponse>;
    /**
     * method REGISTRATION_WORKFLOWS_ADDRESS for contract SPGNFTImpl
     *
     * @param request SpgnftImplRegistrationWorkflowsAddressRequest
     * @return Promise<SpgnftImplRegistrationWorkflowsAddressResponse>
     */
    registrationWorkflowsAddress(): Promise<SpgnftImplRegistrationWorkflowsAddressResponse>;
    /**
     * method ROYALTY_TOKEN_DISTRIBUTION_WORKFLOWS_ADDRESS for contract SPGNFTImpl
     *
     * @param request SpgnftImplRoyaltyTokenDistributionWorkflowsAddressRequest
     * @return Promise<SpgnftImplRoyaltyTokenDistributionWorkflowsAddressResponse>
     */
    royaltyTokenDistributionWorkflowsAddress(): Promise<SpgnftImplRoyaltyTokenDistributionWorkflowsAddressResponse>;
    /**
     * method balanceOf for contract SPGNFTImpl
     *
     * @param request SpgnftImplBalanceOfRequest
     * @return Promise<SpgnftImplBalanceOfResponse>
     */
    balanceOf(request: SpgnftImplBalanceOfRequest): Promise<SpgnftImplBalanceOfResponse>;
    /**
     * method baseURI for contract SPGNFTImpl
     *
     * @param request SpgnftImplBaseUriRequest
     * @return Promise<SpgnftImplBaseUriResponse>
     */
    baseUri(): Promise<SpgnftImplBaseUriResponse>;
    /**
     * method contractURI for contract SPGNFTImpl
     *
     * @param request SpgnftImplContractUriRequest
     * @return Promise<SpgnftImplContractUriResponse>
     */
    contractUri(): Promise<SpgnftImplContractUriResponse>;
    /**
     * method getApproved for contract SPGNFTImpl
     *
     * @param request SpgnftImplGetApprovedRequest
     * @return Promise<SpgnftImplGetApprovedResponse>
     */
    getApproved(request: SpgnftImplGetApprovedRequest): Promise<SpgnftImplGetApprovedResponse>;
    /**
     * method getRoleAdmin for contract SPGNFTImpl
     *
     * @param request SpgnftImplGetRoleAdminRequest
     * @return Promise<SpgnftImplGetRoleAdminResponse>
     */
    getRoleAdmin(request: SpgnftImplGetRoleAdminRequest): Promise<SpgnftImplGetRoleAdminResponse>;
    /**
     * method getTokenIdByMetadataHash for contract SPGNFTImpl
     *
     * @param request SpgnftImplGetTokenIdByMetadataHashRequest
     * @return Promise<SpgnftImplGetTokenIdByMetadataHashResponse>
     */
    getTokenIdByMetadataHash(request: SpgnftImplGetTokenIdByMetadataHashRequest): Promise<SpgnftImplGetTokenIdByMetadataHashResponse>;
    /**
     * method hasRole for contract SPGNFTImpl
     *
     * @param request SpgnftImplHasRoleRequest
     * @return Promise<SpgnftImplHasRoleResponse>
     */
    hasRole(request: SpgnftImplHasRoleRequest): Promise<SpgnftImplHasRoleResponse>;
    /**
     * method isApprovedForAll for contract SPGNFTImpl
     *
     * @param request SpgnftImplIsApprovedForAllRequest
     * @return Promise<SpgnftImplIsApprovedForAllResponse>
     */
    isApprovedForAll(request: SpgnftImplIsApprovedForAllRequest): Promise<SpgnftImplIsApprovedForAllResponse>;
    /**
     * method mintFee for contract SPGNFTImpl
     *
     * @param request SpgnftImplMintFeeRequest
     * @return Promise<SpgnftImplMintFeeResponse>
     */
    mintFee(): Promise<SpgnftImplMintFeeResponse>;
    /**
     * method mintFeeRecipient for contract SPGNFTImpl
     *
     * @param request SpgnftImplMintFeeRecipientRequest
     * @return Promise<SpgnftImplMintFeeRecipientResponse>
     */
    mintFeeRecipient(): Promise<SpgnftImplMintFeeRecipientResponse>;
    /**
     * method mintFeeToken for contract SPGNFTImpl
     *
     * @param request SpgnftImplMintFeeTokenRequest
     * @return Promise<SpgnftImplMintFeeTokenResponse>
     */
    mintFeeToken(): Promise<SpgnftImplMintFeeTokenResponse>;
    /**
     * method mintOpen for contract SPGNFTImpl
     *
     * @param request SpgnftImplMintOpenRequest
     * @return Promise<SpgnftImplMintOpenResponse>
     */
    mintOpen(): Promise<SpgnftImplMintOpenResponse>;
    /**
     * method name for contract SPGNFTImpl
     *
     * @param request SpgnftImplNameRequest
     * @return Promise<SpgnftImplNameResponse>
     */
    name(): Promise<SpgnftImplNameResponse>;
    /**
     * method ownerOf for contract SPGNFTImpl
     *
     * @param request SpgnftImplOwnerOfRequest
     * @return Promise<SpgnftImplOwnerOfResponse>
     */
    ownerOf(request: SpgnftImplOwnerOfRequest): Promise<SpgnftImplOwnerOfResponse>;
    /**
     * method publicMinting for contract SPGNFTImpl
     *
     * @param request SpgnftImplPublicMintingRequest
     * @return Promise<SpgnftImplPublicMintingResponse>
     */
    publicMinting(): Promise<SpgnftImplPublicMintingResponse>;
    /**
     * method supportsInterface for contract SPGNFTImpl
     *
     * @param request SpgnftImplSupportsInterfaceRequest
     * @return Promise<SpgnftImplSupportsInterfaceResponse>
     */
    supportsInterface(request: SpgnftImplSupportsInterfaceRequest): Promise<SpgnftImplSupportsInterfaceResponse>;
    /**
     * method symbol for contract SPGNFTImpl
     *
     * @param request SpgnftImplSymbolRequest
     * @return Promise<SpgnftImplSymbolResponse>
     */
    symbol(): Promise<SpgnftImplSymbolResponse>;
    /**
     * method tokenURI for contract SPGNFTImpl
     *
     * @param request SpgnftImplTokenUriRequest
     * @return Promise<SpgnftImplTokenUriResponse>
     */
    tokenUri(request: SpgnftImplTokenUriRequest): Promise<SpgnftImplTokenUriResponse>;
    /**
     * method totalSupply for contract SPGNFTImpl
     *
     * @param request SpgnftImplTotalSupplyRequest
     * @return Promise<SpgnftImplTotalSupplyResponse>
     */
    totalSupply(): Promise<SpgnftImplTotalSupplyResponse>;
}
/**
 * contract SPGNFTImpl write method
 */
export declare class SpgnftImplClient extends SpgnftImplReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method approve for contract SPGNFTImpl
     *
     * @param request SpgnftImplApproveRequest
     * @return Promise<WriteContractReturnType>
     */
    approve(request: SpgnftImplApproveRequest): Promise<WriteContractReturnType>;
    /**
     * method approve for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplApproveRequest
     * @return EncodedTxData
     */
    approveEncode(request: SpgnftImplApproveRequest): EncodedTxData;
    /**
     * method grantRole for contract SPGNFTImpl
     *
     * @param request SpgnftImplGrantRoleRequest
     * @return Promise<WriteContractReturnType>
     */
    grantRole(request: SpgnftImplGrantRoleRequest): Promise<WriteContractReturnType>;
    /**
     * method grantRole for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplGrantRoleRequest
     * @return EncodedTxData
     */
    grantRoleEncode(request: SpgnftImplGrantRoleRequest): EncodedTxData;
    /**
     * method initialize for contract SPGNFTImpl
     *
     * @param request SpgnftImplInitializeRequest
     * @return Promise<WriteContractReturnType>
     */
    initialize(request: SpgnftImplInitializeRequest): Promise<WriteContractReturnType>;
    /**
     * method initialize for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplInitializeRequest
     * @return EncodedTxData
     */
    initializeEncode(request: SpgnftImplInitializeRequest): EncodedTxData;
    /**
     * method mint for contract SPGNFTImpl
     *
     * @param request SpgnftImplMintRequest
     * @return Promise<WriteContractReturnType>
     */
    mint(request: SpgnftImplMintRequest): Promise<WriteContractReturnType>;
    /**
     * method mint for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplMintRequest
     * @return EncodedTxData
     */
    mintEncode(request: SpgnftImplMintRequest): EncodedTxData;
    /**
     * method mintByPeriphery for contract SPGNFTImpl
     *
     * @param request SpgnftImplMintByPeripheryRequest
     * @return Promise<WriteContractReturnType>
     */
    mintByPeriphery(request: SpgnftImplMintByPeripheryRequest): Promise<WriteContractReturnType>;
    /**
     * method mintByPeriphery for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplMintByPeripheryRequest
     * @return EncodedTxData
     */
    mintByPeripheryEncode(request: SpgnftImplMintByPeripheryRequest): EncodedTxData;
    /**
     * method renounceRole for contract SPGNFTImpl
     *
     * @param request SpgnftImplRenounceRoleRequest
     * @return Promise<WriteContractReturnType>
     */
    renounceRole(request: SpgnftImplRenounceRoleRequest): Promise<WriteContractReturnType>;
    /**
     * method renounceRole for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplRenounceRoleRequest
     * @return EncodedTxData
     */
    renounceRoleEncode(request: SpgnftImplRenounceRoleRequest): EncodedTxData;
    /**
     * method revokeRole for contract SPGNFTImpl
     *
     * @param request SpgnftImplRevokeRoleRequest
     * @return Promise<WriteContractReturnType>
     */
    revokeRole(request: SpgnftImplRevokeRoleRequest): Promise<WriteContractReturnType>;
    /**
     * method revokeRole for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplRevokeRoleRequest
     * @return EncodedTxData
     */
    revokeRoleEncode(request: SpgnftImplRevokeRoleRequest): EncodedTxData;
    /**
     * method safeTransferFrom for contract SPGNFTImpl
     *
     * @param request SpgnftImplSafeTransferFromRequest
     * @return Promise<WriteContractReturnType>
     */
    safeTransferFrom(request: SpgnftImplSafeTransferFromRequest): Promise<WriteContractReturnType>;
    /**
     * method safeTransferFrom for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplSafeTransferFromRequest
     * @return EncodedTxData
     */
    safeTransferFromEncode(request: SpgnftImplSafeTransferFromRequest): EncodedTxData;
    /**
     * method safeTransferFrom for contract SPGNFTImpl
     *
     * @param request SpgnftImplSafeTransferFrom2Request
     * @return Promise<WriteContractReturnType>
     */
    safeTransferFrom2(request: SpgnftImplSafeTransferFrom2Request): Promise<WriteContractReturnType>;
    /**
     * method safeTransferFrom for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplSafeTransferFrom2Request
     * @return EncodedTxData
     */
    safeTransferFrom2Encode(request: SpgnftImplSafeTransferFrom2Request): EncodedTxData;
    /**
     * method setApprovalForAll for contract SPGNFTImpl
     *
     * @param request SpgnftImplSetApprovalForAllRequest
     * @return Promise<WriteContractReturnType>
     */
    setApprovalForAll(request: SpgnftImplSetApprovalForAllRequest): Promise<WriteContractReturnType>;
    /**
     * method setApprovalForAll for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplSetApprovalForAllRequest
     * @return EncodedTxData
     */
    setApprovalForAllEncode(request: SpgnftImplSetApprovalForAllRequest): EncodedTxData;
    /**
     * method setBaseURI for contract SPGNFTImpl
     *
     * @param request SpgnftImplSetBaseUriRequest
     * @return Promise<WriteContractReturnType>
     */
    setBaseUri(request: SpgnftImplSetBaseUriRequest): Promise<WriteContractReturnType>;
    /**
     * method setBaseURI for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplSetBaseUriRequest
     * @return EncodedTxData
     */
    setBaseUriEncode(request: SpgnftImplSetBaseUriRequest): EncodedTxData;
    /**
     * method setContractURI for contract SPGNFTImpl
     *
     * @param request SpgnftImplSetContractUriRequest
     * @return Promise<WriteContractReturnType>
     */
    setContractUri(request: SpgnftImplSetContractUriRequest): Promise<WriteContractReturnType>;
    /**
     * method setContractURI for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplSetContractUriRequest
     * @return EncodedTxData
     */
    setContractUriEncode(request: SpgnftImplSetContractUriRequest): EncodedTxData;
    /**
     * method setMintFee for contract SPGNFTImpl
     *
     * @param request SpgnftImplSetMintFeeRequest
     * @return Promise<WriteContractReturnType>
     */
    setMintFee(request: SpgnftImplSetMintFeeRequest): Promise<WriteContractReturnType>;
    /**
     * method setMintFee for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplSetMintFeeRequest
     * @return EncodedTxData
     */
    setMintFeeEncode(request: SpgnftImplSetMintFeeRequest): EncodedTxData;
    /**
     * method setMintFeeRecipient for contract SPGNFTImpl
     *
     * @param request SpgnftImplSetMintFeeRecipientRequest
     * @return Promise<WriteContractReturnType>
     */
    setMintFeeRecipient(request: SpgnftImplSetMintFeeRecipientRequest): Promise<WriteContractReturnType>;
    /**
     * method setMintFeeRecipient for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplSetMintFeeRecipientRequest
     * @return EncodedTxData
     */
    setMintFeeRecipientEncode(request: SpgnftImplSetMintFeeRecipientRequest): EncodedTxData;
    /**
     * method setMintFeeToken for contract SPGNFTImpl
     *
     * @param request SpgnftImplSetMintFeeTokenRequest
     * @return Promise<WriteContractReturnType>
     */
    setMintFeeToken(request: SpgnftImplSetMintFeeTokenRequest): Promise<WriteContractReturnType>;
    /**
     * method setMintFeeToken for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplSetMintFeeTokenRequest
     * @return EncodedTxData
     */
    setMintFeeTokenEncode(request: SpgnftImplSetMintFeeTokenRequest): EncodedTxData;
    /**
     * method setMintOpen for contract SPGNFTImpl
     *
     * @param request SpgnftImplSetMintOpenRequest
     * @return Promise<WriteContractReturnType>
     */
    setMintOpen(request: SpgnftImplSetMintOpenRequest): Promise<WriteContractReturnType>;
    /**
     * method setMintOpen for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplSetMintOpenRequest
     * @return EncodedTxData
     */
    setMintOpenEncode(request: SpgnftImplSetMintOpenRequest): EncodedTxData;
    /**
     * method setPublicMinting for contract SPGNFTImpl
     *
     * @param request SpgnftImplSetPublicMintingRequest
     * @return Promise<WriteContractReturnType>
     */
    setPublicMinting(request: SpgnftImplSetPublicMintingRequest): Promise<WriteContractReturnType>;
    /**
     * method setPublicMinting for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplSetPublicMintingRequest
     * @return EncodedTxData
     */
    setPublicMintingEncode(request: SpgnftImplSetPublicMintingRequest): EncodedTxData;
    /**
     * method transferFrom for contract SPGNFTImpl
     *
     * @param request SpgnftImplTransferFromRequest
     * @return Promise<WriteContractReturnType>
     */
    transferFrom(request: SpgnftImplTransferFromRequest): Promise<WriteContractReturnType>;
    /**
     * method transferFrom for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplTransferFromRequest
     * @return EncodedTxData
     */
    transferFromEncode(request: SpgnftImplTransferFromRequest): EncodedTxData;
    /**
     * method withdrawToken for contract SPGNFTImpl
     *
     * @param request SpgnftImplWithdrawTokenRequest
     * @return Promise<WriteContractReturnType>
     */
    withdrawToken(request: SpgnftImplWithdrawTokenRequest): Promise<WriteContractReturnType>;
    /**
     * method withdrawToken for contract SPGNFTImpl with only encode
     *
     * @param request SpgnftImplWithdrawTokenRequest
     * @return EncodedTxData
     */
    withdrawTokenEncode(request: SpgnftImplWithdrawTokenRequest): EncodedTxData;
}
/**
 * WrappedIpApprovalEvent
 *
 * @param owner address
 * @param spender address
 * @param amount uint256
 */
export type WrappedIpApprovalEvent = {
    owner: Address;
    spender: Address;
    amount: bigint;
};
/**
 * WrappedIpDepositEvent
 *
 * @param from address
 * @param amount uint256
 */
export type WrappedIpDepositEvent = {
    from: Address;
    amount: bigint;
};
/**
 * WrappedIpTransferEvent
 *
 * @param from address
 * @param to address
 * @param amount uint256
 */
export type WrappedIpTransferEvent = {
    from: Address;
    to: Address;
    amount: bigint;
};
/**
 * WrappedIpWithdrawalEvent
 *
 * @param to address
 * @param amount uint256
 */
export type WrappedIpWithdrawalEvent = {
    to: Address;
    amount: bigint;
};
/**
 * WrappedIpDomainSeparatorResponse
 *
 * @param result bytes32
 */
export type WrappedIpDomainSeparatorResponse = {
    result: Hex;
};
/**
 * WrappedIpAllowanceRequest
 *
 * @param owner address
 * @param spender address
 */
export type WrappedIpAllowanceRequest = {
    owner: Address;
    spender: Address;
};
/**
 * WrappedIpAllowanceResponse
 *
 * @param result uint256
 */
export type WrappedIpAllowanceResponse = {
    result: bigint;
};
/**
 * WrappedIpBalanceOfRequest
 *
 * @param owner address
 */
export type WrappedIpBalanceOfRequest = {
    owner: Address;
};
/**
 * WrappedIpBalanceOfResponse
 *
 * @param result uint256
 */
export type WrappedIpBalanceOfResponse = {
    result: bigint;
};
export type WrappedIpDecimalsResponse = number;
export type WrappedIpNameResponse = string;
/**
 * WrappedIpNoncesRequest
 *
 * @param owner address
 */
export type WrappedIpNoncesRequest = {
    owner: Address;
};
/**
 * WrappedIpNoncesResponse
 *
 * @param result uint256
 */
export type WrappedIpNoncesResponse = {
    result: bigint;
};
export type WrappedIpSymbolResponse = string;
/**
 * WrappedIpTotalSupplyResponse
 *
 * @param result uint256
 */
export type WrappedIpTotalSupplyResponse = {
    result: bigint;
};
/**
 * WrappedIpApproveRequest
 *
 * @param spender address
 * @param amount uint256
 */
export type WrappedIpApproveRequest = {
    spender: Address;
    amount: bigint;
};
/**
 * WrappedIpPermitRequest
 *
 * @param owner address
 * @param spender address
 * @param value uint256
 * @param deadline uint256
 * @param v uint8
 * @param r bytes32
 * @param s bytes32
 */
export type WrappedIpPermitRequest = {
    owner: Address;
    spender: Address;
    value: bigint;
    deadline: bigint;
    v: number;
    r: Hex;
    s: Hex;
};
/**
 * WrappedIpTransferRequest
 *
 * @param to address
 * @param amount uint256
 */
export type WrappedIpTransferRequest = {
    to: Address;
    amount: bigint;
};
/**
 * WrappedIpTransferFromRequest
 *
 * @param from address
 * @param to address
 * @param amount uint256
 */
export type WrappedIpTransferFromRequest = {
    from: Address;
    to: Address;
    amount: bigint;
};
/**
 * WrappedIpWithdrawRequest
 *
 * @param value uint256
 */
export type WrappedIpWithdrawRequest = {
    value: bigint;
};
/**
 * contract WrappedIP event
 */
export declare class WrappedIpEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event Approval for contract WrappedIP
     */
    watchApprovalEvent(onLogs: (txHash: Hex, ev: Partial<WrappedIpApprovalEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Approval for contract WrappedIP
     */
    parseTxApprovalEvent(txReceipt: TransactionReceipt): Array<WrappedIpApprovalEvent>;
    /**
     * event Deposit for contract WrappedIP
     */
    watchDepositEvent(onLogs: (txHash: Hex, ev: Partial<WrappedIpDepositEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Deposit for contract WrappedIP
     */
    parseTxDepositEvent(txReceipt: TransactionReceipt): Array<WrappedIpDepositEvent>;
    /**
     * event Transfer for contract WrappedIP
     */
    watchTransferEvent(onLogs: (txHash: Hex, ev: Partial<WrappedIpTransferEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Transfer for contract WrappedIP
     */
    parseTxTransferEvent(txReceipt: TransactionReceipt): Array<WrappedIpTransferEvent>;
    /**
     * event Withdrawal for contract WrappedIP
     */
    watchWithdrawalEvent(onLogs: (txHash: Hex, ev: Partial<WrappedIpWithdrawalEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Withdrawal for contract WrappedIP
     */
    parseTxWithdrawalEvent(txReceipt: TransactionReceipt): Array<WrappedIpWithdrawalEvent>;
}
/**
 * contract WrappedIP readonly method
 */
export declare class WrappedIpReadOnlyClient extends WrappedIpEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method DOMAIN_SEPARATOR for contract WrappedIP
     *
     * @param request WrappedIpDomainSeparatorRequest
     * @return Promise<WrappedIpDomainSeparatorResponse>
     */
    domainSeparator(): Promise<WrappedIpDomainSeparatorResponse>;
    /**
     * method allowance for contract WrappedIP
     *
     * @param request WrappedIpAllowanceRequest
     * @return Promise<WrappedIpAllowanceResponse>
     */
    allowance(request: WrappedIpAllowanceRequest): Promise<WrappedIpAllowanceResponse>;
    /**
     * method balanceOf for contract WrappedIP
     *
     * @param request WrappedIpBalanceOfRequest
     * @return Promise<WrappedIpBalanceOfResponse>
     */
    balanceOf(request: WrappedIpBalanceOfRequest): Promise<WrappedIpBalanceOfResponse>;
    /**
     * method decimals for contract WrappedIP
     *
     * @param request WrappedIpDecimalsRequest
     * @return Promise<WrappedIpDecimalsResponse>
     */
    decimals(): Promise<WrappedIpDecimalsResponse>;
    /**
     * method name for contract WrappedIP
     *
     * @param request WrappedIpNameRequest
     * @return Promise<WrappedIpNameResponse>
     */
    name(): Promise<WrappedIpNameResponse>;
    /**
     * method nonces for contract WrappedIP
     *
     * @param request WrappedIpNoncesRequest
     * @return Promise<WrappedIpNoncesResponse>
     */
    nonces(request: WrappedIpNoncesRequest): Promise<WrappedIpNoncesResponse>;
    /**
     * method symbol for contract WrappedIP
     *
     * @param request WrappedIpSymbolRequest
     * @return Promise<WrappedIpSymbolResponse>
     */
    symbol(): Promise<WrappedIpSymbolResponse>;
    /**
     * method totalSupply for contract WrappedIP
     *
     * @param request WrappedIpTotalSupplyRequest
     * @return Promise<WrappedIpTotalSupplyResponse>
     */
    totalSupply(): Promise<WrappedIpTotalSupplyResponse>;
}
/**
 * contract WrappedIP write method
 */
export declare class WrappedIpClient extends WrappedIpReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method approve for contract WrappedIP
     *
     * @param request WrappedIpApproveRequest
     * @return Promise<WriteContractReturnType>
     */
    approve(request: WrappedIpApproveRequest): Promise<WriteContractReturnType>;
    /**
     * method approve for contract WrappedIP with only encode
     *
     * @param request WrappedIpApproveRequest
     * @return EncodedTxData
     */
    approveEncode(request: WrappedIpApproveRequest): EncodedTxData;
    /**
     * method deposit for contract WrappedIP
     *
     * @param request WrappedIpDepositRequest
     * @return Promise<WriteContractReturnType>
     */
    deposit(): Promise<WriteContractReturnType>;
    /**
     * method deposit for contract WrappedIP with only encode
     *
     * @param request WrappedIpDepositRequest
     * @return EncodedTxData
     */
    depositEncode(): EncodedTxData;
    /**
     * method permit for contract WrappedIP
     *
     * @param request WrappedIpPermitRequest
     * @return Promise<WriteContractReturnType>
     */
    permit(request: WrappedIpPermitRequest): Promise<WriteContractReturnType>;
    /**
     * method permit for contract WrappedIP with only encode
     *
     * @param request WrappedIpPermitRequest
     * @return EncodedTxData
     */
    permitEncode(request: WrappedIpPermitRequest): EncodedTxData;
    /**
     * method transfer for contract WrappedIP
     *
     * @param request WrappedIpTransferRequest
     * @return Promise<WriteContractReturnType>
     */
    transfer(request: WrappedIpTransferRequest): Promise<WriteContractReturnType>;
    /**
     * method transfer for contract WrappedIP with only encode
     *
     * @param request WrappedIpTransferRequest
     * @return EncodedTxData
     */
    transferEncode(request: WrappedIpTransferRequest): EncodedTxData;
    /**
     * method transferFrom for contract WrappedIP
     *
     * @param request WrappedIpTransferFromRequest
     * @return Promise<WriteContractReturnType>
     */
    transferFrom(request: WrappedIpTransferFromRequest): Promise<WriteContractReturnType>;
    /**
     * method transferFrom for contract WrappedIP with only encode
     *
     * @param request WrappedIpTransferFromRequest
     * @return EncodedTxData
     */
    transferFromEncode(request: WrappedIpTransferFromRequest): EncodedTxData;
    /**
     * method withdraw for contract WrappedIP
     *
     * @param request WrappedIpWithdrawRequest
     * @return Promise<WriteContractReturnType>
     */
    withdraw(request: WrappedIpWithdrawRequest): Promise<WriteContractReturnType>;
    /**
     * method withdraw for contract WrappedIP with only encode
     *
     * @param request WrappedIpWithdrawRequest
     * @return EncodedTxData
     */
    withdrawEncode(request: WrappedIpWithdrawRequest): EncodedTxData;
}
//# sourceMappingURL=generated.d.ts.map