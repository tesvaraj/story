import { Address, Hex, PublicClient } from "viem";
import { SimpleWalletClient, WrappedIpClient } from "../abi/generated.js";
import { ApproveRequest, DepositRequest, WithdrawRequest } from "../types/resources/wip.js";
export declare class WipClient {
    wipClient: WrappedIpClient;
    private readonly rpcClient;
    private readonly wallet;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient);
    /**
     * Wraps the selected amount of IP to WIP.
     * The WIP will be deposited to the wallet that transferred the IP.
     */
    deposit({ amount, txOptions }: DepositRequest): Promise<import("../types/utils/txOptions.js").HandleTxOptionsResponse>;
    /**
     * Unwraps the selected amount of WIP to IP.
     */
    withdraw({ amount, txOptions }: WithdrawRequest): Promise<import("../types/utils/txOptions.js").HandleTxOptionsResponse>;
    /**
     * Approve a spender to use the wallet's WIP balance.
     */
    approve(req: ApproveRequest): Promise<{
        txHash: Hex;
    }>;
    /**
     * Returns the balance of WIP for an address.
     */
    balanceOf(addr: Address): Promise<bigint>;
}
//# sourceMappingURL=wip.d.ts.map