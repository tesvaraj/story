import { Address, Hex, PublicClient } from "viem";
import { ClaimableRevenueRequest, ClaimableRevenueResponse, ClaimAllRevenueRequest, ClaimAllRevenueResponse, PayRoyaltyOnBehalfRequest, PayRoyaltyOnBehalfResponse } from "../types/resources/royalty.js";
import { IpAssetRegistryClient, IpRoyaltyVaultImplEventClient, IpRoyaltyVaultImplReadOnlyClient, Multicall3Client, RoyaltyModuleClient, SimpleWalletClient, WrappedIpClient } from "../abi/generated.js";
import { IPAccountClient } from "./ipAccount.js";
export declare class RoyaltyClient {
    royaltyModuleClient: RoyaltyModuleClient;
    ipAssetRegistryClient: IpAssetRegistryClient;
    ipAccountClient: IPAccountClient;
    ipRoyaltyVaultImplReadOnlyClient: IpRoyaltyVaultImplReadOnlyClient;
    ipRoyaltyVaultImplEventClient: IpRoyaltyVaultImplEventClient;
    multicall3Client: Multicall3Client;
    wipClient: WrappedIpClient;
    private readonly rpcClient;
    private readonly wallet;
    private readonly walletAddress;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient);
    claimAllRevenue(req: ClaimAllRevenueRequest): Promise<ClaimAllRevenueResponse>;
    /**
     * Allows the function caller to pay royalties to the receiver IP asset on behalf of the payer IP asset.
     * @param request - The request object that contains all data needed to pay royalty on behalf.
     *   @param request.receiverIpId The ipId that receives the royalties.
     *   @param request.payerIpId The ID of the IP asset that pays the royalties.
     *   @param request.token The token to use to pay the royalties.
     *   @param request.amount The amount to pay.
     *   @param request.txOptions - [Optional] transaction. This extends `WaitForTransactionReceiptParameters` from the Viem library, excluding the `hash` property.
     * @returns A Promise that resolves to an object containing the transaction hash.
     */
    payRoyaltyOnBehalf(request: PayRoyaltyOnBehalfRequest): Promise<PayRoyaltyOnBehalfResponse>;
    /**
     * Get total amount of revenue token claimable by a royalty token holder.
     * @param request - The request object that contains all data needed to claim Revenue.
     *   @param request.royaltyVaultIpId The id of the royalty vault.
     *   @param request.claimer The address of the royalty token holder
     *   @param request.token The revenue token to claim.
     * @returns A Promise that contains the amount of revenue token claimable
     */
    claimableRevenue(request: ClaimableRevenueRequest): Promise<ClaimableRevenueResponse>;
    /**
     * Get the royalty vault proxy address of given royaltyVaultIpId.
     * @param royaltyVaultIpId the id of the royalty vault.
     * @returns A Promise that resolves to an object containing the royalty vault address.
     */
    getRoyaltyVaultAddress(royaltyVaultIpId: Hex): Promise<Address>;
    private getClaimedTokensFromReceipt;
    private transferClaimedTokensFromIpToWallet;
}
//# sourceMappingURL=royalty.d.ts.map